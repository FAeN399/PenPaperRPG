import { z } from "zod";
export declare const abilityIds: readonly ["STR", "DEX", "CON", "INT", "WIS", "CHA"];
export declare const proficiencyRanks: readonly ["untrained", "trained", "expert", "master", "legendary"];
export declare const rarities: readonly ["common", "uncommon", "rare", "unique"];
export declare const sizes: readonly ["tiny", "small", "medium", "large", "huge", "gargantuan"];
export declare const speedTypes: readonly ["land", "burrow", "climb", "fly", "swim"];
export declare const spellTraditions: readonly ["arcane", "divine", "occult", "primal", "focus"];
export declare const spellcastingTypes: readonly ["prepared", "spontaneous", "focus", "innate"];
export declare const modifierTypes: readonly ["status", "item", "circumstance", "untyped"];
export declare const abilityIdSchema: z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>;
export type AbilityId = z.infer<typeof abilityIdSchema>;
export declare const proficiencyRankSchema: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
export type ProficiencyRank = z.infer<typeof proficiencyRankSchema>;
export declare const raritySchema: z.ZodEnum<["common", "uncommon", "rare", "unique"]>;
export type Rarity = z.infer<typeof raritySchema>;
export declare const sizeSchema: z.ZodEnum<["tiny", "small", "medium", "large", "huge", "gargantuan"]>;
export type Size = z.infer<typeof sizeSchema>;
export declare const speedTypeSchema: z.ZodEnum<["land", "burrow", "climb", "fly", "swim"]>;
export type SpeedType = z.infer<typeof speedTypeSchema>;
export declare const spellTraditionSchema: z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>;
export type SpellTradition = z.infer<typeof spellTraditionSchema>;
export declare const spellcastingTypeSchema: z.ZodEnum<["prepared", "spontaneous", "focus", "innate"]>;
export type SpellcastingType = z.infer<typeof spellcastingTypeSchema>;
export declare const modifierTypeSchema: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
export type ModifierType = z.infer<typeof modifierTypeSchema>;
export declare const standardSkillIds: readonly ["Acrobatics", "Arcana", "Athletics", "Crafting", "Deception", "Diplomacy", "Intimidation", "Medicine", "Nature", "Occultism", "Performance", "Religion", "Society", "Stealth", "Survival", "Thievery"];
export declare const skillIdSchema: z.ZodString;
export type SkillId = z.infer<typeof skillIdSchema>;
export declare const sourceReferenceSchema: z.ZodObject<{
    id: z.ZodString;
    page: z.ZodOptional<z.ZodNumber>;
    license: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    id: string;
    page?: number | undefined;
    license?: string | undefined;
}, {
    id: string;
    page?: number | undefined;
    license?: string | undefined;
}>;
export type SourceReference = z.infer<typeof sourceReferenceSchema>;
export declare const versionSchema: z.ZodObject<{
    major: z.ZodDefault<z.ZodNumber>;
    minor: z.ZodDefault<z.ZodNumber>;
    patch: z.ZodDefault<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    major: number;
    minor: number;
    patch: number;
}, {
    major?: number | undefined;
    minor?: number | undefined;
    patch?: number | undefined;
}>;
export type VersionInfo = z.infer<typeof versionSchema>;
declare const abilityScoreBlockSchema: z.ZodObject<{
    STR: z.ZodNumber;
    DEX: z.ZodNumber;
    CON: z.ZodNumber;
    INT: z.ZodNumber;
    WIS: z.ZodNumber;
    CHA: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    STR: number;
    DEX: number;
    CON: number;
    INT: number;
    WIS: number;
    CHA: number;
}, {
    STR: number;
    DEX: number;
    CON: number;
    INT: number;
    WIS: number;
    CHA: number;
}>;
export type AbilityScoreBlock = z.infer<typeof abilityScoreBlockSchema>;
declare const abilityAdjustmentLogSchema: z.ZodObject<{
    type: z.ZodEnum<["boost", "flaw"]>;
    abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
    value: z.ZodNumber;
    source: z.ZodString;
    level: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    value: number;
    type: "boost" | "flaw";
    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    source: string;
    level?: number | undefined;
}, {
    value: number;
    type: "boost" | "flaw";
    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    source: string;
    level?: number | undefined;
}>;
export type AbilityAdjustmentLogEntry = z.infer<typeof abilityAdjustmentLogSchema>;
declare const modifierBreakdownSchema: z.ZodObject<{
    type: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
    label: z.ZodString;
    value: z.ZodNumber;
    source: z.ZodString;
}, "strip", z.ZodTypeAny, {
    value: number;
    type: "status" | "item" | "circumstance" | "untyped";
    label: string;
    source: string;
}, {
    value: number;
    type: "status" | "item" | "circumstance" | "untyped";
    label: string;
    source: string;
}>;
export type ModifierBreakdown = z.infer<typeof modifierBreakdownSchema>;
export declare const predicateSchema: z.ZodType<any>;
export type PredicateNode = z.infer<typeof predicateSchema>;
declare const abilityBoostModeSchema: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    type: z.ZodLiteral<"fixed">;
    abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
    value: z.ZodDefault<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    value: number;
    type: "fixed";
    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
}, {
    type: "fixed";
    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    value?: number | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"choice">;
    count: z.ZodNumber;
    options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
    value: z.ZodDefault<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    value: number;
    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    type: "choice";
    count: number;
}, {
    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    type: "choice";
    count: number;
    value?: number | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"any">;
    count: z.ZodNumber;
    value: z.ZodDefault<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    value: number;
    type: "any";
    count: number;
}, {
    type: "any";
    count: number;
    value?: number | undefined;
}>]>;
export type AbilityBoostMode = z.infer<typeof abilityBoostModeSchema>;
declare const choiceScopeSchema: z.ZodEnum<["skill", "skillFeat", "classFeat", "generalFeat", "ancestryFeat", "classFeature", "spell", "abilityBoost", "proficiency", "language"]>;
export type ChoiceScope = z.infer<typeof choiceScopeSchema>;
declare const choiceDefinitionSchema: z.ZodObject<{
    id: z.ZodString;
    label: z.ZodString;
    count: z.ZodDefault<z.ZodNumber>;
    scope: z.ZodEnum<["skill", "skillFeat", "classFeat", "generalFeat", "ancestryFeat", "classFeature", "spell", "abilityBoost", "proficiency", "language"]>;
    filter: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
    allowDuplicates: z.ZodDefault<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    id: string;
    count: number;
    label: string;
    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
    allowDuplicates: boolean;
    filter?: any;
}, {
    id: string;
    label: string;
    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
    filter?: any;
    count?: number | undefined;
    allowDuplicates?: boolean | undefined;
}>;
export type ChoiceDefinition = z.infer<typeof choiceDefinitionSchema>;
export declare const effectSchema: z.ZodDiscriminatedUnion<"kind", [z.ZodObject<{
    kind: z.ZodLiteral<"grantFeat">;
    featId: z.ZodString;
    level: z.ZodOptional<z.ZodNumber>;
    required: z.ZodDefault<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    kind: "grantFeat";
    featId: string;
    required: boolean;
    level?: number | undefined;
}, {
    kind: "grantFeat";
    featId: string;
    level?: number | undefined;
    required?: boolean | undefined;
}>, z.ZodObject<{
    kind: z.ZodLiteral<"grantProficiency">;
    target: z.ZodString;
    rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
}, "strip", z.ZodTypeAny, {
    kind: "grantProficiency";
    target: string;
    rank: "untrained" | "trained" | "expert" | "master" | "legendary";
}, {
    kind: "grantProficiency";
    target: string;
    rank: "untrained" | "trained" | "expert" | "master" | "legendary";
}>, z.ZodObject<{
    kind: z.ZodLiteral<"setProficiency">;
    target: z.ZodString;
    rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
}, "strip", z.ZodTypeAny, {
    kind: "setProficiency";
    target: string;
    rank: "untrained" | "trained" | "expert" | "master" | "legendary";
}, {
    kind: "setProficiency";
    target: string;
    rank: "untrained" | "trained" | "expert" | "master" | "legendary";
}>, z.ZodObject<{
    kind: z.ZodLiteral<"abilityBoost">;
    mode: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"fixed">;
        abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
        value: z.ZodDefault<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        value: number;
        type: "fixed";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    }, {
        type: "fixed";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        value?: number | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"choice">;
        count: z.ZodNumber;
        options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
        value: z.ZodDefault<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        value: number;
        options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        type: "choice";
        count: number;
    }, {
        options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        type: "choice";
        count: number;
        value?: number | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"any">;
        count: z.ZodNumber;
        value: z.ZodDefault<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        value: number;
        type: "any";
        count: number;
    }, {
        type: "any";
        count: number;
        value?: number | undefined;
    }>]>;
}, "strip", z.ZodTypeAny, {
    kind: "abilityBoost";
    mode: {
        value: number;
        type: "fixed";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    } | {
        value: number;
        options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        type: "choice";
        count: number;
    } | {
        value: number;
        type: "any";
        count: number;
    };
}, {
    kind: "abilityBoost";
    mode: {
        type: "fixed";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        value?: number | undefined;
    } | {
        options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        type: "choice";
        count: number;
        value?: number | undefined;
    } | {
        type: "any";
        count: number;
        value?: number | undefined;
    };
}>, z.ZodObject<{
    kind: z.ZodLiteral<"abilityFlaw">;
    abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
}, "strip", z.ZodTypeAny, {
    kind: "abilityFlaw";
    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
}, {
    kind: "abilityFlaw";
    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
}>, z.ZodObject<{
    kind: z.ZodLiteral<"addModifier">;
    target: z.ZodString;
    modifierType: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
    value: z.ZodNumber;
    label: z.ZodString;
    stacking: z.ZodDefault<z.ZodEnum<["max", "stack"]>>;
}, "strip", z.ZodTypeAny, {
    value: number;
    kind: "addModifier";
    target: string;
    modifierType: "status" | "item" | "circumstance" | "untyped";
    label: string;
    stacking: "max" | "stack";
}, {
    value: number;
    kind: "addModifier";
    target: string;
    modifierType: "status" | "item" | "circumstance" | "untyped";
    label: string;
    stacking?: "max" | "stack" | undefined;
}>, z.ZodObject<{
    kind: z.ZodLiteral<"grantTrait">;
    traitId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    kind: "grantTrait";
    traitId: string;
}, {
    kind: "grantTrait";
    traitId: string;
}>, z.ZodObject<{
    kind: z.ZodLiteral<"grantLanguage">;
    languageId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    kind: "grantLanguage";
    languageId: string;
}, {
    kind: "grantLanguage";
    languageId: string;
}>, z.ZodObject<{
    kind: z.ZodLiteral<"grantSense">;
    senseId: z.ZodString;
    range: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    kind: "grantSense";
    senseId: string;
    range?: number | undefined;
}, {
    kind: "grantSense";
    senseId: string;
    range?: number | undefined;
}>, z.ZodObject<{
    kind: z.ZodLiteral<"grantChoice">;
    choice: z.ZodObject<{
        id: z.ZodString;
        label: z.ZodString;
        count: z.ZodDefault<z.ZodNumber>;
        scope: z.ZodEnum<["skill", "skillFeat", "classFeat", "generalFeat", "ancestryFeat", "classFeature", "spell", "abilityBoost", "proficiency", "language"]>;
        filter: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
        allowDuplicates: z.ZodDefault<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        count: number;
        label: string;
        scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
        allowDuplicates: boolean;
        filter?: any;
    }, {
        id: string;
        label: string;
        scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
        filter?: any;
        count?: number | undefined;
        allowDuplicates?: boolean | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    kind: "grantChoice";
    choice: {
        id: string;
        count: number;
        label: string;
        scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
        allowDuplicates: boolean;
        filter?: any;
    };
}, {
    kind: "grantChoice";
    choice: {
        id: string;
        label: string;
        scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
        filter?: any;
        count?: number | undefined;
        allowDuplicates?: boolean | undefined;
    };
}>, z.ZodObject<{
    kind: z.ZodLiteral<"addSpeed">;
    speedType: z.ZodEnum<["land", "burrow", "climb", "fly", "swim"]>;
    value: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    value: number;
    kind: "addSpeed";
    speedType: "land" | "burrow" | "climb" | "fly" | "swim";
}, {
    value: number;
    kind: "addSpeed";
    speedType: "land" | "burrow" | "climb" | "fly" | "swim";
}>, z.ZodObject<{
    kind: z.ZodLiteral<"grantSpell">;
    spellId: z.ZodString;
    tradition: z.ZodOptional<z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>>;
    rank: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    kind: "grantSpell";
    spellId: string;
    rank?: number | undefined;
    tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
}, {
    kind: "grantSpell";
    spellId: string;
    rank?: number | undefined;
    tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
}>, z.ZodObject<{
    kind: z.ZodLiteral<"grantSpellSlot">;
    rank: z.ZodNumber;
    count: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    kind: "grantSpellSlot";
    rank: number;
    count: number;
}, {
    kind: "grantSpellSlot";
    rank: number;
    count: number;
}>, z.ZodObject<{
    kind: z.ZodLiteral<"modifyResource">;
    resource: z.ZodEnum<["focusPoints", "hitPoints", "resolve", "classDc", "heroPoints"]>;
    value: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    value: number;
    kind: "modifyResource";
    resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
}, {
    value: number;
    kind: "modifyResource";
    resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
}>, z.ZodObject<{
    kind: z.ZodLiteral<"grantFlag">;
    flag: z.ZodString;
}, "strip", z.ZodTypeAny, {
    kind: "grantFlag";
    flag: string;
}, {
    kind: "grantFlag";
    flag: string;
}>, z.ZodObject<{
    kind: z.ZodLiteral<"removeFlag">;
    flag: z.ZodString;
}, "strip", z.ZodTypeAny, {
    kind: "removeFlag";
    flag: string;
}, {
    kind: "removeFlag";
    flag: string;
}>]>;
export type Effect = z.infer<typeof effectSchema>;
declare const entityBaseSchema: z.ZodObject<{
    id: z.ZodString;
    type: z.ZodString;
    slug: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
    summary: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
    source: z.ZodObject<{
        id: z.ZodString;
        page: z.ZodOptional<z.ZodNumber>;
        license: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    }, {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    }>;
    version: z.ZodOptional<z.ZodObject<{
        major: z.ZodDefault<z.ZodNumber>;
        minor: z.ZodDefault<z.ZodNumber>;
        patch: z.ZodDefault<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        major: number;
        minor: number;
        patch: number;
    }, {
        major?: number | undefined;
        minor?: number | undefined;
        patch?: number | undefined;
    }>>;
    rarity: z.ZodDefault<z.ZodEnum<["common", "uncommon", "rare", "unique"]>>;
    traits: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    prerequisites: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
    effects: z.ZodDefault<z.ZodArray<z.ZodDiscriminatedUnion<"kind", [z.ZodObject<{
        kind: z.ZodLiteral<"grantFeat">;
        featId: z.ZodString;
        level: z.ZodOptional<z.ZodNumber>;
        required: z.ZodDefault<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantFeat";
        featId: string;
        required: boolean;
        level?: number | undefined;
    }, {
        kind: "grantFeat";
        featId: string;
        level?: number | undefined;
        required?: boolean | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantProficiency">;
        target: z.ZodString;
        rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }, {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"setProficiency">;
        target: z.ZodString;
        rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
    }, "strip", z.ZodTypeAny, {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }, {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"abilityBoost">;
        mode: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"fixed">;
            abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        }, {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"choice">;
            count: z.ZodNumber;
            options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        }, {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"any">;
            count: z.ZodNumber;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "any";
            count: number;
        }, {
            type: "any";
            count: number;
            value?: number | undefined;
        }>]>;
    }, "strip", z.ZodTypeAny, {
        kind: "abilityBoost";
        mode: {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        } | {
            value: number;
            type: "any";
            count: number;
        };
    }, {
        kind: "abilityBoost";
        mode: {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        } | {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        } | {
            type: "any";
            count: number;
            value?: number | undefined;
        };
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"abilityFlaw">;
        abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
    }, "strip", z.ZodTypeAny, {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    }, {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"addModifier">;
        target: z.ZodString;
        modifierType: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
        value: z.ZodNumber;
        label: z.ZodString;
        stacking: z.ZodDefault<z.ZodEnum<["max", "stack"]>>;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking: "max" | "stack";
    }, {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking?: "max" | "stack" | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantTrait">;
        traitId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantTrait";
        traitId: string;
    }, {
        kind: "grantTrait";
        traitId: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantLanguage">;
        languageId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantLanguage";
        languageId: string;
    }, {
        kind: "grantLanguage";
        languageId: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSense">;
        senseId: z.ZodString;
        range: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    }, {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantChoice">;
        choice: z.ZodObject<{
            id: z.ZodString;
            label: z.ZodString;
            count: z.ZodDefault<z.ZodNumber>;
            scope: z.ZodEnum<["skill", "skillFeat", "classFeat", "generalFeat", "ancestryFeat", "classFeature", "spell", "abilityBoost", "proficiency", "language"]>;
            filter: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
            allowDuplicates: z.ZodDefault<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        }, {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantChoice";
        choice: {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        };
    }, {
        kind: "grantChoice";
        choice: {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        };
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"addSpeed">;
        speedType: z.ZodEnum<["land", "burrow", "climb", "fly", "swim"]>;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    }, {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSpell">;
        spellId: z.ZodString;
        tradition: z.ZodOptional<z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>>;
        rank: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    }, {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSpellSlot">;
        rank: z.ZodNumber;
        count: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    }, {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"modifyResource">;
        resource: z.ZodEnum<["focusPoints", "hitPoints", "resolve", "classDc", "heroPoints"]>;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    }, {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantFlag">;
        flag: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantFlag";
        flag: string;
    }, {
        kind: "grantFlag";
        flag: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"removeFlag">;
        flag: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "removeFlag";
        flag: string;
    }, {
        kind: "removeFlag";
        flag: string;
    }>]>, "many">>;
}, "strip", z.ZodTypeAny, {
    id: string;
    type: string;
    name: string;
    source: {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    };
    rarity: "common" | "uncommon" | "rare" | "unique";
    traits: string[];
    tags: string[];
    effects: ({
        kind: "grantFeat";
        featId: string;
        required: boolean;
        level?: number | undefined;
    } | {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "abilityBoost";
        mode: {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        } | {
            value: number;
            type: "any";
            count: number;
        };
    } | {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    } | {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking: "max" | "stack";
    } | {
        kind: "grantTrait";
        traitId: string;
    } | {
        kind: "grantLanguage";
        languageId: string;
    } | {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    } | {
        kind: "grantChoice";
        choice: {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        };
    } | {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    } | {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    } | {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    } | {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    } | {
        kind: "grantFlag";
        flag: string;
    } | {
        kind: "removeFlag";
        flag: string;
    })[];
    slug?: string | undefined;
    summary?: string | undefined;
    description?: string | undefined;
    version?: {
        major: number;
        minor: number;
        patch: number;
    } | undefined;
    prerequisites?: any;
}, {
    id: string;
    type: string;
    name: string;
    source: {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    };
    slug?: string | undefined;
    summary?: string | undefined;
    description?: string | undefined;
    version?: {
        major?: number | undefined;
        minor?: number | undefined;
        patch?: number | undefined;
    } | undefined;
    rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
    traits?: string[] | undefined;
    tags?: string[] | undefined;
    prerequisites?: any;
    effects?: ({
        kind: "grantFeat";
        featId: string;
        level?: number | undefined;
        required?: boolean | undefined;
    } | {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "abilityBoost";
        mode: {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        } | {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        } | {
            type: "any";
            count: number;
            value?: number | undefined;
        };
    } | {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    } | {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking?: "max" | "stack" | undefined;
    } | {
        kind: "grantTrait";
        traitId: string;
    } | {
        kind: "grantLanguage";
        languageId: string;
    } | {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    } | {
        kind: "grantChoice";
        choice: {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        };
    } | {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    } | {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    } | {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    } | {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    } | {
        kind: "grantFlag";
        flag: string;
    } | {
        kind: "removeFlag";
        flag: string;
    })[] | undefined;
}>;
export type EntityBase = z.infer<typeof entityBaseSchema>;
export declare const ancestrySchema: z.ZodObject<{
    id: z.ZodString;
    slug: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
    summary: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
    source: z.ZodObject<{
        id: z.ZodString;
        page: z.ZodOptional<z.ZodNumber>;
        license: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    }, {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    }>;
    version: z.ZodOptional<z.ZodObject<{
        major: z.ZodDefault<z.ZodNumber>;
        minor: z.ZodDefault<z.ZodNumber>;
        patch: z.ZodDefault<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        major: number;
        minor: number;
        patch: number;
    }, {
        major?: number | undefined;
        minor?: number | undefined;
        patch?: number | undefined;
    }>>;
    rarity: z.ZodDefault<z.ZodEnum<["common", "uncommon", "rare", "unique"]>>;
    traits: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    prerequisites: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
    effects: z.ZodDefault<z.ZodArray<z.ZodDiscriminatedUnion<"kind", [z.ZodObject<{
        kind: z.ZodLiteral<"grantFeat">;
        featId: z.ZodString;
        level: z.ZodOptional<z.ZodNumber>;
        required: z.ZodDefault<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantFeat";
        featId: string;
        required: boolean;
        level?: number | undefined;
    }, {
        kind: "grantFeat";
        featId: string;
        level?: number | undefined;
        required?: boolean | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantProficiency">;
        target: z.ZodString;
        rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }, {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"setProficiency">;
        target: z.ZodString;
        rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
    }, "strip", z.ZodTypeAny, {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }, {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"abilityBoost">;
        mode: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"fixed">;
            abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        }, {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"choice">;
            count: z.ZodNumber;
            options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        }, {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"any">;
            count: z.ZodNumber;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "any";
            count: number;
        }, {
            type: "any";
            count: number;
            value?: number | undefined;
        }>]>;
    }, "strip", z.ZodTypeAny, {
        kind: "abilityBoost";
        mode: {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        } | {
            value: number;
            type: "any";
            count: number;
        };
    }, {
        kind: "abilityBoost";
        mode: {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        } | {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        } | {
            type: "any";
            count: number;
            value?: number | undefined;
        };
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"abilityFlaw">;
        abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
    }, "strip", z.ZodTypeAny, {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    }, {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"addModifier">;
        target: z.ZodString;
        modifierType: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
        value: z.ZodNumber;
        label: z.ZodString;
        stacking: z.ZodDefault<z.ZodEnum<["max", "stack"]>>;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking: "max" | "stack";
    }, {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking?: "max" | "stack" | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantTrait">;
        traitId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantTrait";
        traitId: string;
    }, {
        kind: "grantTrait";
        traitId: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantLanguage">;
        languageId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantLanguage";
        languageId: string;
    }, {
        kind: "grantLanguage";
        languageId: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSense">;
        senseId: z.ZodString;
        range: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    }, {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantChoice">;
        choice: z.ZodObject<{
            id: z.ZodString;
            label: z.ZodString;
            count: z.ZodDefault<z.ZodNumber>;
            scope: z.ZodEnum<["skill", "skillFeat", "classFeat", "generalFeat", "ancestryFeat", "classFeature", "spell", "abilityBoost", "proficiency", "language"]>;
            filter: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
            allowDuplicates: z.ZodDefault<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        }, {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantChoice";
        choice: {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        };
    }, {
        kind: "grantChoice";
        choice: {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        };
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"addSpeed">;
        speedType: z.ZodEnum<["land", "burrow", "climb", "fly", "swim"]>;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    }, {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSpell">;
        spellId: z.ZodString;
        tradition: z.ZodOptional<z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>>;
        rank: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    }, {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSpellSlot">;
        rank: z.ZodNumber;
        count: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    }, {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"modifyResource">;
        resource: z.ZodEnum<["focusPoints", "hitPoints", "resolve", "classDc", "heroPoints"]>;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    }, {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantFlag">;
        flag: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantFlag";
        flag: string;
    }, {
        kind: "grantFlag";
        flag: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"removeFlag">;
        flag: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "removeFlag";
        flag: string;
    }, {
        kind: "removeFlag";
        flag: string;
    }>]>, "many">>;
} & {
    type: z.ZodLiteral<"ancestry">;
    hitPoints: z.ZodNumber;
    size: z.ZodEnum<["tiny", "small", "medium", "large", "huge", "gargantuan"]>;
    speed: z.ZodNumber;
    boosts: z.ZodDefault<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"fixed">;
        abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
        value: z.ZodDefault<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        value: number;
        type: "fixed";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    }, {
        type: "fixed";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        value?: number | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"choice">;
        count: z.ZodNumber;
        options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
        value: z.ZodDefault<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        value: number;
        options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        type: "choice";
        count: number;
    }, {
        options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        type: "choice";
        count: number;
        value?: number | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"any">;
        count: z.ZodNumber;
        value: z.ZodDefault<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        value: number;
        type: "any";
        count: number;
    }, {
        type: "any";
        count: number;
        value?: number | undefined;
    }>]>, "many">>;
    flaws: z.ZodDefault<z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">>;
    languages: z.ZodDefault<z.ZodObject<{
        granted: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        choices: z.ZodDefault<z.ZodObject<{
            count: z.ZodDefault<z.ZodNumber>;
            options: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            options: string[];
            count: number;
        }, {
            options?: string[] | undefined;
            count?: number | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        granted: string[];
        choices: {
            options: string[];
            count: number;
        };
    }, {
        granted?: string[] | undefined;
        choices?: {
            options?: string[] | undefined;
            count?: number | undefined;
        } | undefined;
    }>>;
    features: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    id: string;
    type: "ancestry";
    hitPoints: number;
    name: string;
    source: {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    };
    rarity: "common" | "uncommon" | "rare" | "unique";
    traits: string[];
    tags: string[];
    effects: ({
        kind: "grantFeat";
        featId: string;
        required: boolean;
        level?: number | undefined;
    } | {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "abilityBoost";
        mode: {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        } | {
            value: number;
            type: "any";
            count: number;
        };
    } | {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    } | {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking: "max" | "stack";
    } | {
        kind: "grantTrait";
        traitId: string;
    } | {
        kind: "grantLanguage";
        languageId: string;
    } | {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    } | {
        kind: "grantChoice";
        choice: {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        };
    } | {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    } | {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    } | {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    } | {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    } | {
        kind: "grantFlag";
        flag: string;
    } | {
        kind: "removeFlag";
        flag: string;
    })[];
    size: "tiny" | "small" | "medium" | "large" | "huge" | "gargantuan";
    speed: number;
    boosts: ({
        value: number;
        type: "fixed";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    } | {
        value: number;
        options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        type: "choice";
        count: number;
    } | {
        value: number;
        type: "any";
        count: number;
    })[];
    flaws: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    languages: {
        granted: string[];
        choices: {
            options: string[];
            count: number;
        };
    };
    features: string[];
    slug?: string | undefined;
    summary?: string | undefined;
    description?: string | undefined;
    version?: {
        major: number;
        minor: number;
        patch: number;
    } | undefined;
    prerequisites?: any;
}, {
    id: string;
    type: "ancestry";
    hitPoints: number;
    name: string;
    source: {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    };
    size: "tiny" | "small" | "medium" | "large" | "huge" | "gargantuan";
    speed: number;
    slug?: string | undefined;
    summary?: string | undefined;
    description?: string | undefined;
    version?: {
        major?: number | undefined;
        minor?: number | undefined;
        patch?: number | undefined;
    } | undefined;
    rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
    traits?: string[] | undefined;
    tags?: string[] | undefined;
    prerequisites?: any;
    effects?: ({
        kind: "grantFeat";
        featId: string;
        level?: number | undefined;
        required?: boolean | undefined;
    } | {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "abilityBoost";
        mode: {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        } | {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        } | {
            type: "any";
            count: number;
            value?: number | undefined;
        };
    } | {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    } | {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking?: "max" | "stack" | undefined;
    } | {
        kind: "grantTrait";
        traitId: string;
    } | {
        kind: "grantLanguage";
        languageId: string;
    } | {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    } | {
        kind: "grantChoice";
        choice: {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        };
    } | {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    } | {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    } | {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    } | {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    } | {
        kind: "grantFlag";
        flag: string;
    } | {
        kind: "removeFlag";
        flag: string;
    })[] | undefined;
    boosts?: ({
        type: "fixed";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        value?: number | undefined;
    } | {
        options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        type: "choice";
        count: number;
        value?: number | undefined;
    } | {
        type: "any";
        count: number;
        value?: number | undefined;
    })[] | undefined;
    flaws?: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[] | undefined;
    languages?: {
        granted?: string[] | undefined;
        choices?: {
            options?: string[] | undefined;
            count?: number | undefined;
        } | undefined;
    } | undefined;
    features?: string[] | undefined;
}>;
export type Ancestry = z.infer<typeof ancestrySchema>;
export declare const heritageSchema: z.ZodObject<{
    id: z.ZodString;
    slug: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
    summary: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
    source: z.ZodObject<{
        id: z.ZodString;
        page: z.ZodOptional<z.ZodNumber>;
        license: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    }, {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    }>;
    version: z.ZodOptional<z.ZodObject<{
        major: z.ZodDefault<z.ZodNumber>;
        minor: z.ZodDefault<z.ZodNumber>;
        patch: z.ZodDefault<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        major: number;
        minor: number;
        patch: number;
    }, {
        major?: number | undefined;
        minor?: number | undefined;
        patch?: number | undefined;
    }>>;
    rarity: z.ZodDefault<z.ZodEnum<["common", "uncommon", "rare", "unique"]>>;
    traits: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    prerequisites: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
    effects: z.ZodDefault<z.ZodArray<z.ZodDiscriminatedUnion<"kind", [z.ZodObject<{
        kind: z.ZodLiteral<"grantFeat">;
        featId: z.ZodString;
        level: z.ZodOptional<z.ZodNumber>;
        required: z.ZodDefault<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantFeat";
        featId: string;
        required: boolean;
        level?: number | undefined;
    }, {
        kind: "grantFeat";
        featId: string;
        level?: number | undefined;
        required?: boolean | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantProficiency">;
        target: z.ZodString;
        rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }, {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"setProficiency">;
        target: z.ZodString;
        rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
    }, "strip", z.ZodTypeAny, {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }, {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"abilityBoost">;
        mode: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"fixed">;
            abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        }, {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"choice">;
            count: z.ZodNumber;
            options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        }, {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"any">;
            count: z.ZodNumber;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "any";
            count: number;
        }, {
            type: "any";
            count: number;
            value?: number | undefined;
        }>]>;
    }, "strip", z.ZodTypeAny, {
        kind: "abilityBoost";
        mode: {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        } | {
            value: number;
            type: "any";
            count: number;
        };
    }, {
        kind: "abilityBoost";
        mode: {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        } | {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        } | {
            type: "any";
            count: number;
            value?: number | undefined;
        };
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"abilityFlaw">;
        abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
    }, "strip", z.ZodTypeAny, {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    }, {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"addModifier">;
        target: z.ZodString;
        modifierType: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
        value: z.ZodNumber;
        label: z.ZodString;
        stacking: z.ZodDefault<z.ZodEnum<["max", "stack"]>>;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking: "max" | "stack";
    }, {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking?: "max" | "stack" | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantTrait">;
        traitId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantTrait";
        traitId: string;
    }, {
        kind: "grantTrait";
        traitId: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantLanguage">;
        languageId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantLanguage";
        languageId: string;
    }, {
        kind: "grantLanguage";
        languageId: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSense">;
        senseId: z.ZodString;
        range: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    }, {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantChoice">;
        choice: z.ZodObject<{
            id: z.ZodString;
            label: z.ZodString;
            count: z.ZodDefault<z.ZodNumber>;
            scope: z.ZodEnum<["skill", "skillFeat", "classFeat", "generalFeat", "ancestryFeat", "classFeature", "spell", "abilityBoost", "proficiency", "language"]>;
            filter: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
            allowDuplicates: z.ZodDefault<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        }, {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantChoice";
        choice: {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        };
    }, {
        kind: "grantChoice";
        choice: {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        };
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"addSpeed">;
        speedType: z.ZodEnum<["land", "burrow", "climb", "fly", "swim"]>;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    }, {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSpell">;
        spellId: z.ZodString;
        tradition: z.ZodOptional<z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>>;
        rank: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    }, {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSpellSlot">;
        rank: z.ZodNumber;
        count: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    }, {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"modifyResource">;
        resource: z.ZodEnum<["focusPoints", "hitPoints", "resolve", "classDc", "heroPoints"]>;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    }, {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantFlag">;
        flag: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantFlag";
        flag: string;
    }, {
        kind: "grantFlag";
        flag: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"removeFlag">;
        flag: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "removeFlag";
        flag: string;
    }, {
        kind: "removeFlag";
        flag: string;
    }>]>, "many">>;
} & {
    type: z.ZodLiteral<"heritage">;
    ancestryId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    type: "heritage";
    name: string;
    source: {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    };
    rarity: "common" | "uncommon" | "rare" | "unique";
    traits: string[];
    tags: string[];
    effects: ({
        kind: "grantFeat";
        featId: string;
        required: boolean;
        level?: number | undefined;
    } | {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "abilityBoost";
        mode: {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        } | {
            value: number;
            type: "any";
            count: number;
        };
    } | {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    } | {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking: "max" | "stack";
    } | {
        kind: "grantTrait";
        traitId: string;
    } | {
        kind: "grantLanguage";
        languageId: string;
    } | {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    } | {
        kind: "grantChoice";
        choice: {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        };
    } | {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    } | {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    } | {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    } | {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    } | {
        kind: "grantFlag";
        flag: string;
    } | {
        kind: "removeFlag";
        flag: string;
    })[];
    ancestryId: string;
    slug?: string | undefined;
    summary?: string | undefined;
    description?: string | undefined;
    version?: {
        major: number;
        minor: number;
        patch: number;
    } | undefined;
    prerequisites?: any;
}, {
    id: string;
    type: "heritage";
    name: string;
    source: {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    };
    ancestryId: string;
    slug?: string | undefined;
    summary?: string | undefined;
    description?: string | undefined;
    version?: {
        major?: number | undefined;
        minor?: number | undefined;
        patch?: number | undefined;
    } | undefined;
    rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
    traits?: string[] | undefined;
    tags?: string[] | undefined;
    prerequisites?: any;
    effects?: ({
        kind: "grantFeat";
        featId: string;
        level?: number | undefined;
        required?: boolean | undefined;
    } | {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "abilityBoost";
        mode: {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        } | {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        } | {
            type: "any";
            count: number;
            value?: number | undefined;
        };
    } | {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    } | {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking?: "max" | "stack" | undefined;
    } | {
        kind: "grantTrait";
        traitId: string;
    } | {
        kind: "grantLanguage";
        languageId: string;
    } | {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    } | {
        kind: "grantChoice";
        choice: {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        };
    } | {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    } | {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    } | {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    } | {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    } | {
        kind: "grantFlag";
        flag: string;
    } | {
        kind: "removeFlag";
        flag: string;
    })[] | undefined;
}>;
export type Heritage = z.infer<typeof heritageSchema>;
export declare const backgroundSchema: z.ZodObject<{
    id: z.ZodString;
    slug: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
    summary: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
    source: z.ZodObject<{
        id: z.ZodString;
        page: z.ZodOptional<z.ZodNumber>;
        license: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    }, {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    }>;
    version: z.ZodOptional<z.ZodObject<{
        major: z.ZodDefault<z.ZodNumber>;
        minor: z.ZodDefault<z.ZodNumber>;
        patch: z.ZodDefault<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        major: number;
        minor: number;
        patch: number;
    }, {
        major?: number | undefined;
        minor?: number | undefined;
        patch?: number | undefined;
    }>>;
    rarity: z.ZodDefault<z.ZodEnum<["common", "uncommon", "rare", "unique"]>>;
    traits: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    prerequisites: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
    effects: z.ZodDefault<z.ZodArray<z.ZodDiscriminatedUnion<"kind", [z.ZodObject<{
        kind: z.ZodLiteral<"grantFeat">;
        featId: z.ZodString;
        level: z.ZodOptional<z.ZodNumber>;
        required: z.ZodDefault<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantFeat";
        featId: string;
        required: boolean;
        level?: number | undefined;
    }, {
        kind: "grantFeat";
        featId: string;
        level?: number | undefined;
        required?: boolean | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantProficiency">;
        target: z.ZodString;
        rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }, {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"setProficiency">;
        target: z.ZodString;
        rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
    }, "strip", z.ZodTypeAny, {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }, {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"abilityBoost">;
        mode: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"fixed">;
            abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        }, {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"choice">;
            count: z.ZodNumber;
            options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        }, {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"any">;
            count: z.ZodNumber;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "any";
            count: number;
        }, {
            type: "any";
            count: number;
            value?: number | undefined;
        }>]>;
    }, "strip", z.ZodTypeAny, {
        kind: "abilityBoost";
        mode: {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        } | {
            value: number;
            type: "any";
            count: number;
        };
    }, {
        kind: "abilityBoost";
        mode: {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        } | {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        } | {
            type: "any";
            count: number;
            value?: number | undefined;
        };
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"abilityFlaw">;
        abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
    }, "strip", z.ZodTypeAny, {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    }, {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"addModifier">;
        target: z.ZodString;
        modifierType: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
        value: z.ZodNumber;
        label: z.ZodString;
        stacking: z.ZodDefault<z.ZodEnum<["max", "stack"]>>;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking: "max" | "stack";
    }, {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking?: "max" | "stack" | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantTrait">;
        traitId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantTrait";
        traitId: string;
    }, {
        kind: "grantTrait";
        traitId: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantLanguage">;
        languageId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantLanguage";
        languageId: string;
    }, {
        kind: "grantLanguage";
        languageId: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSense">;
        senseId: z.ZodString;
        range: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    }, {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantChoice">;
        choice: z.ZodObject<{
            id: z.ZodString;
            label: z.ZodString;
            count: z.ZodDefault<z.ZodNumber>;
            scope: z.ZodEnum<["skill", "skillFeat", "classFeat", "generalFeat", "ancestryFeat", "classFeature", "spell", "abilityBoost", "proficiency", "language"]>;
            filter: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
            allowDuplicates: z.ZodDefault<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        }, {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantChoice";
        choice: {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        };
    }, {
        kind: "grantChoice";
        choice: {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        };
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"addSpeed">;
        speedType: z.ZodEnum<["land", "burrow", "climb", "fly", "swim"]>;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    }, {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSpell">;
        spellId: z.ZodString;
        tradition: z.ZodOptional<z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>>;
        rank: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    }, {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSpellSlot">;
        rank: z.ZodNumber;
        count: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    }, {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"modifyResource">;
        resource: z.ZodEnum<["focusPoints", "hitPoints", "resolve", "classDc", "heroPoints"]>;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    }, {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantFlag">;
        flag: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantFlag";
        flag: string;
    }, {
        kind: "grantFlag";
        flag: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"removeFlag">;
        flag: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "removeFlag";
        flag: string;
    }, {
        kind: "removeFlag";
        flag: string;
    }>]>, "many">>;
} & {
    type: z.ZodLiteral<"background">;
    boosts: z.ZodDefault<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"fixed">;
        abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
        value: z.ZodDefault<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        value: number;
        type: "fixed";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    }, {
        type: "fixed";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        value?: number | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"choice">;
        count: z.ZodNumber;
        options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
        value: z.ZodDefault<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        value: number;
        options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        type: "choice";
        count: number;
    }, {
        options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        type: "choice";
        count: number;
        value?: number | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"any">;
        count: z.ZodNumber;
        value: z.ZodDefault<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        value: number;
        type: "any";
        count: number;
    }, {
        type: "any";
        count: number;
        value?: number | undefined;
    }>]>, "many">>;
    skillTraining: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    feat: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    id: string;
    type: "background";
    name: string;
    source: {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    };
    rarity: "common" | "uncommon" | "rare" | "unique";
    traits: string[];
    tags: string[];
    effects: ({
        kind: "grantFeat";
        featId: string;
        required: boolean;
        level?: number | undefined;
    } | {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "abilityBoost";
        mode: {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        } | {
            value: number;
            type: "any";
            count: number;
        };
    } | {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    } | {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking: "max" | "stack";
    } | {
        kind: "grantTrait";
        traitId: string;
    } | {
        kind: "grantLanguage";
        languageId: string;
    } | {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    } | {
        kind: "grantChoice";
        choice: {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        };
    } | {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    } | {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    } | {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    } | {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    } | {
        kind: "grantFlag";
        flag: string;
    } | {
        kind: "removeFlag";
        flag: string;
    })[];
    boosts: ({
        value: number;
        type: "fixed";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    } | {
        value: number;
        options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        type: "choice";
        count: number;
    } | {
        value: number;
        type: "any";
        count: number;
    })[];
    skillTraining: string[];
    slug?: string | undefined;
    summary?: string | undefined;
    description?: string | undefined;
    version?: {
        major: number;
        minor: number;
        patch: number;
    } | undefined;
    prerequisites?: any;
    feat?: string | undefined;
}, {
    id: string;
    type: "background";
    name: string;
    source: {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    };
    slug?: string | undefined;
    summary?: string | undefined;
    description?: string | undefined;
    version?: {
        major?: number | undefined;
        minor?: number | undefined;
        patch?: number | undefined;
    } | undefined;
    rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
    traits?: string[] | undefined;
    tags?: string[] | undefined;
    prerequisites?: any;
    effects?: ({
        kind: "grantFeat";
        featId: string;
        level?: number | undefined;
        required?: boolean | undefined;
    } | {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "abilityBoost";
        mode: {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        } | {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        } | {
            type: "any";
            count: number;
            value?: number | undefined;
        };
    } | {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    } | {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking?: "max" | "stack" | undefined;
    } | {
        kind: "grantTrait";
        traitId: string;
    } | {
        kind: "grantLanguage";
        languageId: string;
    } | {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    } | {
        kind: "grantChoice";
        choice: {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        };
    } | {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    } | {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    } | {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    } | {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    } | {
        kind: "grantFlag";
        flag: string;
    } | {
        kind: "removeFlag";
        flag: string;
    })[] | undefined;
    boosts?: ({
        type: "fixed";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        value?: number | undefined;
    } | {
        options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        type: "choice";
        count: number;
        value?: number | undefined;
    } | {
        type: "any";
        count: number;
        value?: number | undefined;
    })[] | undefined;
    skillTraining?: string[] | undefined;
    feat?: string | undefined;
}>;
export type Background = z.infer<typeof backgroundSchema>;
declare const classProficiencySchema: z.ZodObject<{
    perception: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
    savingThrows: z.ZodObject<{
        fortitude: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
        reflex: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
        will: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
    }, "strip", z.ZodTypeAny, {
        fortitude: "untrained" | "trained" | "expert" | "master" | "legendary";
        reflex: "untrained" | "trained" | "expert" | "master" | "legendary";
        will: "untrained" | "trained" | "expert" | "master" | "legendary";
    }, {
        fortitude: "untrained" | "trained" | "expert" | "master" | "legendary";
        reflex: "untrained" | "trained" | "expert" | "master" | "legendary";
        will: "untrained" | "trained" | "expert" | "master" | "legendary";
    }>;
    skills: z.ZodObject<{
        trained: z.ZodDefault<z.ZodNumber>;
        additionalChoices: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        trained: number;
        additionalChoices: string[];
    }, {
        trained?: number | undefined;
        additionalChoices?: string[] | undefined;
    }>;
    attacks: z.ZodDefault<z.ZodObject<{
        simple: z.ZodOptional<z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
        martial: z.ZodOptional<z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
        advanced: z.ZodOptional<z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
        unarmed: z.ZodOptional<z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
    }, "strip", z.ZodTypeAny, {
        simple?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        martial?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        advanced?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        unarmed?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
    }, {
        simple?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        martial?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        advanced?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        unarmed?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
    }>>;
    defense: z.ZodDefault<z.ZodObject<{
        unarmored: z.ZodOptional<z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
        light: z.ZodOptional<z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
        medium: z.ZodOptional<z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
        heavy: z.ZodOptional<z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
        shields: z.ZodOptional<z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
    }, "strip", z.ZodTypeAny, {
        medium?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        unarmored?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        light?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        heavy?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        shields?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
    }, {
        medium?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        unarmored?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        light?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        heavy?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        shields?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
    }>>;
    classDC: z.ZodOptional<z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
}, "strip", z.ZodTypeAny, {
    perception: "untrained" | "trained" | "expert" | "master" | "legendary";
    savingThrows: {
        fortitude: "untrained" | "trained" | "expert" | "master" | "legendary";
        reflex: "untrained" | "trained" | "expert" | "master" | "legendary";
        will: "untrained" | "trained" | "expert" | "master" | "legendary";
    };
    skills: {
        trained: number;
        additionalChoices: string[];
    };
    attacks: {
        simple?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        martial?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        advanced?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        unarmed?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
    };
    defense: {
        medium?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        unarmored?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        light?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        heavy?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        shields?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
    };
    classDC?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
}, {
    perception: "untrained" | "trained" | "expert" | "master" | "legendary";
    savingThrows: {
        fortitude: "untrained" | "trained" | "expert" | "master" | "legendary";
        reflex: "untrained" | "trained" | "expert" | "master" | "legendary";
        will: "untrained" | "trained" | "expert" | "master" | "legendary";
    };
    skills: {
        trained?: number | undefined;
        additionalChoices?: string[] | undefined;
    };
    attacks?: {
        simple?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        martial?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        advanced?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        unarmed?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
    } | undefined;
    defense?: {
        medium?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        unarmored?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        light?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        heavy?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        shields?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
    } | undefined;
    classDC?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
}>;
export type ClassProficiencies = z.infer<typeof classProficiencySchema>;
declare const classProgressionSchema: z.ZodRecord<z.ZodString, z.ZodObject<{
    grants: z.ZodDefault<z.ZodArray<z.ZodDiscriminatedUnion<"kind", [z.ZodObject<{
        kind: z.ZodLiteral<"grantFeat">;
        featId: z.ZodString;
        level: z.ZodOptional<z.ZodNumber>;
        required: z.ZodDefault<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantFeat";
        featId: string;
        required: boolean;
        level?: number | undefined;
    }, {
        kind: "grantFeat";
        featId: string;
        level?: number | undefined;
        required?: boolean | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantProficiency">;
        target: z.ZodString;
        rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }, {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"setProficiency">;
        target: z.ZodString;
        rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
    }, "strip", z.ZodTypeAny, {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }, {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"abilityBoost">;
        mode: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"fixed">;
            abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        }, {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"choice">;
            count: z.ZodNumber;
            options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        }, {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"any">;
            count: z.ZodNumber;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "any";
            count: number;
        }, {
            type: "any";
            count: number;
            value?: number | undefined;
        }>]>;
    }, "strip", z.ZodTypeAny, {
        kind: "abilityBoost";
        mode: {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        } | {
            value: number;
            type: "any";
            count: number;
        };
    }, {
        kind: "abilityBoost";
        mode: {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        } | {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        } | {
            type: "any";
            count: number;
            value?: number | undefined;
        };
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"abilityFlaw">;
        abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
    }, "strip", z.ZodTypeAny, {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    }, {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"addModifier">;
        target: z.ZodString;
        modifierType: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
        value: z.ZodNumber;
        label: z.ZodString;
        stacking: z.ZodDefault<z.ZodEnum<["max", "stack"]>>;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking: "max" | "stack";
    }, {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking?: "max" | "stack" | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantTrait">;
        traitId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantTrait";
        traitId: string;
    }, {
        kind: "grantTrait";
        traitId: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantLanguage">;
        languageId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantLanguage";
        languageId: string;
    }, {
        kind: "grantLanguage";
        languageId: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSense">;
        senseId: z.ZodString;
        range: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    }, {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantChoice">;
        choice: z.ZodObject<{
            id: z.ZodString;
            label: z.ZodString;
            count: z.ZodDefault<z.ZodNumber>;
            scope: z.ZodEnum<["skill", "skillFeat", "classFeat", "generalFeat", "ancestryFeat", "classFeature", "spell", "abilityBoost", "proficiency", "language"]>;
            filter: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
            allowDuplicates: z.ZodDefault<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        }, {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantChoice";
        choice: {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        };
    }, {
        kind: "grantChoice";
        choice: {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        };
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"addSpeed">;
        speedType: z.ZodEnum<["land", "burrow", "climb", "fly", "swim"]>;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    }, {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSpell">;
        spellId: z.ZodString;
        tradition: z.ZodOptional<z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>>;
        rank: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    }, {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSpellSlot">;
        rank: z.ZodNumber;
        count: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    }, {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"modifyResource">;
        resource: z.ZodEnum<["focusPoints", "hitPoints", "resolve", "classDc", "heroPoints"]>;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    }, {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantFlag">;
        flag: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantFlag";
        flag: string;
    }, {
        kind: "grantFlag";
        flag: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"removeFlag">;
        flag: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "removeFlag";
        flag: string;
    }, {
        kind: "removeFlag";
        flag: string;
    }>]>, "many">>;
    choices: z.ZodDefault<z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        label: z.ZodString;
        count: z.ZodDefault<z.ZodNumber>;
        scope: z.ZodEnum<["skill", "skillFeat", "classFeat", "generalFeat", "ancestryFeat", "classFeature", "spell", "abilityBoost", "proficiency", "language"]>;
        filter: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
        allowDuplicates: z.ZodDefault<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        count: number;
        label: string;
        scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
        allowDuplicates: boolean;
        filter?: any;
    }, {
        id: string;
        label: string;
        scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
        filter?: any;
        count?: number | undefined;
        allowDuplicates?: boolean | undefined;
    }>, "many">>;
    proficiencyBumps: z.ZodDefault<z.ZodArray<z.ZodObject<{
        target: z.ZodString;
        rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
    }, "strip", z.ZodTypeAny, {
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }, {
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }>, "many">>;
    featureRefs: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    choices: {
        id: string;
        count: number;
        label: string;
        scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
        allowDuplicates: boolean;
        filter?: any;
    }[];
    grants: ({
        kind: "grantFeat";
        featId: string;
        required: boolean;
        level?: number | undefined;
    } | {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "abilityBoost";
        mode: {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        } | {
            value: number;
            type: "any";
            count: number;
        };
    } | {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    } | {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking: "max" | "stack";
    } | {
        kind: "grantTrait";
        traitId: string;
    } | {
        kind: "grantLanguage";
        languageId: string;
    } | {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    } | {
        kind: "grantChoice";
        choice: {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        };
    } | {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    } | {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    } | {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    } | {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    } | {
        kind: "grantFlag";
        flag: string;
    } | {
        kind: "removeFlag";
        flag: string;
    })[];
    proficiencyBumps: {
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }[];
    featureRefs: string[];
}, {
    choices?: {
        id: string;
        label: string;
        scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
        filter?: any;
        count?: number | undefined;
        allowDuplicates?: boolean | undefined;
    }[] | undefined;
    grants?: ({
        kind: "grantFeat";
        featId: string;
        level?: number | undefined;
        required?: boolean | undefined;
    } | {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "abilityBoost";
        mode: {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        } | {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        } | {
            type: "any";
            count: number;
            value?: number | undefined;
        };
    } | {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    } | {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking?: "max" | "stack" | undefined;
    } | {
        kind: "grantTrait";
        traitId: string;
    } | {
        kind: "grantLanguage";
        languageId: string;
    } | {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    } | {
        kind: "grantChoice";
        choice: {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        };
    } | {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    } | {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    } | {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    } | {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    } | {
        kind: "grantFlag";
        flag: string;
    } | {
        kind: "removeFlag";
        flag: string;
    })[] | undefined;
    proficiencyBumps?: {
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }[] | undefined;
    featureRefs?: string[] | undefined;
}>>;
export type ClassProgression = z.infer<typeof classProgressionSchema>;
export declare const classSchema: z.ZodObject<{
    id: z.ZodString;
    slug: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
    summary: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
    source: z.ZodObject<{
        id: z.ZodString;
        page: z.ZodOptional<z.ZodNumber>;
        license: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    }, {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    }>;
    version: z.ZodOptional<z.ZodObject<{
        major: z.ZodDefault<z.ZodNumber>;
        minor: z.ZodDefault<z.ZodNumber>;
        patch: z.ZodDefault<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        major: number;
        minor: number;
        patch: number;
    }, {
        major?: number | undefined;
        minor?: number | undefined;
        patch?: number | undefined;
    }>>;
    rarity: z.ZodDefault<z.ZodEnum<["common", "uncommon", "rare", "unique"]>>;
    traits: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    prerequisites: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
    effects: z.ZodDefault<z.ZodArray<z.ZodDiscriminatedUnion<"kind", [z.ZodObject<{
        kind: z.ZodLiteral<"grantFeat">;
        featId: z.ZodString;
        level: z.ZodOptional<z.ZodNumber>;
        required: z.ZodDefault<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantFeat";
        featId: string;
        required: boolean;
        level?: number | undefined;
    }, {
        kind: "grantFeat";
        featId: string;
        level?: number | undefined;
        required?: boolean | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantProficiency">;
        target: z.ZodString;
        rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }, {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"setProficiency">;
        target: z.ZodString;
        rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
    }, "strip", z.ZodTypeAny, {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }, {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"abilityBoost">;
        mode: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"fixed">;
            abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        }, {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"choice">;
            count: z.ZodNumber;
            options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        }, {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"any">;
            count: z.ZodNumber;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "any";
            count: number;
        }, {
            type: "any";
            count: number;
            value?: number | undefined;
        }>]>;
    }, "strip", z.ZodTypeAny, {
        kind: "abilityBoost";
        mode: {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        } | {
            value: number;
            type: "any";
            count: number;
        };
    }, {
        kind: "abilityBoost";
        mode: {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        } | {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        } | {
            type: "any";
            count: number;
            value?: number | undefined;
        };
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"abilityFlaw">;
        abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
    }, "strip", z.ZodTypeAny, {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    }, {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"addModifier">;
        target: z.ZodString;
        modifierType: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
        value: z.ZodNumber;
        label: z.ZodString;
        stacking: z.ZodDefault<z.ZodEnum<["max", "stack"]>>;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking: "max" | "stack";
    }, {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking?: "max" | "stack" | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantTrait">;
        traitId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantTrait";
        traitId: string;
    }, {
        kind: "grantTrait";
        traitId: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantLanguage">;
        languageId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantLanguage";
        languageId: string;
    }, {
        kind: "grantLanguage";
        languageId: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSense">;
        senseId: z.ZodString;
        range: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    }, {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantChoice">;
        choice: z.ZodObject<{
            id: z.ZodString;
            label: z.ZodString;
            count: z.ZodDefault<z.ZodNumber>;
            scope: z.ZodEnum<["skill", "skillFeat", "classFeat", "generalFeat", "ancestryFeat", "classFeature", "spell", "abilityBoost", "proficiency", "language"]>;
            filter: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
            allowDuplicates: z.ZodDefault<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        }, {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantChoice";
        choice: {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        };
    }, {
        kind: "grantChoice";
        choice: {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        };
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"addSpeed">;
        speedType: z.ZodEnum<["land", "burrow", "climb", "fly", "swim"]>;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    }, {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSpell">;
        spellId: z.ZodString;
        tradition: z.ZodOptional<z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>>;
        rank: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    }, {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSpellSlot">;
        rank: z.ZodNumber;
        count: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    }, {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"modifyResource">;
        resource: z.ZodEnum<["focusPoints", "hitPoints", "resolve", "classDc", "heroPoints"]>;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    }, {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantFlag">;
        flag: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantFlag";
        flag: string;
    }, {
        kind: "grantFlag";
        flag: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"removeFlag">;
        flag: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "removeFlag";
        flag: string;
    }, {
        kind: "removeFlag";
        flag: string;
    }>]>, "many">>;
} & {
    type: z.ZodLiteral<"class">;
    keyAbility: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
    hitPointsPerLevel: z.ZodNumber;
    proficiencies: z.ZodObject<{
        perception: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
        savingThrows: z.ZodObject<{
            fortitude: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
            reflex: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
            will: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
        }, "strip", z.ZodTypeAny, {
            fortitude: "untrained" | "trained" | "expert" | "master" | "legendary";
            reflex: "untrained" | "trained" | "expert" | "master" | "legendary";
            will: "untrained" | "trained" | "expert" | "master" | "legendary";
        }, {
            fortitude: "untrained" | "trained" | "expert" | "master" | "legendary";
            reflex: "untrained" | "trained" | "expert" | "master" | "legendary";
            will: "untrained" | "trained" | "expert" | "master" | "legendary";
        }>;
        skills: z.ZodObject<{
            trained: z.ZodDefault<z.ZodNumber>;
            additionalChoices: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            trained: number;
            additionalChoices: string[];
        }, {
            trained?: number | undefined;
            additionalChoices?: string[] | undefined;
        }>;
        attacks: z.ZodDefault<z.ZodObject<{
            simple: z.ZodOptional<z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
            martial: z.ZodOptional<z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
            advanced: z.ZodOptional<z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
            unarmed: z.ZodOptional<z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
        }, "strip", z.ZodTypeAny, {
            simple?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            martial?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            advanced?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            unarmed?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        }, {
            simple?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            martial?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            advanced?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            unarmed?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        }>>;
        defense: z.ZodDefault<z.ZodObject<{
            unarmored: z.ZodOptional<z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
            light: z.ZodOptional<z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
            medium: z.ZodOptional<z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
            heavy: z.ZodOptional<z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
            shields: z.ZodOptional<z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
        }, "strip", z.ZodTypeAny, {
            medium?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            unarmored?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            light?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            heavy?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            shields?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        }, {
            medium?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            unarmored?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            light?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            heavy?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            shields?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        }>>;
        classDC: z.ZodOptional<z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
    }, "strip", z.ZodTypeAny, {
        perception: "untrained" | "trained" | "expert" | "master" | "legendary";
        savingThrows: {
            fortitude: "untrained" | "trained" | "expert" | "master" | "legendary";
            reflex: "untrained" | "trained" | "expert" | "master" | "legendary";
            will: "untrained" | "trained" | "expert" | "master" | "legendary";
        };
        skills: {
            trained: number;
            additionalChoices: string[];
        };
        attacks: {
            simple?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            martial?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            advanced?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            unarmed?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        };
        defense: {
            medium?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            unarmored?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            light?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            heavy?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            shields?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        };
        classDC?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
    }, {
        perception: "untrained" | "trained" | "expert" | "master" | "legendary";
        savingThrows: {
            fortitude: "untrained" | "trained" | "expert" | "master" | "legendary";
            reflex: "untrained" | "trained" | "expert" | "master" | "legendary";
            will: "untrained" | "trained" | "expert" | "master" | "legendary";
        };
        skills: {
            trained?: number | undefined;
            additionalChoices?: string[] | undefined;
        };
        attacks?: {
            simple?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            martial?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            advanced?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            unarmed?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        } | undefined;
        defense?: {
            medium?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            unarmored?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            light?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            heavy?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            shields?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        } | undefined;
        classDC?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
    }>;
    progression: z.ZodRecord<z.ZodString, z.ZodObject<{
        grants: z.ZodDefault<z.ZodArray<z.ZodDiscriminatedUnion<"kind", [z.ZodObject<{
            kind: z.ZodLiteral<"grantFeat">;
            featId: z.ZodString;
            level: z.ZodOptional<z.ZodNumber>;
            required: z.ZodDefault<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantFeat";
            featId: string;
            required: boolean;
            level?: number | undefined;
        }, {
            kind: "grantFeat";
            featId: string;
            level?: number | undefined;
            required?: boolean | undefined;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantProficiency">;
            target: z.ZodString;
            rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }, {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"setProficiency">;
            target: z.ZodString;
            rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
        }, "strip", z.ZodTypeAny, {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }, {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"abilityBoost">;
            mode: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"fixed">;
                abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
                value: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            }, {
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"choice">;
                count: z.ZodNumber;
                options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
                value: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            }, {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"any">;
                count: z.ZodNumber;
                value: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "any";
                count: number;
            }, {
                type: "any";
                count: number;
                value?: number | undefined;
            }>]>;
        }, "strip", z.ZodTypeAny, {
            kind: "abilityBoost";
            mode: {
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            } | {
                value: number;
                type: "any";
                count: number;
            };
        }, {
            kind: "abilityBoost";
            mode: {
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            } | {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            } | {
                type: "any";
                count: number;
                value?: number | undefined;
            };
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"abilityFlaw">;
            abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
        }, "strip", z.ZodTypeAny, {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        }, {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"addModifier">;
            target: z.ZodString;
            modifierType: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
            value: z.ZodNumber;
            label: z.ZodString;
            stacking: z.ZodDefault<z.ZodEnum<["max", "stack"]>>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking: "max" | "stack";
        }, {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking?: "max" | "stack" | undefined;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantTrait">;
            traitId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            kind: "grantTrait";
            traitId: string;
        }, {
            kind: "grantTrait";
            traitId: string;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantLanguage">;
            languageId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            kind: "grantLanguage";
            languageId: string;
        }, {
            kind: "grantLanguage";
            languageId: string;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantSense">;
            senseId: z.ZodString;
            range: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        }, {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantChoice">;
            choice: z.ZodObject<{
                id: z.ZodString;
                label: z.ZodString;
                count: z.ZodDefault<z.ZodNumber>;
                scope: z.ZodEnum<["skill", "skillFeat", "classFeat", "generalFeat", "ancestryFeat", "classFeature", "spell", "abilityBoost", "proficiency", "language"]>;
                filter: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
                allowDuplicates: z.ZodDefault<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                count: number;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                allowDuplicates: boolean;
                filter?: any;
            }, {
                id: string;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                filter?: any;
                count?: number | undefined;
                allowDuplicates?: boolean | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantChoice";
            choice: {
                id: string;
                count: number;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                allowDuplicates: boolean;
                filter?: any;
            };
        }, {
            kind: "grantChoice";
            choice: {
                id: string;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                filter?: any;
                count?: number | undefined;
                allowDuplicates?: boolean | undefined;
            };
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"addSpeed">;
            speedType: z.ZodEnum<["land", "burrow", "climb", "fly", "swim"]>;
            value: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        }, {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantSpell">;
            spellId: z.ZodString;
            tradition: z.ZodOptional<z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>>;
            rank: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        }, {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantSpellSlot">;
            rank: z.ZodNumber;
            count: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        }, {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"modifyResource">;
            resource: z.ZodEnum<["focusPoints", "hitPoints", "resolve", "classDc", "heroPoints"]>;
            value: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        }, {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantFlag">;
            flag: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            kind: "grantFlag";
            flag: string;
        }, {
            kind: "grantFlag";
            flag: string;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"removeFlag">;
            flag: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            kind: "removeFlag";
            flag: string;
        }, {
            kind: "removeFlag";
            flag: string;
        }>]>, "many">>;
        choices: z.ZodDefault<z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            label: z.ZodString;
            count: z.ZodDefault<z.ZodNumber>;
            scope: z.ZodEnum<["skill", "skillFeat", "classFeat", "generalFeat", "ancestryFeat", "classFeature", "spell", "abilityBoost", "proficiency", "language"]>;
            filter: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
            allowDuplicates: z.ZodDefault<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        }, {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        }>, "many">>;
        proficiencyBumps: z.ZodDefault<z.ZodArray<z.ZodObject<{
            target: z.ZodString;
            rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
        }, "strip", z.ZodTypeAny, {
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }, {
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }>, "many">>;
        featureRefs: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        choices: {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        }[];
        grants: ({
            kind: "grantFeat";
            featId: string;
            required: boolean;
            level?: number | undefined;
        } | {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "abilityBoost";
            mode: {
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            } | {
                value: number;
                type: "any";
                count: number;
            };
        } | {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking: "max" | "stack";
        } | {
            kind: "grantTrait";
            traitId: string;
        } | {
            kind: "grantLanguage";
            languageId: string;
        } | {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        } | {
            kind: "grantChoice";
            choice: {
                id: string;
                count: number;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                allowDuplicates: boolean;
                filter?: any;
            };
        } | {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        } | {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        } | {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        } | {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        } | {
            kind: "grantFlag";
            flag: string;
        } | {
            kind: "removeFlag";
            flag: string;
        })[];
        proficiencyBumps: {
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }[];
        featureRefs: string[];
    }, {
        choices?: {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        }[] | undefined;
        grants?: ({
            kind: "grantFeat";
            featId: string;
            level?: number | undefined;
            required?: boolean | undefined;
        } | {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "abilityBoost";
            mode: {
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            } | {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            } | {
                type: "any";
                count: number;
                value?: number | undefined;
            };
        } | {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking?: "max" | "stack" | undefined;
        } | {
            kind: "grantTrait";
            traitId: string;
        } | {
            kind: "grantLanguage";
            languageId: string;
        } | {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        } | {
            kind: "grantChoice";
            choice: {
                id: string;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                filter?: any;
                count?: number | undefined;
                allowDuplicates?: boolean | undefined;
            };
        } | {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        } | {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        } | {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        } | {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        } | {
            kind: "grantFlag";
            flag: string;
        } | {
            kind: "removeFlag";
            flag: string;
        })[] | undefined;
        proficiencyBumps?: {
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }[] | undefined;
        featureRefs?: string[] | undefined;
    }>>;
    spellcasting: z.ZodOptional<z.ZodObject<{
        tradition: z.ZodOptional<z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>>;
        type: z.ZodOptional<z.ZodEnum<["prepared", "spontaneous", "focus", "innate"]>>;
    }, "strip", z.ZodTypeAny, {
        type?: "focus" | "prepared" | "spontaneous" | "innate" | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    }, {
        type?: "focus" | "prepared" | "spontaneous" | "innate" | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    id: string;
    type: "class";
    name: string;
    source: {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    };
    rarity: "common" | "uncommon" | "rare" | "unique";
    traits: string[];
    tags: string[];
    effects: ({
        kind: "grantFeat";
        featId: string;
        required: boolean;
        level?: number | undefined;
    } | {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "abilityBoost";
        mode: {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        } | {
            value: number;
            type: "any";
            count: number;
        };
    } | {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    } | {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking: "max" | "stack";
    } | {
        kind: "grantTrait";
        traitId: string;
    } | {
        kind: "grantLanguage";
        languageId: string;
    } | {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    } | {
        kind: "grantChoice";
        choice: {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        };
    } | {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    } | {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    } | {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    } | {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    } | {
        kind: "grantFlag";
        flag: string;
    } | {
        kind: "removeFlag";
        flag: string;
    })[];
    keyAbility: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    hitPointsPerLevel: number;
    proficiencies: {
        perception: "untrained" | "trained" | "expert" | "master" | "legendary";
        savingThrows: {
            fortitude: "untrained" | "trained" | "expert" | "master" | "legendary";
            reflex: "untrained" | "trained" | "expert" | "master" | "legendary";
            will: "untrained" | "trained" | "expert" | "master" | "legendary";
        };
        skills: {
            trained: number;
            additionalChoices: string[];
        };
        attacks: {
            simple?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            martial?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            advanced?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            unarmed?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        };
        defense: {
            medium?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            unarmored?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            light?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            heavy?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            shields?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        };
        classDC?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
    };
    progression: Record<string, {
        choices: {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        }[];
        grants: ({
            kind: "grantFeat";
            featId: string;
            required: boolean;
            level?: number | undefined;
        } | {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "abilityBoost";
            mode: {
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            } | {
                value: number;
                type: "any";
                count: number;
            };
        } | {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking: "max" | "stack";
        } | {
            kind: "grantTrait";
            traitId: string;
        } | {
            kind: "grantLanguage";
            languageId: string;
        } | {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        } | {
            kind: "grantChoice";
            choice: {
                id: string;
                count: number;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                allowDuplicates: boolean;
                filter?: any;
            };
        } | {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        } | {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        } | {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        } | {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        } | {
            kind: "grantFlag";
            flag: string;
        } | {
            kind: "removeFlag";
            flag: string;
        })[];
        proficiencyBumps: {
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }[];
        featureRefs: string[];
    }>;
    slug?: string | undefined;
    summary?: string | undefined;
    description?: string | undefined;
    version?: {
        major: number;
        minor: number;
        patch: number;
    } | undefined;
    prerequisites?: any;
    spellcasting?: {
        type?: "focus" | "prepared" | "spontaneous" | "innate" | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    } | undefined;
}, {
    id: string;
    type: "class";
    name: string;
    source: {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    };
    keyAbility: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    hitPointsPerLevel: number;
    proficiencies: {
        perception: "untrained" | "trained" | "expert" | "master" | "legendary";
        savingThrows: {
            fortitude: "untrained" | "trained" | "expert" | "master" | "legendary";
            reflex: "untrained" | "trained" | "expert" | "master" | "legendary";
            will: "untrained" | "trained" | "expert" | "master" | "legendary";
        };
        skills: {
            trained?: number | undefined;
            additionalChoices?: string[] | undefined;
        };
        attacks?: {
            simple?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            martial?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            advanced?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            unarmed?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        } | undefined;
        defense?: {
            medium?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            unarmored?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            light?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            heavy?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            shields?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        } | undefined;
        classDC?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
    };
    progression: Record<string, {
        choices?: {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        }[] | undefined;
        grants?: ({
            kind: "grantFeat";
            featId: string;
            level?: number | undefined;
            required?: boolean | undefined;
        } | {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "abilityBoost";
            mode: {
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            } | {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            } | {
                type: "any";
                count: number;
                value?: number | undefined;
            };
        } | {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking?: "max" | "stack" | undefined;
        } | {
            kind: "grantTrait";
            traitId: string;
        } | {
            kind: "grantLanguage";
            languageId: string;
        } | {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        } | {
            kind: "grantChoice";
            choice: {
                id: string;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                filter?: any;
                count?: number | undefined;
                allowDuplicates?: boolean | undefined;
            };
        } | {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        } | {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        } | {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        } | {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        } | {
            kind: "grantFlag";
            flag: string;
        } | {
            kind: "removeFlag";
            flag: string;
        })[] | undefined;
        proficiencyBumps?: {
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }[] | undefined;
        featureRefs?: string[] | undefined;
    }>;
    slug?: string | undefined;
    summary?: string | undefined;
    description?: string | undefined;
    version?: {
        major?: number | undefined;
        minor?: number | undefined;
        patch?: number | undefined;
    } | undefined;
    rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
    traits?: string[] | undefined;
    tags?: string[] | undefined;
    prerequisites?: any;
    effects?: ({
        kind: "grantFeat";
        featId: string;
        level?: number | undefined;
        required?: boolean | undefined;
    } | {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "abilityBoost";
        mode: {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        } | {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        } | {
            type: "any";
            count: number;
            value?: number | undefined;
        };
    } | {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    } | {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking?: "max" | "stack" | undefined;
    } | {
        kind: "grantTrait";
        traitId: string;
    } | {
        kind: "grantLanguage";
        languageId: string;
    } | {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    } | {
        kind: "grantChoice";
        choice: {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        };
    } | {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    } | {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    } | {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    } | {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    } | {
        kind: "grantFlag";
        flag: string;
    } | {
        kind: "removeFlag";
        flag: string;
    })[] | undefined;
    spellcasting?: {
        type?: "focus" | "prepared" | "spontaneous" | "innate" | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    } | undefined;
}>;
export type ClassEntity = z.infer<typeof classSchema>;
export declare const archetypeSchema: z.ZodObject<{
    id: z.ZodString;
    slug: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
    summary: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
    source: z.ZodObject<{
        id: z.ZodString;
        page: z.ZodOptional<z.ZodNumber>;
        license: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    }, {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    }>;
    version: z.ZodOptional<z.ZodObject<{
        major: z.ZodDefault<z.ZodNumber>;
        minor: z.ZodDefault<z.ZodNumber>;
        patch: z.ZodDefault<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        major: number;
        minor: number;
        patch: number;
    }, {
        major?: number | undefined;
        minor?: number | undefined;
        patch?: number | undefined;
    }>>;
    rarity: z.ZodDefault<z.ZodEnum<["common", "uncommon", "rare", "unique"]>>;
    traits: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    prerequisites: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
    effects: z.ZodDefault<z.ZodArray<z.ZodDiscriminatedUnion<"kind", [z.ZodObject<{
        kind: z.ZodLiteral<"grantFeat">;
        featId: z.ZodString;
        level: z.ZodOptional<z.ZodNumber>;
        required: z.ZodDefault<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantFeat";
        featId: string;
        required: boolean;
        level?: number | undefined;
    }, {
        kind: "grantFeat";
        featId: string;
        level?: number | undefined;
        required?: boolean | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantProficiency">;
        target: z.ZodString;
        rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }, {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"setProficiency">;
        target: z.ZodString;
        rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
    }, "strip", z.ZodTypeAny, {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }, {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"abilityBoost">;
        mode: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"fixed">;
            abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        }, {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"choice">;
            count: z.ZodNumber;
            options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        }, {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"any">;
            count: z.ZodNumber;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "any";
            count: number;
        }, {
            type: "any";
            count: number;
            value?: number | undefined;
        }>]>;
    }, "strip", z.ZodTypeAny, {
        kind: "abilityBoost";
        mode: {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        } | {
            value: number;
            type: "any";
            count: number;
        };
    }, {
        kind: "abilityBoost";
        mode: {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        } | {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        } | {
            type: "any";
            count: number;
            value?: number | undefined;
        };
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"abilityFlaw">;
        abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
    }, "strip", z.ZodTypeAny, {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    }, {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"addModifier">;
        target: z.ZodString;
        modifierType: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
        value: z.ZodNumber;
        label: z.ZodString;
        stacking: z.ZodDefault<z.ZodEnum<["max", "stack"]>>;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking: "max" | "stack";
    }, {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking?: "max" | "stack" | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantTrait">;
        traitId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantTrait";
        traitId: string;
    }, {
        kind: "grantTrait";
        traitId: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantLanguage">;
        languageId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantLanguage";
        languageId: string;
    }, {
        kind: "grantLanguage";
        languageId: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSense">;
        senseId: z.ZodString;
        range: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    }, {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantChoice">;
        choice: z.ZodObject<{
            id: z.ZodString;
            label: z.ZodString;
            count: z.ZodDefault<z.ZodNumber>;
            scope: z.ZodEnum<["skill", "skillFeat", "classFeat", "generalFeat", "ancestryFeat", "classFeature", "spell", "abilityBoost", "proficiency", "language"]>;
            filter: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
            allowDuplicates: z.ZodDefault<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        }, {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantChoice";
        choice: {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        };
    }, {
        kind: "grantChoice";
        choice: {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        };
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"addSpeed">;
        speedType: z.ZodEnum<["land", "burrow", "climb", "fly", "swim"]>;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    }, {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSpell">;
        spellId: z.ZodString;
        tradition: z.ZodOptional<z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>>;
        rank: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    }, {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSpellSlot">;
        rank: z.ZodNumber;
        count: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    }, {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"modifyResource">;
        resource: z.ZodEnum<["focusPoints", "hitPoints", "resolve", "classDc", "heroPoints"]>;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    }, {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantFlag">;
        flag: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantFlag";
        flag: string;
    }, {
        kind: "grantFlag";
        flag: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"removeFlag">;
        flag: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "removeFlag";
        flag: string;
    }, {
        kind: "removeFlag";
        flag: string;
    }>]>, "many">>;
} & {
    type: z.ZodLiteral<"archetype">;
    dedicationFeatId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    type: "archetype";
    name: string;
    source: {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    };
    rarity: "common" | "uncommon" | "rare" | "unique";
    traits: string[];
    tags: string[];
    effects: ({
        kind: "grantFeat";
        featId: string;
        required: boolean;
        level?: number | undefined;
    } | {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "abilityBoost";
        mode: {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        } | {
            value: number;
            type: "any";
            count: number;
        };
    } | {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    } | {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking: "max" | "stack";
    } | {
        kind: "grantTrait";
        traitId: string;
    } | {
        kind: "grantLanguage";
        languageId: string;
    } | {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    } | {
        kind: "grantChoice";
        choice: {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        };
    } | {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    } | {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    } | {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    } | {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    } | {
        kind: "grantFlag";
        flag: string;
    } | {
        kind: "removeFlag";
        flag: string;
    })[];
    dedicationFeatId: string;
    slug?: string | undefined;
    summary?: string | undefined;
    description?: string | undefined;
    version?: {
        major: number;
        minor: number;
        patch: number;
    } | undefined;
    prerequisites?: any;
}, {
    id: string;
    type: "archetype";
    name: string;
    source: {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    };
    dedicationFeatId: string;
    slug?: string | undefined;
    summary?: string | undefined;
    description?: string | undefined;
    version?: {
        major?: number | undefined;
        minor?: number | undefined;
        patch?: number | undefined;
    } | undefined;
    rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
    traits?: string[] | undefined;
    tags?: string[] | undefined;
    prerequisites?: any;
    effects?: ({
        kind: "grantFeat";
        featId: string;
        level?: number | undefined;
        required?: boolean | undefined;
    } | {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "abilityBoost";
        mode: {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        } | {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        } | {
            type: "any";
            count: number;
            value?: number | undefined;
        };
    } | {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    } | {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking?: "max" | "stack" | undefined;
    } | {
        kind: "grantTrait";
        traitId: string;
    } | {
        kind: "grantLanguage";
        languageId: string;
    } | {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    } | {
        kind: "grantChoice";
        choice: {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        };
    } | {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    } | {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    } | {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    } | {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    } | {
        kind: "grantFlag";
        flag: string;
    } | {
        kind: "removeFlag";
        flag: string;
    })[] | undefined;
}>;
export type Archetype = z.infer<typeof archetypeSchema>;
export declare const featCategorySchema: z.ZodEnum<["ancestry", "class", "skill", "general", "archetype"]>;
export type FeatCategory = z.infer<typeof featCategorySchema>;
export declare const actionCostSchema: z.ZodObject<{
    type: z.ZodOptional<z.ZodEnum<["one", "two", "three", "free", "reaction", "varies"]>>;
    trait: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type?: "one" | "two" | "three" | "free" | "reaction" | "varies" | undefined;
    trait?: string | undefined;
}, {
    type?: "one" | "two" | "three" | "free" | "reaction" | "varies" | undefined;
    trait?: string | undefined;
}>;
export declare const featSchema: z.ZodObject<{
    id: z.ZodString;
    slug: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
    summary: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
    source: z.ZodObject<{
        id: z.ZodString;
        page: z.ZodOptional<z.ZodNumber>;
        license: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    }, {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    }>;
    version: z.ZodOptional<z.ZodObject<{
        major: z.ZodDefault<z.ZodNumber>;
        minor: z.ZodDefault<z.ZodNumber>;
        patch: z.ZodDefault<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        major: number;
        minor: number;
        patch: number;
    }, {
        major?: number | undefined;
        minor?: number | undefined;
        patch?: number | undefined;
    }>>;
    rarity: z.ZodDefault<z.ZodEnum<["common", "uncommon", "rare", "unique"]>>;
    traits: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    prerequisites: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
    effects: z.ZodDefault<z.ZodArray<z.ZodDiscriminatedUnion<"kind", [z.ZodObject<{
        kind: z.ZodLiteral<"grantFeat">;
        featId: z.ZodString;
        level: z.ZodOptional<z.ZodNumber>;
        required: z.ZodDefault<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantFeat";
        featId: string;
        required: boolean;
        level?: number | undefined;
    }, {
        kind: "grantFeat";
        featId: string;
        level?: number | undefined;
        required?: boolean | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantProficiency">;
        target: z.ZodString;
        rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }, {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"setProficiency">;
        target: z.ZodString;
        rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
    }, "strip", z.ZodTypeAny, {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }, {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"abilityBoost">;
        mode: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"fixed">;
            abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        }, {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"choice">;
            count: z.ZodNumber;
            options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        }, {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"any">;
            count: z.ZodNumber;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "any";
            count: number;
        }, {
            type: "any";
            count: number;
            value?: number | undefined;
        }>]>;
    }, "strip", z.ZodTypeAny, {
        kind: "abilityBoost";
        mode: {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        } | {
            value: number;
            type: "any";
            count: number;
        };
    }, {
        kind: "abilityBoost";
        mode: {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        } | {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        } | {
            type: "any";
            count: number;
            value?: number | undefined;
        };
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"abilityFlaw">;
        abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
    }, "strip", z.ZodTypeAny, {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    }, {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"addModifier">;
        target: z.ZodString;
        modifierType: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
        value: z.ZodNumber;
        label: z.ZodString;
        stacking: z.ZodDefault<z.ZodEnum<["max", "stack"]>>;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking: "max" | "stack";
    }, {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking?: "max" | "stack" | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantTrait">;
        traitId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantTrait";
        traitId: string;
    }, {
        kind: "grantTrait";
        traitId: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantLanguage">;
        languageId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantLanguage";
        languageId: string;
    }, {
        kind: "grantLanguage";
        languageId: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSense">;
        senseId: z.ZodString;
        range: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    }, {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantChoice">;
        choice: z.ZodObject<{
            id: z.ZodString;
            label: z.ZodString;
            count: z.ZodDefault<z.ZodNumber>;
            scope: z.ZodEnum<["skill", "skillFeat", "classFeat", "generalFeat", "ancestryFeat", "classFeature", "spell", "abilityBoost", "proficiency", "language"]>;
            filter: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
            allowDuplicates: z.ZodDefault<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        }, {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantChoice";
        choice: {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        };
    }, {
        kind: "grantChoice";
        choice: {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        };
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"addSpeed">;
        speedType: z.ZodEnum<["land", "burrow", "climb", "fly", "swim"]>;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    }, {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSpell">;
        spellId: z.ZodString;
        tradition: z.ZodOptional<z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>>;
        rank: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    }, {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSpellSlot">;
        rank: z.ZodNumber;
        count: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    }, {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"modifyResource">;
        resource: z.ZodEnum<["focusPoints", "hitPoints", "resolve", "classDc", "heroPoints"]>;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    }, {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantFlag">;
        flag: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantFlag";
        flag: string;
    }, {
        kind: "grantFlag";
        flag: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"removeFlag">;
        flag: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "removeFlag";
        flag: string;
    }, {
        kind: "removeFlag";
        flag: string;
    }>]>, "many">>;
} & {
    type: z.ZodLiteral<"feat">;
    level: z.ZodNumber;
    category: z.ZodEnum<["ancestry", "class", "skill", "general", "archetype"]>;
    actionCost: z.ZodOptional<z.ZodObject<{
        type: z.ZodOptional<z.ZodEnum<["one", "two", "three", "free", "reaction", "varies"]>>;
        trait: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        type?: "one" | "two" | "three" | "free" | "reaction" | "varies" | undefined;
        trait?: string | undefined;
    }, {
        type?: "one" | "two" | "three" | "free" | "reaction" | "varies" | undefined;
        trait?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    id: string;
    type: "feat";
    level: number;
    name: string;
    source: {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    };
    rarity: "common" | "uncommon" | "rare" | "unique";
    traits: string[];
    tags: string[];
    effects: ({
        kind: "grantFeat";
        featId: string;
        required: boolean;
        level?: number | undefined;
    } | {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "abilityBoost";
        mode: {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        } | {
            value: number;
            type: "any";
            count: number;
        };
    } | {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    } | {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking: "max" | "stack";
    } | {
        kind: "grantTrait";
        traitId: string;
    } | {
        kind: "grantLanguage";
        languageId: string;
    } | {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    } | {
        kind: "grantChoice";
        choice: {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        };
    } | {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    } | {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    } | {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    } | {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    } | {
        kind: "grantFlag";
        flag: string;
    } | {
        kind: "removeFlag";
        flag: string;
    })[];
    category: "skill" | "ancestry" | "class" | "archetype" | "general";
    slug?: string | undefined;
    summary?: string | undefined;
    description?: string | undefined;
    version?: {
        major: number;
        minor: number;
        patch: number;
    } | undefined;
    prerequisites?: any;
    actionCost?: {
        type?: "one" | "two" | "three" | "free" | "reaction" | "varies" | undefined;
        trait?: string | undefined;
    } | undefined;
}, {
    id: string;
    type: "feat";
    level: number;
    name: string;
    source: {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    };
    category: "skill" | "ancestry" | "class" | "archetype" | "general";
    slug?: string | undefined;
    summary?: string | undefined;
    description?: string | undefined;
    version?: {
        major?: number | undefined;
        minor?: number | undefined;
        patch?: number | undefined;
    } | undefined;
    rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
    traits?: string[] | undefined;
    tags?: string[] | undefined;
    prerequisites?: any;
    effects?: ({
        kind: "grantFeat";
        featId: string;
        level?: number | undefined;
        required?: boolean | undefined;
    } | {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "abilityBoost";
        mode: {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        } | {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        } | {
            type: "any";
            count: number;
            value?: number | undefined;
        };
    } | {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    } | {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking?: "max" | "stack" | undefined;
    } | {
        kind: "grantTrait";
        traitId: string;
    } | {
        kind: "grantLanguage";
        languageId: string;
    } | {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    } | {
        kind: "grantChoice";
        choice: {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        };
    } | {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    } | {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    } | {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    } | {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    } | {
        kind: "grantFlag";
        flag: string;
    } | {
        kind: "removeFlag";
        flag: string;
    })[] | undefined;
    actionCost?: {
        type?: "one" | "two" | "three" | "free" | "reaction" | "varies" | undefined;
        trait?: string | undefined;
    } | undefined;
}>;
export type Feat = z.infer<typeof featSchema>;
export declare const spellSchema: z.ZodObject<{
    id: z.ZodString;
    slug: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
    summary: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
    source: z.ZodObject<{
        id: z.ZodString;
        page: z.ZodOptional<z.ZodNumber>;
        license: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    }, {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    }>;
    version: z.ZodOptional<z.ZodObject<{
        major: z.ZodDefault<z.ZodNumber>;
        minor: z.ZodDefault<z.ZodNumber>;
        patch: z.ZodDefault<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        major: number;
        minor: number;
        patch: number;
    }, {
        major?: number | undefined;
        minor?: number | undefined;
        patch?: number | undefined;
    }>>;
    rarity: z.ZodDefault<z.ZodEnum<["common", "uncommon", "rare", "unique"]>>;
    tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    prerequisites: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
    effects: z.ZodDefault<z.ZodArray<z.ZodDiscriminatedUnion<"kind", [z.ZodObject<{
        kind: z.ZodLiteral<"grantFeat">;
        featId: z.ZodString;
        level: z.ZodOptional<z.ZodNumber>;
        required: z.ZodDefault<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantFeat";
        featId: string;
        required: boolean;
        level?: number | undefined;
    }, {
        kind: "grantFeat";
        featId: string;
        level?: number | undefined;
        required?: boolean | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantProficiency">;
        target: z.ZodString;
        rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }, {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"setProficiency">;
        target: z.ZodString;
        rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
    }, "strip", z.ZodTypeAny, {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }, {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"abilityBoost">;
        mode: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"fixed">;
            abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        }, {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"choice">;
            count: z.ZodNumber;
            options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        }, {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"any">;
            count: z.ZodNumber;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "any";
            count: number;
        }, {
            type: "any";
            count: number;
            value?: number | undefined;
        }>]>;
    }, "strip", z.ZodTypeAny, {
        kind: "abilityBoost";
        mode: {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        } | {
            value: number;
            type: "any";
            count: number;
        };
    }, {
        kind: "abilityBoost";
        mode: {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        } | {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        } | {
            type: "any";
            count: number;
            value?: number | undefined;
        };
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"abilityFlaw">;
        abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
    }, "strip", z.ZodTypeAny, {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    }, {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"addModifier">;
        target: z.ZodString;
        modifierType: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
        value: z.ZodNumber;
        label: z.ZodString;
        stacking: z.ZodDefault<z.ZodEnum<["max", "stack"]>>;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking: "max" | "stack";
    }, {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking?: "max" | "stack" | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantTrait">;
        traitId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantTrait";
        traitId: string;
    }, {
        kind: "grantTrait";
        traitId: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantLanguage">;
        languageId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantLanguage";
        languageId: string;
    }, {
        kind: "grantLanguage";
        languageId: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSense">;
        senseId: z.ZodString;
        range: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    }, {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantChoice">;
        choice: z.ZodObject<{
            id: z.ZodString;
            label: z.ZodString;
            count: z.ZodDefault<z.ZodNumber>;
            scope: z.ZodEnum<["skill", "skillFeat", "classFeat", "generalFeat", "ancestryFeat", "classFeature", "spell", "abilityBoost", "proficiency", "language"]>;
            filter: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
            allowDuplicates: z.ZodDefault<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        }, {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantChoice";
        choice: {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        };
    }, {
        kind: "grantChoice";
        choice: {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        };
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"addSpeed">;
        speedType: z.ZodEnum<["land", "burrow", "climb", "fly", "swim"]>;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    }, {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSpell">;
        spellId: z.ZodString;
        tradition: z.ZodOptional<z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>>;
        rank: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    }, {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSpellSlot">;
        rank: z.ZodNumber;
        count: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    }, {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"modifyResource">;
        resource: z.ZodEnum<["focusPoints", "hitPoints", "resolve", "classDc", "heroPoints"]>;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    }, {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantFlag">;
        flag: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantFlag";
        flag: string;
    }, {
        kind: "grantFlag";
        flag: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"removeFlag">;
        flag: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "removeFlag";
        flag: string;
    }, {
        kind: "removeFlag";
        flag: string;
    }>]>, "many">>;
} & {
    type: z.ZodLiteral<"spell">;
    rank: z.ZodNumber;
    traditions: z.ZodDefault<z.ZodArray<z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>, "many">>;
    traits: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    duration: z.ZodOptional<z.ZodString>;
    range: z.ZodOptional<z.ZodString>;
    targets: z.ZodOptional<z.ZodString>;
    savingThrow: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    id: string;
    type: "spell";
    rank: number;
    name: string;
    source: {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    };
    rarity: "common" | "uncommon" | "rare" | "unique";
    traits: string[];
    tags: string[];
    effects: ({
        kind: "grantFeat";
        featId: string;
        required: boolean;
        level?: number | undefined;
    } | {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "abilityBoost";
        mode: {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        } | {
            value: number;
            type: "any";
            count: number;
        };
    } | {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    } | {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking: "max" | "stack";
    } | {
        kind: "grantTrait";
        traitId: string;
    } | {
        kind: "grantLanguage";
        languageId: string;
    } | {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    } | {
        kind: "grantChoice";
        choice: {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        };
    } | {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    } | {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    } | {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    } | {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    } | {
        kind: "grantFlag";
        flag: string;
    } | {
        kind: "removeFlag";
        flag: string;
    })[];
    traditions: ("arcane" | "divine" | "occult" | "primal" | "focus")[];
    range?: string | undefined;
    slug?: string | undefined;
    summary?: string | undefined;
    description?: string | undefined;
    version?: {
        major: number;
        minor: number;
        patch: number;
    } | undefined;
    prerequisites?: any;
    duration?: string | undefined;
    targets?: string | undefined;
    savingThrow?: string | undefined;
}, {
    id: string;
    type: "spell";
    rank: number;
    name: string;
    source: {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    };
    range?: string | undefined;
    slug?: string | undefined;
    summary?: string | undefined;
    description?: string | undefined;
    version?: {
        major?: number | undefined;
        minor?: number | undefined;
        patch?: number | undefined;
    } | undefined;
    rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
    traits?: string[] | undefined;
    tags?: string[] | undefined;
    prerequisites?: any;
    effects?: ({
        kind: "grantFeat";
        featId: string;
        level?: number | undefined;
        required?: boolean | undefined;
    } | {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "abilityBoost";
        mode: {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        } | {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        } | {
            type: "any";
            count: number;
            value?: number | undefined;
        };
    } | {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    } | {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking?: "max" | "stack" | undefined;
    } | {
        kind: "grantTrait";
        traitId: string;
    } | {
        kind: "grantLanguage";
        languageId: string;
    } | {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    } | {
        kind: "grantChoice";
        choice: {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        };
    } | {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    } | {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    } | {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    } | {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    } | {
        kind: "grantFlag";
        flag: string;
    } | {
        kind: "removeFlag";
        flag: string;
    })[] | undefined;
    traditions?: ("arcane" | "divine" | "occult" | "primal" | "focus")[] | undefined;
    duration?: string | undefined;
    targets?: string | undefined;
    savingThrow?: string | undefined;
}>;
export type Spell = z.infer<typeof spellSchema>;
export declare const itemSchema: z.ZodObject<{
    id: z.ZodString;
    slug: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
    summary: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
    source: z.ZodObject<{
        id: z.ZodString;
        page: z.ZodOptional<z.ZodNumber>;
        license: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    }, {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    }>;
    version: z.ZodOptional<z.ZodObject<{
        major: z.ZodDefault<z.ZodNumber>;
        minor: z.ZodDefault<z.ZodNumber>;
        patch: z.ZodDefault<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        major: number;
        minor: number;
        patch: number;
    }, {
        major?: number | undefined;
        minor?: number | undefined;
        patch?: number | undefined;
    }>>;
    rarity: z.ZodDefault<z.ZodEnum<["common", "uncommon", "rare", "unique"]>>;
    tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    prerequisites: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
    effects: z.ZodDefault<z.ZodArray<z.ZodDiscriminatedUnion<"kind", [z.ZodObject<{
        kind: z.ZodLiteral<"grantFeat">;
        featId: z.ZodString;
        level: z.ZodOptional<z.ZodNumber>;
        required: z.ZodDefault<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantFeat";
        featId: string;
        required: boolean;
        level?: number | undefined;
    }, {
        kind: "grantFeat";
        featId: string;
        level?: number | undefined;
        required?: boolean | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantProficiency">;
        target: z.ZodString;
        rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }, {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"setProficiency">;
        target: z.ZodString;
        rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
    }, "strip", z.ZodTypeAny, {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }, {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"abilityBoost">;
        mode: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"fixed">;
            abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        }, {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"choice">;
            count: z.ZodNumber;
            options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        }, {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"any">;
            count: z.ZodNumber;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "any";
            count: number;
        }, {
            type: "any";
            count: number;
            value?: number | undefined;
        }>]>;
    }, "strip", z.ZodTypeAny, {
        kind: "abilityBoost";
        mode: {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        } | {
            value: number;
            type: "any";
            count: number;
        };
    }, {
        kind: "abilityBoost";
        mode: {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        } | {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        } | {
            type: "any";
            count: number;
            value?: number | undefined;
        };
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"abilityFlaw">;
        abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
    }, "strip", z.ZodTypeAny, {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    }, {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"addModifier">;
        target: z.ZodString;
        modifierType: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
        value: z.ZodNumber;
        label: z.ZodString;
        stacking: z.ZodDefault<z.ZodEnum<["max", "stack"]>>;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking: "max" | "stack";
    }, {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking?: "max" | "stack" | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantTrait">;
        traitId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantTrait";
        traitId: string;
    }, {
        kind: "grantTrait";
        traitId: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantLanguage">;
        languageId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantLanguage";
        languageId: string;
    }, {
        kind: "grantLanguage";
        languageId: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSense">;
        senseId: z.ZodString;
        range: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    }, {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantChoice">;
        choice: z.ZodObject<{
            id: z.ZodString;
            label: z.ZodString;
            count: z.ZodDefault<z.ZodNumber>;
            scope: z.ZodEnum<["skill", "skillFeat", "classFeat", "generalFeat", "ancestryFeat", "classFeature", "spell", "abilityBoost", "proficiency", "language"]>;
            filter: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
            allowDuplicates: z.ZodDefault<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        }, {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantChoice";
        choice: {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        };
    }, {
        kind: "grantChoice";
        choice: {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        };
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"addSpeed">;
        speedType: z.ZodEnum<["land", "burrow", "climb", "fly", "swim"]>;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    }, {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSpell">;
        spellId: z.ZodString;
        tradition: z.ZodOptional<z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>>;
        rank: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    }, {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSpellSlot">;
        rank: z.ZodNumber;
        count: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    }, {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"modifyResource">;
        resource: z.ZodEnum<["focusPoints", "hitPoints", "resolve", "classDc", "heroPoints"]>;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    }, {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantFlag">;
        flag: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantFlag";
        flag: string;
    }, {
        kind: "grantFlag";
        flag: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"removeFlag">;
        flag: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "removeFlag";
        flag: string;
    }, {
        kind: "removeFlag";
        flag: string;
    }>]>, "many">>;
} & {
    type: z.ZodLiteral<"item">;
    level: z.ZodNumber;
    price: z.ZodOptional<z.ZodString>;
    bulk: z.ZodOptional<z.ZodString>;
    traits: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    id: string;
    type: "item";
    level: number;
    name: string;
    source: {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    };
    rarity: "common" | "uncommon" | "rare" | "unique";
    traits: string[];
    tags: string[];
    effects: ({
        kind: "grantFeat";
        featId: string;
        required: boolean;
        level?: number | undefined;
    } | {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "abilityBoost";
        mode: {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        } | {
            value: number;
            type: "any";
            count: number;
        };
    } | {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    } | {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking: "max" | "stack";
    } | {
        kind: "grantTrait";
        traitId: string;
    } | {
        kind: "grantLanguage";
        languageId: string;
    } | {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    } | {
        kind: "grantChoice";
        choice: {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        };
    } | {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    } | {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    } | {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    } | {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    } | {
        kind: "grantFlag";
        flag: string;
    } | {
        kind: "removeFlag";
        flag: string;
    })[];
    slug?: string | undefined;
    summary?: string | undefined;
    description?: string | undefined;
    version?: {
        major: number;
        minor: number;
        patch: number;
    } | undefined;
    prerequisites?: any;
    price?: string | undefined;
    bulk?: string | undefined;
}, {
    id: string;
    type: "item";
    level: number;
    name: string;
    source: {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    };
    slug?: string | undefined;
    summary?: string | undefined;
    description?: string | undefined;
    version?: {
        major?: number | undefined;
        minor?: number | undefined;
        patch?: number | undefined;
    } | undefined;
    rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
    traits?: string[] | undefined;
    tags?: string[] | undefined;
    prerequisites?: any;
    effects?: ({
        kind: "grantFeat";
        featId: string;
        level?: number | undefined;
        required?: boolean | undefined;
    } | {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "abilityBoost";
        mode: {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        } | {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        } | {
            type: "any";
            count: number;
            value?: number | undefined;
        };
    } | {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    } | {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking?: "max" | "stack" | undefined;
    } | {
        kind: "grantTrait";
        traitId: string;
    } | {
        kind: "grantLanguage";
        languageId: string;
    } | {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    } | {
        kind: "grantChoice";
        choice: {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        };
    } | {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    } | {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    } | {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    } | {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    } | {
        kind: "grantFlag";
        flag: string;
    } | {
        kind: "removeFlag";
        flag: string;
    })[] | undefined;
    price?: string | undefined;
    bulk?: string | undefined;
}>;
export type Item = z.infer<typeof itemSchema>;
export declare const conditionSchema: z.ZodObject<{
    id: z.ZodString;
    slug: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
    summary: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
    source: z.ZodObject<{
        id: z.ZodString;
        page: z.ZodOptional<z.ZodNumber>;
        license: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    }, {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    }>;
    version: z.ZodOptional<z.ZodObject<{
        major: z.ZodDefault<z.ZodNumber>;
        minor: z.ZodDefault<z.ZodNumber>;
        patch: z.ZodDefault<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        major: number;
        minor: number;
        patch: number;
    }, {
        major?: number | undefined;
        minor?: number | undefined;
        patch?: number | undefined;
    }>>;
    rarity: z.ZodDefault<z.ZodEnum<["common", "uncommon", "rare", "unique"]>>;
    traits: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    prerequisites: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
    effects: z.ZodDefault<z.ZodArray<z.ZodDiscriminatedUnion<"kind", [z.ZodObject<{
        kind: z.ZodLiteral<"grantFeat">;
        featId: z.ZodString;
        level: z.ZodOptional<z.ZodNumber>;
        required: z.ZodDefault<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantFeat";
        featId: string;
        required: boolean;
        level?: number | undefined;
    }, {
        kind: "grantFeat";
        featId: string;
        level?: number | undefined;
        required?: boolean | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantProficiency">;
        target: z.ZodString;
        rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }, {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"setProficiency">;
        target: z.ZodString;
        rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
    }, "strip", z.ZodTypeAny, {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }, {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"abilityBoost">;
        mode: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"fixed">;
            abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        }, {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"choice">;
            count: z.ZodNumber;
            options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        }, {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"any">;
            count: z.ZodNumber;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "any";
            count: number;
        }, {
            type: "any";
            count: number;
            value?: number | undefined;
        }>]>;
    }, "strip", z.ZodTypeAny, {
        kind: "abilityBoost";
        mode: {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        } | {
            value: number;
            type: "any";
            count: number;
        };
    }, {
        kind: "abilityBoost";
        mode: {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        } | {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        } | {
            type: "any";
            count: number;
            value?: number | undefined;
        };
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"abilityFlaw">;
        abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
    }, "strip", z.ZodTypeAny, {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    }, {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"addModifier">;
        target: z.ZodString;
        modifierType: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
        value: z.ZodNumber;
        label: z.ZodString;
        stacking: z.ZodDefault<z.ZodEnum<["max", "stack"]>>;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking: "max" | "stack";
    }, {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking?: "max" | "stack" | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantTrait">;
        traitId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantTrait";
        traitId: string;
    }, {
        kind: "grantTrait";
        traitId: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantLanguage">;
        languageId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantLanguage";
        languageId: string;
    }, {
        kind: "grantLanguage";
        languageId: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSense">;
        senseId: z.ZodString;
        range: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    }, {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantChoice">;
        choice: z.ZodObject<{
            id: z.ZodString;
            label: z.ZodString;
            count: z.ZodDefault<z.ZodNumber>;
            scope: z.ZodEnum<["skill", "skillFeat", "classFeat", "generalFeat", "ancestryFeat", "classFeature", "spell", "abilityBoost", "proficiency", "language"]>;
            filter: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
            allowDuplicates: z.ZodDefault<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        }, {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantChoice";
        choice: {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        };
    }, {
        kind: "grantChoice";
        choice: {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        };
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"addSpeed">;
        speedType: z.ZodEnum<["land", "burrow", "climb", "fly", "swim"]>;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    }, {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSpell">;
        spellId: z.ZodString;
        tradition: z.ZodOptional<z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>>;
        rank: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    }, {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSpellSlot">;
        rank: z.ZodNumber;
        count: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    }, {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"modifyResource">;
        resource: z.ZodEnum<["focusPoints", "hitPoints", "resolve", "classDc", "heroPoints"]>;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    }, {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantFlag">;
        flag: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantFlag";
        flag: string;
    }, {
        kind: "grantFlag";
        flag: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"removeFlag">;
        flag: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "removeFlag";
        flag: string;
    }, {
        kind: "removeFlag";
        flag: string;
    }>]>, "many">>;
} & {
    type: z.ZodLiteral<"condition">;
    levels: z.ZodDefault<z.ZodArray<z.ZodNumber, "many">>;
}, "strip", z.ZodTypeAny, {
    id: string;
    type: "condition";
    name: string;
    source: {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    };
    rarity: "common" | "uncommon" | "rare" | "unique";
    traits: string[];
    tags: string[];
    effects: ({
        kind: "grantFeat";
        featId: string;
        required: boolean;
        level?: number | undefined;
    } | {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "abilityBoost";
        mode: {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        } | {
            value: number;
            type: "any";
            count: number;
        };
    } | {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    } | {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking: "max" | "stack";
    } | {
        kind: "grantTrait";
        traitId: string;
    } | {
        kind: "grantLanguage";
        languageId: string;
    } | {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    } | {
        kind: "grantChoice";
        choice: {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        };
    } | {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    } | {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    } | {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    } | {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    } | {
        kind: "grantFlag";
        flag: string;
    } | {
        kind: "removeFlag";
        flag: string;
    })[];
    levels: number[];
    slug?: string | undefined;
    summary?: string | undefined;
    description?: string | undefined;
    version?: {
        major: number;
        minor: number;
        patch: number;
    } | undefined;
    prerequisites?: any;
}, {
    id: string;
    type: "condition";
    name: string;
    source: {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    };
    slug?: string | undefined;
    summary?: string | undefined;
    description?: string | undefined;
    version?: {
        major?: number | undefined;
        minor?: number | undefined;
        patch?: number | undefined;
    } | undefined;
    rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
    traits?: string[] | undefined;
    tags?: string[] | undefined;
    prerequisites?: any;
    effects?: ({
        kind: "grantFeat";
        featId: string;
        level?: number | undefined;
        required?: boolean | undefined;
    } | {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "abilityBoost";
        mode: {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        } | {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        } | {
            type: "any";
            count: number;
            value?: number | undefined;
        };
    } | {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    } | {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking?: "max" | "stack" | undefined;
    } | {
        kind: "grantTrait";
        traitId: string;
    } | {
        kind: "grantLanguage";
        languageId: string;
    } | {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    } | {
        kind: "grantChoice";
        choice: {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        };
    } | {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    } | {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    } | {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    } | {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    } | {
        kind: "grantFlag";
        flag: string;
    } | {
        kind: "removeFlag";
        flag: string;
    })[] | undefined;
    levels?: number[] | undefined;
}>;
export type Condition = z.infer<typeof conditionSchema>;
export declare const rulesEntrySchema: z.ZodObject<{
    id: z.ZodString;
    slug: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
    summary: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
    source: z.ZodObject<{
        id: z.ZodString;
        page: z.ZodOptional<z.ZodNumber>;
        license: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    }, {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    }>;
    version: z.ZodOptional<z.ZodObject<{
        major: z.ZodDefault<z.ZodNumber>;
        minor: z.ZodDefault<z.ZodNumber>;
        patch: z.ZodDefault<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        major: number;
        minor: number;
        patch: number;
    }, {
        major?: number | undefined;
        minor?: number | undefined;
        patch?: number | undefined;
    }>>;
    rarity: z.ZodDefault<z.ZodEnum<["common", "uncommon", "rare", "unique"]>>;
    traits: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    prerequisites: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
    effects: z.ZodDefault<z.ZodArray<z.ZodDiscriminatedUnion<"kind", [z.ZodObject<{
        kind: z.ZodLiteral<"grantFeat">;
        featId: z.ZodString;
        level: z.ZodOptional<z.ZodNumber>;
        required: z.ZodDefault<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantFeat";
        featId: string;
        required: boolean;
        level?: number | undefined;
    }, {
        kind: "grantFeat";
        featId: string;
        level?: number | undefined;
        required?: boolean | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantProficiency">;
        target: z.ZodString;
        rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }, {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"setProficiency">;
        target: z.ZodString;
        rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
    }, "strip", z.ZodTypeAny, {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }, {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"abilityBoost">;
        mode: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"fixed">;
            abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        }, {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"choice">;
            count: z.ZodNumber;
            options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        }, {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"any">;
            count: z.ZodNumber;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "any";
            count: number;
        }, {
            type: "any";
            count: number;
            value?: number | undefined;
        }>]>;
    }, "strip", z.ZodTypeAny, {
        kind: "abilityBoost";
        mode: {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        } | {
            value: number;
            type: "any";
            count: number;
        };
    }, {
        kind: "abilityBoost";
        mode: {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        } | {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        } | {
            type: "any";
            count: number;
            value?: number | undefined;
        };
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"abilityFlaw">;
        abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
    }, "strip", z.ZodTypeAny, {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    }, {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"addModifier">;
        target: z.ZodString;
        modifierType: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
        value: z.ZodNumber;
        label: z.ZodString;
        stacking: z.ZodDefault<z.ZodEnum<["max", "stack"]>>;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking: "max" | "stack";
    }, {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking?: "max" | "stack" | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantTrait">;
        traitId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantTrait";
        traitId: string;
    }, {
        kind: "grantTrait";
        traitId: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantLanguage">;
        languageId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantLanguage";
        languageId: string;
    }, {
        kind: "grantLanguage";
        languageId: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSense">;
        senseId: z.ZodString;
        range: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    }, {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantChoice">;
        choice: z.ZodObject<{
            id: z.ZodString;
            label: z.ZodString;
            count: z.ZodDefault<z.ZodNumber>;
            scope: z.ZodEnum<["skill", "skillFeat", "classFeat", "generalFeat", "ancestryFeat", "classFeature", "spell", "abilityBoost", "proficiency", "language"]>;
            filter: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
            allowDuplicates: z.ZodDefault<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        }, {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantChoice";
        choice: {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        };
    }, {
        kind: "grantChoice";
        choice: {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        };
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"addSpeed">;
        speedType: z.ZodEnum<["land", "burrow", "climb", "fly", "swim"]>;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    }, {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSpell">;
        spellId: z.ZodString;
        tradition: z.ZodOptional<z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>>;
        rank: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    }, {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSpellSlot">;
        rank: z.ZodNumber;
        count: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    }, {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"modifyResource">;
        resource: z.ZodEnum<["focusPoints", "hitPoints", "resolve", "classDc", "heroPoints"]>;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    }, {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantFlag">;
        flag: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantFlag";
        flag: string;
    }, {
        kind: "grantFlag";
        flag: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"removeFlag">;
        flag: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "removeFlag";
        flag: string;
    }, {
        kind: "removeFlag";
        flag: string;
    }>]>, "many">>;
} & {
    type: z.ZodLiteral<"rule">;
    category: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    type: "rule";
    name: string;
    source: {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    };
    rarity: "common" | "uncommon" | "rare" | "unique";
    traits: string[];
    tags: string[];
    effects: ({
        kind: "grantFeat";
        featId: string;
        required: boolean;
        level?: number | undefined;
    } | {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "abilityBoost";
        mode: {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        } | {
            value: number;
            type: "any";
            count: number;
        };
    } | {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    } | {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking: "max" | "stack";
    } | {
        kind: "grantTrait";
        traitId: string;
    } | {
        kind: "grantLanguage";
        languageId: string;
    } | {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    } | {
        kind: "grantChoice";
        choice: {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        };
    } | {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    } | {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    } | {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    } | {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    } | {
        kind: "grantFlag";
        flag: string;
    } | {
        kind: "removeFlag";
        flag: string;
    })[];
    category: string;
    slug?: string | undefined;
    summary?: string | undefined;
    description?: string | undefined;
    version?: {
        major: number;
        minor: number;
        patch: number;
    } | undefined;
    prerequisites?: any;
}, {
    id: string;
    type: "rule";
    name: string;
    source: {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    };
    category: string;
    slug?: string | undefined;
    summary?: string | undefined;
    description?: string | undefined;
    version?: {
        major?: number | undefined;
        minor?: number | undefined;
        patch?: number | undefined;
    } | undefined;
    rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
    traits?: string[] | undefined;
    tags?: string[] | undefined;
    prerequisites?: any;
    effects?: ({
        kind: "grantFeat";
        featId: string;
        level?: number | undefined;
        required?: boolean | undefined;
    } | {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "abilityBoost";
        mode: {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        } | {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        } | {
            type: "any";
            count: number;
            value?: number | undefined;
        };
    } | {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    } | {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking?: "max" | "stack" | undefined;
    } | {
        kind: "grantTrait";
        traitId: string;
    } | {
        kind: "grantLanguage";
        languageId: string;
    } | {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    } | {
        kind: "grantChoice";
        choice: {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        };
    } | {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    } | {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    } | {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    } | {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    } | {
        kind: "grantFlag";
        flag: string;
    } | {
        kind: "removeFlag";
        flag: string;
    })[] | undefined;
}>;
export type RuleEntry = z.infer<typeof rulesEntrySchema>;
export declare const contentEntitySchema: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    id: z.ZodString;
    slug: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
    summary: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
    source: z.ZodObject<{
        id: z.ZodString;
        page: z.ZodOptional<z.ZodNumber>;
        license: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    }, {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    }>;
    version: z.ZodOptional<z.ZodObject<{
        major: z.ZodDefault<z.ZodNumber>;
        minor: z.ZodDefault<z.ZodNumber>;
        patch: z.ZodDefault<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        major: number;
        minor: number;
        patch: number;
    }, {
        major?: number | undefined;
        minor?: number | undefined;
        patch?: number | undefined;
    }>>;
    rarity: z.ZodDefault<z.ZodEnum<["common", "uncommon", "rare", "unique"]>>;
    traits: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    prerequisites: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
    effects: z.ZodDefault<z.ZodArray<z.ZodDiscriminatedUnion<"kind", [z.ZodObject<{
        kind: z.ZodLiteral<"grantFeat">;
        featId: z.ZodString;
        level: z.ZodOptional<z.ZodNumber>;
        required: z.ZodDefault<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantFeat";
        featId: string;
        required: boolean;
        level?: number | undefined;
    }, {
        kind: "grantFeat";
        featId: string;
        level?: number | undefined;
        required?: boolean | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantProficiency">;
        target: z.ZodString;
        rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }, {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"setProficiency">;
        target: z.ZodString;
        rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
    }, "strip", z.ZodTypeAny, {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }, {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"abilityBoost">;
        mode: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"fixed">;
            abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        }, {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"choice">;
            count: z.ZodNumber;
            options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        }, {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"any">;
            count: z.ZodNumber;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "any";
            count: number;
        }, {
            type: "any";
            count: number;
            value?: number | undefined;
        }>]>;
    }, "strip", z.ZodTypeAny, {
        kind: "abilityBoost";
        mode: {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        } | {
            value: number;
            type: "any";
            count: number;
        };
    }, {
        kind: "abilityBoost";
        mode: {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        } | {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        } | {
            type: "any";
            count: number;
            value?: number | undefined;
        };
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"abilityFlaw">;
        abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
    }, "strip", z.ZodTypeAny, {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    }, {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"addModifier">;
        target: z.ZodString;
        modifierType: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
        value: z.ZodNumber;
        label: z.ZodString;
        stacking: z.ZodDefault<z.ZodEnum<["max", "stack"]>>;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking: "max" | "stack";
    }, {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking?: "max" | "stack" | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantTrait">;
        traitId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantTrait";
        traitId: string;
    }, {
        kind: "grantTrait";
        traitId: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantLanguage">;
        languageId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantLanguage";
        languageId: string;
    }, {
        kind: "grantLanguage";
        languageId: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSense">;
        senseId: z.ZodString;
        range: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    }, {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantChoice">;
        choice: z.ZodObject<{
            id: z.ZodString;
            label: z.ZodString;
            count: z.ZodDefault<z.ZodNumber>;
            scope: z.ZodEnum<["skill", "skillFeat", "classFeat", "generalFeat", "ancestryFeat", "classFeature", "spell", "abilityBoost", "proficiency", "language"]>;
            filter: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
            allowDuplicates: z.ZodDefault<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        }, {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantChoice";
        choice: {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        };
    }, {
        kind: "grantChoice";
        choice: {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        };
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"addSpeed">;
        speedType: z.ZodEnum<["land", "burrow", "climb", "fly", "swim"]>;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    }, {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSpell">;
        spellId: z.ZodString;
        tradition: z.ZodOptional<z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>>;
        rank: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    }, {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSpellSlot">;
        rank: z.ZodNumber;
        count: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    }, {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"modifyResource">;
        resource: z.ZodEnum<["focusPoints", "hitPoints", "resolve", "classDc", "heroPoints"]>;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    }, {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantFlag">;
        flag: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantFlag";
        flag: string;
    }, {
        kind: "grantFlag";
        flag: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"removeFlag">;
        flag: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "removeFlag";
        flag: string;
    }, {
        kind: "removeFlag";
        flag: string;
    }>]>, "many">>;
} & {
    type: z.ZodLiteral<"ancestry">;
    hitPoints: z.ZodNumber;
    size: z.ZodEnum<["tiny", "small", "medium", "large", "huge", "gargantuan"]>;
    speed: z.ZodNumber;
    boosts: z.ZodDefault<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"fixed">;
        abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
        value: z.ZodDefault<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        value: number;
        type: "fixed";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    }, {
        type: "fixed";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        value?: number | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"choice">;
        count: z.ZodNumber;
        options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
        value: z.ZodDefault<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        value: number;
        options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        type: "choice";
        count: number;
    }, {
        options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        type: "choice";
        count: number;
        value?: number | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"any">;
        count: z.ZodNumber;
        value: z.ZodDefault<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        value: number;
        type: "any";
        count: number;
    }, {
        type: "any";
        count: number;
        value?: number | undefined;
    }>]>, "many">>;
    flaws: z.ZodDefault<z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">>;
    languages: z.ZodDefault<z.ZodObject<{
        granted: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        choices: z.ZodDefault<z.ZodObject<{
            count: z.ZodDefault<z.ZodNumber>;
            options: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            options: string[];
            count: number;
        }, {
            options?: string[] | undefined;
            count?: number | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        granted: string[];
        choices: {
            options: string[];
            count: number;
        };
    }, {
        granted?: string[] | undefined;
        choices?: {
            options?: string[] | undefined;
            count?: number | undefined;
        } | undefined;
    }>>;
    features: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    id: string;
    type: "ancestry";
    hitPoints: number;
    name: string;
    source: {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    };
    rarity: "common" | "uncommon" | "rare" | "unique";
    traits: string[];
    tags: string[];
    effects: ({
        kind: "grantFeat";
        featId: string;
        required: boolean;
        level?: number | undefined;
    } | {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "abilityBoost";
        mode: {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        } | {
            value: number;
            type: "any";
            count: number;
        };
    } | {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    } | {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking: "max" | "stack";
    } | {
        kind: "grantTrait";
        traitId: string;
    } | {
        kind: "grantLanguage";
        languageId: string;
    } | {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    } | {
        kind: "grantChoice";
        choice: {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        };
    } | {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    } | {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    } | {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    } | {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    } | {
        kind: "grantFlag";
        flag: string;
    } | {
        kind: "removeFlag";
        flag: string;
    })[];
    size: "tiny" | "small" | "medium" | "large" | "huge" | "gargantuan";
    speed: number;
    boosts: ({
        value: number;
        type: "fixed";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    } | {
        value: number;
        options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        type: "choice";
        count: number;
    } | {
        value: number;
        type: "any";
        count: number;
    })[];
    flaws: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    languages: {
        granted: string[];
        choices: {
            options: string[];
            count: number;
        };
    };
    features: string[];
    slug?: string | undefined;
    summary?: string | undefined;
    description?: string | undefined;
    version?: {
        major: number;
        minor: number;
        patch: number;
    } | undefined;
    prerequisites?: any;
}, {
    id: string;
    type: "ancestry";
    hitPoints: number;
    name: string;
    source: {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    };
    size: "tiny" | "small" | "medium" | "large" | "huge" | "gargantuan";
    speed: number;
    slug?: string | undefined;
    summary?: string | undefined;
    description?: string | undefined;
    version?: {
        major?: number | undefined;
        minor?: number | undefined;
        patch?: number | undefined;
    } | undefined;
    rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
    traits?: string[] | undefined;
    tags?: string[] | undefined;
    prerequisites?: any;
    effects?: ({
        kind: "grantFeat";
        featId: string;
        level?: number | undefined;
        required?: boolean | undefined;
    } | {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "abilityBoost";
        mode: {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        } | {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        } | {
            type: "any";
            count: number;
            value?: number | undefined;
        };
    } | {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    } | {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking?: "max" | "stack" | undefined;
    } | {
        kind: "grantTrait";
        traitId: string;
    } | {
        kind: "grantLanguage";
        languageId: string;
    } | {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    } | {
        kind: "grantChoice";
        choice: {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        };
    } | {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    } | {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    } | {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    } | {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    } | {
        kind: "grantFlag";
        flag: string;
    } | {
        kind: "removeFlag";
        flag: string;
    })[] | undefined;
    boosts?: ({
        type: "fixed";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        value?: number | undefined;
    } | {
        options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        type: "choice";
        count: number;
        value?: number | undefined;
    } | {
        type: "any";
        count: number;
        value?: number | undefined;
    })[] | undefined;
    flaws?: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[] | undefined;
    languages?: {
        granted?: string[] | undefined;
        choices?: {
            options?: string[] | undefined;
            count?: number | undefined;
        } | undefined;
    } | undefined;
    features?: string[] | undefined;
}>, z.ZodObject<{
    id: z.ZodString;
    slug: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
    summary: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
    source: z.ZodObject<{
        id: z.ZodString;
        page: z.ZodOptional<z.ZodNumber>;
        license: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    }, {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    }>;
    version: z.ZodOptional<z.ZodObject<{
        major: z.ZodDefault<z.ZodNumber>;
        minor: z.ZodDefault<z.ZodNumber>;
        patch: z.ZodDefault<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        major: number;
        minor: number;
        patch: number;
    }, {
        major?: number | undefined;
        minor?: number | undefined;
        patch?: number | undefined;
    }>>;
    rarity: z.ZodDefault<z.ZodEnum<["common", "uncommon", "rare", "unique"]>>;
    traits: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    prerequisites: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
    effects: z.ZodDefault<z.ZodArray<z.ZodDiscriminatedUnion<"kind", [z.ZodObject<{
        kind: z.ZodLiteral<"grantFeat">;
        featId: z.ZodString;
        level: z.ZodOptional<z.ZodNumber>;
        required: z.ZodDefault<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantFeat";
        featId: string;
        required: boolean;
        level?: number | undefined;
    }, {
        kind: "grantFeat";
        featId: string;
        level?: number | undefined;
        required?: boolean | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantProficiency">;
        target: z.ZodString;
        rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }, {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"setProficiency">;
        target: z.ZodString;
        rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
    }, "strip", z.ZodTypeAny, {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }, {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"abilityBoost">;
        mode: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"fixed">;
            abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        }, {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"choice">;
            count: z.ZodNumber;
            options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        }, {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"any">;
            count: z.ZodNumber;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "any";
            count: number;
        }, {
            type: "any";
            count: number;
            value?: number | undefined;
        }>]>;
    }, "strip", z.ZodTypeAny, {
        kind: "abilityBoost";
        mode: {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        } | {
            value: number;
            type: "any";
            count: number;
        };
    }, {
        kind: "abilityBoost";
        mode: {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        } | {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        } | {
            type: "any";
            count: number;
            value?: number | undefined;
        };
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"abilityFlaw">;
        abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
    }, "strip", z.ZodTypeAny, {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    }, {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"addModifier">;
        target: z.ZodString;
        modifierType: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
        value: z.ZodNumber;
        label: z.ZodString;
        stacking: z.ZodDefault<z.ZodEnum<["max", "stack"]>>;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking: "max" | "stack";
    }, {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking?: "max" | "stack" | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantTrait">;
        traitId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantTrait";
        traitId: string;
    }, {
        kind: "grantTrait";
        traitId: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantLanguage">;
        languageId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantLanguage";
        languageId: string;
    }, {
        kind: "grantLanguage";
        languageId: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSense">;
        senseId: z.ZodString;
        range: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    }, {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantChoice">;
        choice: z.ZodObject<{
            id: z.ZodString;
            label: z.ZodString;
            count: z.ZodDefault<z.ZodNumber>;
            scope: z.ZodEnum<["skill", "skillFeat", "classFeat", "generalFeat", "ancestryFeat", "classFeature", "spell", "abilityBoost", "proficiency", "language"]>;
            filter: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
            allowDuplicates: z.ZodDefault<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        }, {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantChoice";
        choice: {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        };
    }, {
        kind: "grantChoice";
        choice: {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        };
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"addSpeed">;
        speedType: z.ZodEnum<["land", "burrow", "climb", "fly", "swim"]>;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    }, {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSpell">;
        spellId: z.ZodString;
        tradition: z.ZodOptional<z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>>;
        rank: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    }, {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSpellSlot">;
        rank: z.ZodNumber;
        count: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    }, {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"modifyResource">;
        resource: z.ZodEnum<["focusPoints", "hitPoints", "resolve", "classDc", "heroPoints"]>;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    }, {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantFlag">;
        flag: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantFlag";
        flag: string;
    }, {
        kind: "grantFlag";
        flag: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"removeFlag">;
        flag: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "removeFlag";
        flag: string;
    }, {
        kind: "removeFlag";
        flag: string;
    }>]>, "many">>;
} & {
    type: z.ZodLiteral<"heritage">;
    ancestryId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    type: "heritage";
    name: string;
    source: {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    };
    rarity: "common" | "uncommon" | "rare" | "unique";
    traits: string[];
    tags: string[];
    effects: ({
        kind: "grantFeat";
        featId: string;
        required: boolean;
        level?: number | undefined;
    } | {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "abilityBoost";
        mode: {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        } | {
            value: number;
            type: "any";
            count: number;
        };
    } | {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    } | {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking: "max" | "stack";
    } | {
        kind: "grantTrait";
        traitId: string;
    } | {
        kind: "grantLanguage";
        languageId: string;
    } | {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    } | {
        kind: "grantChoice";
        choice: {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        };
    } | {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    } | {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    } | {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    } | {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    } | {
        kind: "grantFlag";
        flag: string;
    } | {
        kind: "removeFlag";
        flag: string;
    })[];
    ancestryId: string;
    slug?: string | undefined;
    summary?: string | undefined;
    description?: string | undefined;
    version?: {
        major: number;
        minor: number;
        patch: number;
    } | undefined;
    prerequisites?: any;
}, {
    id: string;
    type: "heritage";
    name: string;
    source: {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    };
    ancestryId: string;
    slug?: string | undefined;
    summary?: string | undefined;
    description?: string | undefined;
    version?: {
        major?: number | undefined;
        minor?: number | undefined;
        patch?: number | undefined;
    } | undefined;
    rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
    traits?: string[] | undefined;
    tags?: string[] | undefined;
    prerequisites?: any;
    effects?: ({
        kind: "grantFeat";
        featId: string;
        level?: number | undefined;
        required?: boolean | undefined;
    } | {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "abilityBoost";
        mode: {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        } | {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        } | {
            type: "any";
            count: number;
            value?: number | undefined;
        };
    } | {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    } | {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking?: "max" | "stack" | undefined;
    } | {
        kind: "grantTrait";
        traitId: string;
    } | {
        kind: "grantLanguage";
        languageId: string;
    } | {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    } | {
        kind: "grantChoice";
        choice: {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        };
    } | {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    } | {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    } | {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    } | {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    } | {
        kind: "grantFlag";
        flag: string;
    } | {
        kind: "removeFlag";
        flag: string;
    })[] | undefined;
}>, z.ZodObject<{
    id: z.ZodString;
    slug: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
    summary: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
    source: z.ZodObject<{
        id: z.ZodString;
        page: z.ZodOptional<z.ZodNumber>;
        license: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    }, {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    }>;
    version: z.ZodOptional<z.ZodObject<{
        major: z.ZodDefault<z.ZodNumber>;
        minor: z.ZodDefault<z.ZodNumber>;
        patch: z.ZodDefault<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        major: number;
        minor: number;
        patch: number;
    }, {
        major?: number | undefined;
        minor?: number | undefined;
        patch?: number | undefined;
    }>>;
    rarity: z.ZodDefault<z.ZodEnum<["common", "uncommon", "rare", "unique"]>>;
    traits: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    prerequisites: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
    effects: z.ZodDefault<z.ZodArray<z.ZodDiscriminatedUnion<"kind", [z.ZodObject<{
        kind: z.ZodLiteral<"grantFeat">;
        featId: z.ZodString;
        level: z.ZodOptional<z.ZodNumber>;
        required: z.ZodDefault<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantFeat";
        featId: string;
        required: boolean;
        level?: number | undefined;
    }, {
        kind: "grantFeat";
        featId: string;
        level?: number | undefined;
        required?: boolean | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantProficiency">;
        target: z.ZodString;
        rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }, {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"setProficiency">;
        target: z.ZodString;
        rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
    }, "strip", z.ZodTypeAny, {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }, {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"abilityBoost">;
        mode: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"fixed">;
            abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        }, {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"choice">;
            count: z.ZodNumber;
            options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        }, {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"any">;
            count: z.ZodNumber;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "any";
            count: number;
        }, {
            type: "any";
            count: number;
            value?: number | undefined;
        }>]>;
    }, "strip", z.ZodTypeAny, {
        kind: "abilityBoost";
        mode: {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        } | {
            value: number;
            type: "any";
            count: number;
        };
    }, {
        kind: "abilityBoost";
        mode: {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        } | {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        } | {
            type: "any";
            count: number;
            value?: number | undefined;
        };
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"abilityFlaw">;
        abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
    }, "strip", z.ZodTypeAny, {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    }, {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"addModifier">;
        target: z.ZodString;
        modifierType: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
        value: z.ZodNumber;
        label: z.ZodString;
        stacking: z.ZodDefault<z.ZodEnum<["max", "stack"]>>;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking: "max" | "stack";
    }, {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking?: "max" | "stack" | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantTrait">;
        traitId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantTrait";
        traitId: string;
    }, {
        kind: "grantTrait";
        traitId: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantLanguage">;
        languageId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantLanguage";
        languageId: string;
    }, {
        kind: "grantLanguage";
        languageId: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSense">;
        senseId: z.ZodString;
        range: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    }, {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantChoice">;
        choice: z.ZodObject<{
            id: z.ZodString;
            label: z.ZodString;
            count: z.ZodDefault<z.ZodNumber>;
            scope: z.ZodEnum<["skill", "skillFeat", "classFeat", "generalFeat", "ancestryFeat", "classFeature", "spell", "abilityBoost", "proficiency", "language"]>;
            filter: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
            allowDuplicates: z.ZodDefault<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        }, {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantChoice";
        choice: {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        };
    }, {
        kind: "grantChoice";
        choice: {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        };
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"addSpeed">;
        speedType: z.ZodEnum<["land", "burrow", "climb", "fly", "swim"]>;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    }, {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSpell">;
        spellId: z.ZodString;
        tradition: z.ZodOptional<z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>>;
        rank: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    }, {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSpellSlot">;
        rank: z.ZodNumber;
        count: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    }, {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"modifyResource">;
        resource: z.ZodEnum<["focusPoints", "hitPoints", "resolve", "classDc", "heroPoints"]>;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    }, {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantFlag">;
        flag: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantFlag";
        flag: string;
    }, {
        kind: "grantFlag";
        flag: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"removeFlag">;
        flag: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "removeFlag";
        flag: string;
    }, {
        kind: "removeFlag";
        flag: string;
    }>]>, "many">>;
} & {
    type: z.ZodLiteral<"background">;
    boosts: z.ZodDefault<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"fixed">;
        abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
        value: z.ZodDefault<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        value: number;
        type: "fixed";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    }, {
        type: "fixed";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        value?: number | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"choice">;
        count: z.ZodNumber;
        options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
        value: z.ZodDefault<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        value: number;
        options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        type: "choice";
        count: number;
    }, {
        options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        type: "choice";
        count: number;
        value?: number | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"any">;
        count: z.ZodNumber;
        value: z.ZodDefault<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        value: number;
        type: "any";
        count: number;
    }, {
        type: "any";
        count: number;
        value?: number | undefined;
    }>]>, "many">>;
    skillTraining: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    feat: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    id: string;
    type: "background";
    name: string;
    source: {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    };
    rarity: "common" | "uncommon" | "rare" | "unique";
    traits: string[];
    tags: string[];
    effects: ({
        kind: "grantFeat";
        featId: string;
        required: boolean;
        level?: number | undefined;
    } | {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "abilityBoost";
        mode: {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        } | {
            value: number;
            type: "any";
            count: number;
        };
    } | {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    } | {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking: "max" | "stack";
    } | {
        kind: "grantTrait";
        traitId: string;
    } | {
        kind: "grantLanguage";
        languageId: string;
    } | {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    } | {
        kind: "grantChoice";
        choice: {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        };
    } | {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    } | {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    } | {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    } | {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    } | {
        kind: "grantFlag";
        flag: string;
    } | {
        kind: "removeFlag";
        flag: string;
    })[];
    boosts: ({
        value: number;
        type: "fixed";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    } | {
        value: number;
        options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        type: "choice";
        count: number;
    } | {
        value: number;
        type: "any";
        count: number;
    })[];
    skillTraining: string[];
    slug?: string | undefined;
    summary?: string | undefined;
    description?: string | undefined;
    version?: {
        major: number;
        minor: number;
        patch: number;
    } | undefined;
    prerequisites?: any;
    feat?: string | undefined;
}, {
    id: string;
    type: "background";
    name: string;
    source: {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    };
    slug?: string | undefined;
    summary?: string | undefined;
    description?: string | undefined;
    version?: {
        major?: number | undefined;
        minor?: number | undefined;
        patch?: number | undefined;
    } | undefined;
    rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
    traits?: string[] | undefined;
    tags?: string[] | undefined;
    prerequisites?: any;
    effects?: ({
        kind: "grantFeat";
        featId: string;
        level?: number | undefined;
        required?: boolean | undefined;
    } | {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "abilityBoost";
        mode: {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        } | {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        } | {
            type: "any";
            count: number;
            value?: number | undefined;
        };
    } | {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    } | {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking?: "max" | "stack" | undefined;
    } | {
        kind: "grantTrait";
        traitId: string;
    } | {
        kind: "grantLanguage";
        languageId: string;
    } | {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    } | {
        kind: "grantChoice";
        choice: {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        };
    } | {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    } | {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    } | {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    } | {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    } | {
        kind: "grantFlag";
        flag: string;
    } | {
        kind: "removeFlag";
        flag: string;
    })[] | undefined;
    boosts?: ({
        type: "fixed";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        value?: number | undefined;
    } | {
        options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        type: "choice";
        count: number;
        value?: number | undefined;
    } | {
        type: "any";
        count: number;
        value?: number | undefined;
    })[] | undefined;
    skillTraining?: string[] | undefined;
    feat?: string | undefined;
}>, z.ZodObject<{
    id: z.ZodString;
    slug: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
    summary: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
    source: z.ZodObject<{
        id: z.ZodString;
        page: z.ZodOptional<z.ZodNumber>;
        license: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    }, {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    }>;
    version: z.ZodOptional<z.ZodObject<{
        major: z.ZodDefault<z.ZodNumber>;
        minor: z.ZodDefault<z.ZodNumber>;
        patch: z.ZodDefault<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        major: number;
        minor: number;
        patch: number;
    }, {
        major?: number | undefined;
        minor?: number | undefined;
        patch?: number | undefined;
    }>>;
    rarity: z.ZodDefault<z.ZodEnum<["common", "uncommon", "rare", "unique"]>>;
    traits: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    prerequisites: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
    effects: z.ZodDefault<z.ZodArray<z.ZodDiscriminatedUnion<"kind", [z.ZodObject<{
        kind: z.ZodLiteral<"grantFeat">;
        featId: z.ZodString;
        level: z.ZodOptional<z.ZodNumber>;
        required: z.ZodDefault<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantFeat";
        featId: string;
        required: boolean;
        level?: number | undefined;
    }, {
        kind: "grantFeat";
        featId: string;
        level?: number | undefined;
        required?: boolean | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantProficiency">;
        target: z.ZodString;
        rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }, {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"setProficiency">;
        target: z.ZodString;
        rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
    }, "strip", z.ZodTypeAny, {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }, {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"abilityBoost">;
        mode: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"fixed">;
            abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        }, {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"choice">;
            count: z.ZodNumber;
            options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        }, {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"any">;
            count: z.ZodNumber;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "any";
            count: number;
        }, {
            type: "any";
            count: number;
            value?: number | undefined;
        }>]>;
    }, "strip", z.ZodTypeAny, {
        kind: "abilityBoost";
        mode: {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        } | {
            value: number;
            type: "any";
            count: number;
        };
    }, {
        kind: "abilityBoost";
        mode: {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        } | {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        } | {
            type: "any";
            count: number;
            value?: number | undefined;
        };
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"abilityFlaw">;
        abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
    }, "strip", z.ZodTypeAny, {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    }, {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"addModifier">;
        target: z.ZodString;
        modifierType: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
        value: z.ZodNumber;
        label: z.ZodString;
        stacking: z.ZodDefault<z.ZodEnum<["max", "stack"]>>;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking: "max" | "stack";
    }, {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking?: "max" | "stack" | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantTrait">;
        traitId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantTrait";
        traitId: string;
    }, {
        kind: "grantTrait";
        traitId: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantLanguage">;
        languageId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantLanguage";
        languageId: string;
    }, {
        kind: "grantLanguage";
        languageId: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSense">;
        senseId: z.ZodString;
        range: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    }, {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantChoice">;
        choice: z.ZodObject<{
            id: z.ZodString;
            label: z.ZodString;
            count: z.ZodDefault<z.ZodNumber>;
            scope: z.ZodEnum<["skill", "skillFeat", "classFeat", "generalFeat", "ancestryFeat", "classFeature", "spell", "abilityBoost", "proficiency", "language"]>;
            filter: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
            allowDuplicates: z.ZodDefault<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        }, {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantChoice";
        choice: {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        };
    }, {
        kind: "grantChoice";
        choice: {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        };
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"addSpeed">;
        speedType: z.ZodEnum<["land", "burrow", "climb", "fly", "swim"]>;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    }, {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSpell">;
        spellId: z.ZodString;
        tradition: z.ZodOptional<z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>>;
        rank: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    }, {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSpellSlot">;
        rank: z.ZodNumber;
        count: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    }, {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"modifyResource">;
        resource: z.ZodEnum<["focusPoints", "hitPoints", "resolve", "classDc", "heroPoints"]>;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    }, {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantFlag">;
        flag: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantFlag";
        flag: string;
    }, {
        kind: "grantFlag";
        flag: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"removeFlag">;
        flag: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "removeFlag";
        flag: string;
    }, {
        kind: "removeFlag";
        flag: string;
    }>]>, "many">>;
} & {
    type: z.ZodLiteral<"class">;
    keyAbility: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
    hitPointsPerLevel: z.ZodNumber;
    proficiencies: z.ZodObject<{
        perception: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
        savingThrows: z.ZodObject<{
            fortitude: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
            reflex: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
            will: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
        }, "strip", z.ZodTypeAny, {
            fortitude: "untrained" | "trained" | "expert" | "master" | "legendary";
            reflex: "untrained" | "trained" | "expert" | "master" | "legendary";
            will: "untrained" | "trained" | "expert" | "master" | "legendary";
        }, {
            fortitude: "untrained" | "trained" | "expert" | "master" | "legendary";
            reflex: "untrained" | "trained" | "expert" | "master" | "legendary";
            will: "untrained" | "trained" | "expert" | "master" | "legendary";
        }>;
        skills: z.ZodObject<{
            trained: z.ZodDefault<z.ZodNumber>;
            additionalChoices: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            trained: number;
            additionalChoices: string[];
        }, {
            trained?: number | undefined;
            additionalChoices?: string[] | undefined;
        }>;
        attacks: z.ZodDefault<z.ZodObject<{
            simple: z.ZodOptional<z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
            martial: z.ZodOptional<z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
            advanced: z.ZodOptional<z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
            unarmed: z.ZodOptional<z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
        }, "strip", z.ZodTypeAny, {
            simple?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            martial?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            advanced?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            unarmed?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        }, {
            simple?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            martial?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            advanced?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            unarmed?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        }>>;
        defense: z.ZodDefault<z.ZodObject<{
            unarmored: z.ZodOptional<z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
            light: z.ZodOptional<z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
            medium: z.ZodOptional<z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
            heavy: z.ZodOptional<z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
            shields: z.ZodOptional<z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
        }, "strip", z.ZodTypeAny, {
            medium?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            unarmored?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            light?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            heavy?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            shields?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        }, {
            medium?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            unarmored?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            light?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            heavy?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            shields?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        }>>;
        classDC: z.ZodOptional<z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
    }, "strip", z.ZodTypeAny, {
        perception: "untrained" | "trained" | "expert" | "master" | "legendary";
        savingThrows: {
            fortitude: "untrained" | "trained" | "expert" | "master" | "legendary";
            reflex: "untrained" | "trained" | "expert" | "master" | "legendary";
            will: "untrained" | "trained" | "expert" | "master" | "legendary";
        };
        skills: {
            trained: number;
            additionalChoices: string[];
        };
        attacks: {
            simple?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            martial?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            advanced?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            unarmed?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        };
        defense: {
            medium?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            unarmored?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            light?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            heavy?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            shields?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        };
        classDC?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
    }, {
        perception: "untrained" | "trained" | "expert" | "master" | "legendary";
        savingThrows: {
            fortitude: "untrained" | "trained" | "expert" | "master" | "legendary";
            reflex: "untrained" | "trained" | "expert" | "master" | "legendary";
            will: "untrained" | "trained" | "expert" | "master" | "legendary";
        };
        skills: {
            trained?: number | undefined;
            additionalChoices?: string[] | undefined;
        };
        attacks?: {
            simple?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            martial?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            advanced?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            unarmed?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        } | undefined;
        defense?: {
            medium?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            unarmored?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            light?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            heavy?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            shields?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        } | undefined;
        classDC?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
    }>;
    progression: z.ZodRecord<z.ZodString, z.ZodObject<{
        grants: z.ZodDefault<z.ZodArray<z.ZodDiscriminatedUnion<"kind", [z.ZodObject<{
            kind: z.ZodLiteral<"grantFeat">;
            featId: z.ZodString;
            level: z.ZodOptional<z.ZodNumber>;
            required: z.ZodDefault<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantFeat";
            featId: string;
            required: boolean;
            level?: number | undefined;
        }, {
            kind: "grantFeat";
            featId: string;
            level?: number | undefined;
            required?: boolean | undefined;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantProficiency">;
            target: z.ZodString;
            rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }, {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"setProficiency">;
            target: z.ZodString;
            rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
        }, "strip", z.ZodTypeAny, {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }, {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"abilityBoost">;
            mode: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"fixed">;
                abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
                value: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            }, {
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"choice">;
                count: z.ZodNumber;
                options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
                value: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            }, {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"any">;
                count: z.ZodNumber;
                value: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "any";
                count: number;
            }, {
                type: "any";
                count: number;
                value?: number | undefined;
            }>]>;
        }, "strip", z.ZodTypeAny, {
            kind: "abilityBoost";
            mode: {
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            } | {
                value: number;
                type: "any";
                count: number;
            };
        }, {
            kind: "abilityBoost";
            mode: {
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            } | {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            } | {
                type: "any";
                count: number;
                value?: number | undefined;
            };
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"abilityFlaw">;
            abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
        }, "strip", z.ZodTypeAny, {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        }, {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"addModifier">;
            target: z.ZodString;
            modifierType: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
            value: z.ZodNumber;
            label: z.ZodString;
            stacking: z.ZodDefault<z.ZodEnum<["max", "stack"]>>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking: "max" | "stack";
        }, {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking?: "max" | "stack" | undefined;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantTrait">;
            traitId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            kind: "grantTrait";
            traitId: string;
        }, {
            kind: "grantTrait";
            traitId: string;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantLanguage">;
            languageId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            kind: "grantLanguage";
            languageId: string;
        }, {
            kind: "grantLanguage";
            languageId: string;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantSense">;
            senseId: z.ZodString;
            range: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        }, {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantChoice">;
            choice: z.ZodObject<{
                id: z.ZodString;
                label: z.ZodString;
                count: z.ZodDefault<z.ZodNumber>;
                scope: z.ZodEnum<["skill", "skillFeat", "classFeat", "generalFeat", "ancestryFeat", "classFeature", "spell", "abilityBoost", "proficiency", "language"]>;
                filter: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
                allowDuplicates: z.ZodDefault<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                count: number;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                allowDuplicates: boolean;
                filter?: any;
            }, {
                id: string;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                filter?: any;
                count?: number | undefined;
                allowDuplicates?: boolean | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantChoice";
            choice: {
                id: string;
                count: number;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                allowDuplicates: boolean;
                filter?: any;
            };
        }, {
            kind: "grantChoice";
            choice: {
                id: string;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                filter?: any;
                count?: number | undefined;
                allowDuplicates?: boolean | undefined;
            };
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"addSpeed">;
            speedType: z.ZodEnum<["land", "burrow", "climb", "fly", "swim"]>;
            value: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        }, {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantSpell">;
            spellId: z.ZodString;
            tradition: z.ZodOptional<z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>>;
            rank: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        }, {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantSpellSlot">;
            rank: z.ZodNumber;
            count: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        }, {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"modifyResource">;
            resource: z.ZodEnum<["focusPoints", "hitPoints", "resolve", "classDc", "heroPoints"]>;
            value: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        }, {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantFlag">;
            flag: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            kind: "grantFlag";
            flag: string;
        }, {
            kind: "grantFlag";
            flag: string;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"removeFlag">;
            flag: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            kind: "removeFlag";
            flag: string;
        }, {
            kind: "removeFlag";
            flag: string;
        }>]>, "many">>;
        choices: z.ZodDefault<z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            label: z.ZodString;
            count: z.ZodDefault<z.ZodNumber>;
            scope: z.ZodEnum<["skill", "skillFeat", "classFeat", "generalFeat", "ancestryFeat", "classFeature", "spell", "abilityBoost", "proficiency", "language"]>;
            filter: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
            allowDuplicates: z.ZodDefault<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        }, {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        }>, "many">>;
        proficiencyBumps: z.ZodDefault<z.ZodArray<z.ZodObject<{
            target: z.ZodString;
            rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
        }, "strip", z.ZodTypeAny, {
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }, {
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }>, "many">>;
        featureRefs: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        choices: {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        }[];
        grants: ({
            kind: "grantFeat";
            featId: string;
            required: boolean;
            level?: number | undefined;
        } | {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "abilityBoost";
            mode: {
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            } | {
                value: number;
                type: "any";
                count: number;
            };
        } | {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking: "max" | "stack";
        } | {
            kind: "grantTrait";
            traitId: string;
        } | {
            kind: "grantLanguage";
            languageId: string;
        } | {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        } | {
            kind: "grantChoice";
            choice: {
                id: string;
                count: number;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                allowDuplicates: boolean;
                filter?: any;
            };
        } | {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        } | {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        } | {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        } | {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        } | {
            kind: "grantFlag";
            flag: string;
        } | {
            kind: "removeFlag";
            flag: string;
        })[];
        proficiencyBumps: {
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }[];
        featureRefs: string[];
    }, {
        choices?: {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        }[] | undefined;
        grants?: ({
            kind: "grantFeat";
            featId: string;
            level?: number | undefined;
            required?: boolean | undefined;
        } | {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "abilityBoost";
            mode: {
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            } | {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            } | {
                type: "any";
                count: number;
                value?: number | undefined;
            };
        } | {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking?: "max" | "stack" | undefined;
        } | {
            kind: "grantTrait";
            traitId: string;
        } | {
            kind: "grantLanguage";
            languageId: string;
        } | {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        } | {
            kind: "grantChoice";
            choice: {
                id: string;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                filter?: any;
                count?: number | undefined;
                allowDuplicates?: boolean | undefined;
            };
        } | {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        } | {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        } | {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        } | {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        } | {
            kind: "grantFlag";
            flag: string;
        } | {
            kind: "removeFlag";
            flag: string;
        })[] | undefined;
        proficiencyBumps?: {
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }[] | undefined;
        featureRefs?: string[] | undefined;
    }>>;
    spellcasting: z.ZodOptional<z.ZodObject<{
        tradition: z.ZodOptional<z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>>;
        type: z.ZodOptional<z.ZodEnum<["prepared", "spontaneous", "focus", "innate"]>>;
    }, "strip", z.ZodTypeAny, {
        type?: "focus" | "prepared" | "spontaneous" | "innate" | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    }, {
        type?: "focus" | "prepared" | "spontaneous" | "innate" | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    id: string;
    type: "class";
    name: string;
    source: {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    };
    rarity: "common" | "uncommon" | "rare" | "unique";
    traits: string[];
    tags: string[];
    effects: ({
        kind: "grantFeat";
        featId: string;
        required: boolean;
        level?: number | undefined;
    } | {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "abilityBoost";
        mode: {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        } | {
            value: number;
            type: "any";
            count: number;
        };
    } | {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    } | {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking: "max" | "stack";
    } | {
        kind: "grantTrait";
        traitId: string;
    } | {
        kind: "grantLanguage";
        languageId: string;
    } | {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    } | {
        kind: "grantChoice";
        choice: {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        };
    } | {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    } | {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    } | {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    } | {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    } | {
        kind: "grantFlag";
        flag: string;
    } | {
        kind: "removeFlag";
        flag: string;
    })[];
    keyAbility: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    hitPointsPerLevel: number;
    proficiencies: {
        perception: "untrained" | "trained" | "expert" | "master" | "legendary";
        savingThrows: {
            fortitude: "untrained" | "trained" | "expert" | "master" | "legendary";
            reflex: "untrained" | "trained" | "expert" | "master" | "legendary";
            will: "untrained" | "trained" | "expert" | "master" | "legendary";
        };
        skills: {
            trained: number;
            additionalChoices: string[];
        };
        attacks: {
            simple?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            martial?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            advanced?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            unarmed?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        };
        defense: {
            medium?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            unarmored?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            light?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            heavy?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            shields?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        };
        classDC?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
    };
    progression: Record<string, {
        choices: {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        }[];
        grants: ({
            kind: "grantFeat";
            featId: string;
            required: boolean;
            level?: number | undefined;
        } | {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "abilityBoost";
            mode: {
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            } | {
                value: number;
                type: "any";
                count: number;
            };
        } | {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking: "max" | "stack";
        } | {
            kind: "grantTrait";
            traitId: string;
        } | {
            kind: "grantLanguage";
            languageId: string;
        } | {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        } | {
            kind: "grantChoice";
            choice: {
                id: string;
                count: number;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                allowDuplicates: boolean;
                filter?: any;
            };
        } | {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        } | {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        } | {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        } | {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        } | {
            kind: "grantFlag";
            flag: string;
        } | {
            kind: "removeFlag";
            flag: string;
        })[];
        proficiencyBumps: {
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }[];
        featureRefs: string[];
    }>;
    slug?: string | undefined;
    summary?: string | undefined;
    description?: string | undefined;
    version?: {
        major: number;
        minor: number;
        patch: number;
    } | undefined;
    prerequisites?: any;
    spellcasting?: {
        type?: "focus" | "prepared" | "spontaneous" | "innate" | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    } | undefined;
}, {
    id: string;
    type: "class";
    name: string;
    source: {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    };
    keyAbility: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    hitPointsPerLevel: number;
    proficiencies: {
        perception: "untrained" | "trained" | "expert" | "master" | "legendary";
        savingThrows: {
            fortitude: "untrained" | "trained" | "expert" | "master" | "legendary";
            reflex: "untrained" | "trained" | "expert" | "master" | "legendary";
            will: "untrained" | "trained" | "expert" | "master" | "legendary";
        };
        skills: {
            trained?: number | undefined;
            additionalChoices?: string[] | undefined;
        };
        attacks?: {
            simple?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            martial?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            advanced?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            unarmed?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        } | undefined;
        defense?: {
            medium?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            unarmored?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            light?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            heavy?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            shields?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        } | undefined;
        classDC?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
    };
    progression: Record<string, {
        choices?: {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        }[] | undefined;
        grants?: ({
            kind: "grantFeat";
            featId: string;
            level?: number | undefined;
            required?: boolean | undefined;
        } | {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "abilityBoost";
            mode: {
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            } | {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            } | {
                type: "any";
                count: number;
                value?: number | undefined;
            };
        } | {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking?: "max" | "stack" | undefined;
        } | {
            kind: "grantTrait";
            traitId: string;
        } | {
            kind: "grantLanguage";
            languageId: string;
        } | {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        } | {
            kind: "grantChoice";
            choice: {
                id: string;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                filter?: any;
                count?: number | undefined;
                allowDuplicates?: boolean | undefined;
            };
        } | {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        } | {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        } | {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        } | {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        } | {
            kind: "grantFlag";
            flag: string;
        } | {
            kind: "removeFlag";
            flag: string;
        })[] | undefined;
        proficiencyBumps?: {
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }[] | undefined;
        featureRefs?: string[] | undefined;
    }>;
    slug?: string | undefined;
    summary?: string | undefined;
    description?: string | undefined;
    version?: {
        major?: number | undefined;
        minor?: number | undefined;
        patch?: number | undefined;
    } | undefined;
    rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
    traits?: string[] | undefined;
    tags?: string[] | undefined;
    prerequisites?: any;
    effects?: ({
        kind: "grantFeat";
        featId: string;
        level?: number | undefined;
        required?: boolean | undefined;
    } | {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "abilityBoost";
        mode: {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        } | {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        } | {
            type: "any";
            count: number;
            value?: number | undefined;
        };
    } | {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    } | {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking?: "max" | "stack" | undefined;
    } | {
        kind: "grantTrait";
        traitId: string;
    } | {
        kind: "grantLanguage";
        languageId: string;
    } | {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    } | {
        kind: "grantChoice";
        choice: {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        };
    } | {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    } | {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    } | {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    } | {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    } | {
        kind: "grantFlag";
        flag: string;
    } | {
        kind: "removeFlag";
        flag: string;
    })[] | undefined;
    spellcasting?: {
        type?: "focus" | "prepared" | "spontaneous" | "innate" | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    } | undefined;
}>, z.ZodObject<{
    id: z.ZodString;
    slug: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
    summary: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
    source: z.ZodObject<{
        id: z.ZodString;
        page: z.ZodOptional<z.ZodNumber>;
        license: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    }, {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    }>;
    version: z.ZodOptional<z.ZodObject<{
        major: z.ZodDefault<z.ZodNumber>;
        minor: z.ZodDefault<z.ZodNumber>;
        patch: z.ZodDefault<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        major: number;
        minor: number;
        patch: number;
    }, {
        major?: number | undefined;
        minor?: number | undefined;
        patch?: number | undefined;
    }>>;
    rarity: z.ZodDefault<z.ZodEnum<["common", "uncommon", "rare", "unique"]>>;
    traits: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    prerequisites: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
    effects: z.ZodDefault<z.ZodArray<z.ZodDiscriminatedUnion<"kind", [z.ZodObject<{
        kind: z.ZodLiteral<"grantFeat">;
        featId: z.ZodString;
        level: z.ZodOptional<z.ZodNumber>;
        required: z.ZodDefault<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantFeat";
        featId: string;
        required: boolean;
        level?: number | undefined;
    }, {
        kind: "grantFeat";
        featId: string;
        level?: number | undefined;
        required?: boolean | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantProficiency">;
        target: z.ZodString;
        rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }, {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"setProficiency">;
        target: z.ZodString;
        rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
    }, "strip", z.ZodTypeAny, {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }, {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"abilityBoost">;
        mode: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"fixed">;
            abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        }, {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"choice">;
            count: z.ZodNumber;
            options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        }, {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"any">;
            count: z.ZodNumber;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "any";
            count: number;
        }, {
            type: "any";
            count: number;
            value?: number | undefined;
        }>]>;
    }, "strip", z.ZodTypeAny, {
        kind: "abilityBoost";
        mode: {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        } | {
            value: number;
            type: "any";
            count: number;
        };
    }, {
        kind: "abilityBoost";
        mode: {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        } | {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        } | {
            type: "any";
            count: number;
            value?: number | undefined;
        };
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"abilityFlaw">;
        abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
    }, "strip", z.ZodTypeAny, {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    }, {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"addModifier">;
        target: z.ZodString;
        modifierType: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
        value: z.ZodNumber;
        label: z.ZodString;
        stacking: z.ZodDefault<z.ZodEnum<["max", "stack"]>>;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking: "max" | "stack";
    }, {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking?: "max" | "stack" | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantTrait">;
        traitId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantTrait";
        traitId: string;
    }, {
        kind: "grantTrait";
        traitId: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantLanguage">;
        languageId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantLanguage";
        languageId: string;
    }, {
        kind: "grantLanguage";
        languageId: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSense">;
        senseId: z.ZodString;
        range: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    }, {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantChoice">;
        choice: z.ZodObject<{
            id: z.ZodString;
            label: z.ZodString;
            count: z.ZodDefault<z.ZodNumber>;
            scope: z.ZodEnum<["skill", "skillFeat", "classFeat", "generalFeat", "ancestryFeat", "classFeature", "spell", "abilityBoost", "proficiency", "language"]>;
            filter: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
            allowDuplicates: z.ZodDefault<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        }, {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantChoice";
        choice: {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        };
    }, {
        kind: "grantChoice";
        choice: {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        };
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"addSpeed">;
        speedType: z.ZodEnum<["land", "burrow", "climb", "fly", "swim"]>;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    }, {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSpell">;
        spellId: z.ZodString;
        tradition: z.ZodOptional<z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>>;
        rank: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    }, {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSpellSlot">;
        rank: z.ZodNumber;
        count: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    }, {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"modifyResource">;
        resource: z.ZodEnum<["focusPoints", "hitPoints", "resolve", "classDc", "heroPoints"]>;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    }, {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantFlag">;
        flag: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantFlag";
        flag: string;
    }, {
        kind: "grantFlag";
        flag: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"removeFlag">;
        flag: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "removeFlag";
        flag: string;
    }, {
        kind: "removeFlag";
        flag: string;
    }>]>, "many">>;
} & {
    type: z.ZodLiteral<"archetype">;
    dedicationFeatId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    type: "archetype";
    name: string;
    source: {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    };
    rarity: "common" | "uncommon" | "rare" | "unique";
    traits: string[];
    tags: string[];
    effects: ({
        kind: "grantFeat";
        featId: string;
        required: boolean;
        level?: number | undefined;
    } | {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "abilityBoost";
        mode: {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        } | {
            value: number;
            type: "any";
            count: number;
        };
    } | {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    } | {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking: "max" | "stack";
    } | {
        kind: "grantTrait";
        traitId: string;
    } | {
        kind: "grantLanguage";
        languageId: string;
    } | {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    } | {
        kind: "grantChoice";
        choice: {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        };
    } | {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    } | {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    } | {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    } | {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    } | {
        kind: "grantFlag";
        flag: string;
    } | {
        kind: "removeFlag";
        flag: string;
    })[];
    dedicationFeatId: string;
    slug?: string | undefined;
    summary?: string | undefined;
    description?: string | undefined;
    version?: {
        major: number;
        minor: number;
        patch: number;
    } | undefined;
    prerequisites?: any;
}, {
    id: string;
    type: "archetype";
    name: string;
    source: {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    };
    dedicationFeatId: string;
    slug?: string | undefined;
    summary?: string | undefined;
    description?: string | undefined;
    version?: {
        major?: number | undefined;
        minor?: number | undefined;
        patch?: number | undefined;
    } | undefined;
    rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
    traits?: string[] | undefined;
    tags?: string[] | undefined;
    prerequisites?: any;
    effects?: ({
        kind: "grantFeat";
        featId: string;
        level?: number | undefined;
        required?: boolean | undefined;
    } | {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "abilityBoost";
        mode: {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        } | {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        } | {
            type: "any";
            count: number;
            value?: number | undefined;
        };
    } | {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    } | {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking?: "max" | "stack" | undefined;
    } | {
        kind: "grantTrait";
        traitId: string;
    } | {
        kind: "grantLanguage";
        languageId: string;
    } | {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    } | {
        kind: "grantChoice";
        choice: {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        };
    } | {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    } | {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    } | {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    } | {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    } | {
        kind: "grantFlag";
        flag: string;
    } | {
        kind: "removeFlag";
        flag: string;
    })[] | undefined;
}>, z.ZodObject<{
    id: z.ZodString;
    slug: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
    summary: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
    source: z.ZodObject<{
        id: z.ZodString;
        page: z.ZodOptional<z.ZodNumber>;
        license: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    }, {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    }>;
    version: z.ZodOptional<z.ZodObject<{
        major: z.ZodDefault<z.ZodNumber>;
        minor: z.ZodDefault<z.ZodNumber>;
        patch: z.ZodDefault<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        major: number;
        minor: number;
        patch: number;
    }, {
        major?: number | undefined;
        minor?: number | undefined;
        patch?: number | undefined;
    }>>;
    rarity: z.ZodDefault<z.ZodEnum<["common", "uncommon", "rare", "unique"]>>;
    traits: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    prerequisites: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
    effects: z.ZodDefault<z.ZodArray<z.ZodDiscriminatedUnion<"kind", [z.ZodObject<{
        kind: z.ZodLiteral<"grantFeat">;
        featId: z.ZodString;
        level: z.ZodOptional<z.ZodNumber>;
        required: z.ZodDefault<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantFeat";
        featId: string;
        required: boolean;
        level?: number | undefined;
    }, {
        kind: "grantFeat";
        featId: string;
        level?: number | undefined;
        required?: boolean | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantProficiency">;
        target: z.ZodString;
        rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }, {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"setProficiency">;
        target: z.ZodString;
        rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
    }, "strip", z.ZodTypeAny, {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }, {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"abilityBoost">;
        mode: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"fixed">;
            abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        }, {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"choice">;
            count: z.ZodNumber;
            options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        }, {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"any">;
            count: z.ZodNumber;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "any";
            count: number;
        }, {
            type: "any";
            count: number;
            value?: number | undefined;
        }>]>;
    }, "strip", z.ZodTypeAny, {
        kind: "abilityBoost";
        mode: {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        } | {
            value: number;
            type: "any";
            count: number;
        };
    }, {
        kind: "abilityBoost";
        mode: {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        } | {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        } | {
            type: "any";
            count: number;
            value?: number | undefined;
        };
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"abilityFlaw">;
        abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
    }, "strip", z.ZodTypeAny, {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    }, {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"addModifier">;
        target: z.ZodString;
        modifierType: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
        value: z.ZodNumber;
        label: z.ZodString;
        stacking: z.ZodDefault<z.ZodEnum<["max", "stack"]>>;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking: "max" | "stack";
    }, {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking?: "max" | "stack" | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantTrait">;
        traitId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantTrait";
        traitId: string;
    }, {
        kind: "grantTrait";
        traitId: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantLanguage">;
        languageId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantLanguage";
        languageId: string;
    }, {
        kind: "grantLanguage";
        languageId: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSense">;
        senseId: z.ZodString;
        range: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    }, {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantChoice">;
        choice: z.ZodObject<{
            id: z.ZodString;
            label: z.ZodString;
            count: z.ZodDefault<z.ZodNumber>;
            scope: z.ZodEnum<["skill", "skillFeat", "classFeat", "generalFeat", "ancestryFeat", "classFeature", "spell", "abilityBoost", "proficiency", "language"]>;
            filter: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
            allowDuplicates: z.ZodDefault<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        }, {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantChoice";
        choice: {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        };
    }, {
        kind: "grantChoice";
        choice: {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        };
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"addSpeed">;
        speedType: z.ZodEnum<["land", "burrow", "climb", "fly", "swim"]>;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    }, {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSpell">;
        spellId: z.ZodString;
        tradition: z.ZodOptional<z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>>;
        rank: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    }, {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSpellSlot">;
        rank: z.ZodNumber;
        count: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    }, {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"modifyResource">;
        resource: z.ZodEnum<["focusPoints", "hitPoints", "resolve", "classDc", "heroPoints"]>;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    }, {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantFlag">;
        flag: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantFlag";
        flag: string;
    }, {
        kind: "grantFlag";
        flag: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"removeFlag">;
        flag: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "removeFlag";
        flag: string;
    }, {
        kind: "removeFlag";
        flag: string;
    }>]>, "many">>;
} & {
    type: z.ZodLiteral<"feat">;
    level: z.ZodNumber;
    category: z.ZodEnum<["ancestry", "class", "skill", "general", "archetype"]>;
    actionCost: z.ZodOptional<z.ZodObject<{
        type: z.ZodOptional<z.ZodEnum<["one", "two", "three", "free", "reaction", "varies"]>>;
        trait: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        type?: "one" | "two" | "three" | "free" | "reaction" | "varies" | undefined;
        trait?: string | undefined;
    }, {
        type?: "one" | "two" | "three" | "free" | "reaction" | "varies" | undefined;
        trait?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    id: string;
    type: "feat";
    level: number;
    name: string;
    source: {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    };
    rarity: "common" | "uncommon" | "rare" | "unique";
    traits: string[];
    tags: string[];
    effects: ({
        kind: "grantFeat";
        featId: string;
        required: boolean;
        level?: number | undefined;
    } | {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "abilityBoost";
        mode: {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        } | {
            value: number;
            type: "any";
            count: number;
        };
    } | {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    } | {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking: "max" | "stack";
    } | {
        kind: "grantTrait";
        traitId: string;
    } | {
        kind: "grantLanguage";
        languageId: string;
    } | {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    } | {
        kind: "grantChoice";
        choice: {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        };
    } | {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    } | {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    } | {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    } | {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    } | {
        kind: "grantFlag";
        flag: string;
    } | {
        kind: "removeFlag";
        flag: string;
    })[];
    category: "skill" | "ancestry" | "class" | "archetype" | "general";
    slug?: string | undefined;
    summary?: string | undefined;
    description?: string | undefined;
    version?: {
        major: number;
        minor: number;
        patch: number;
    } | undefined;
    prerequisites?: any;
    actionCost?: {
        type?: "one" | "two" | "three" | "free" | "reaction" | "varies" | undefined;
        trait?: string | undefined;
    } | undefined;
}, {
    id: string;
    type: "feat";
    level: number;
    name: string;
    source: {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    };
    category: "skill" | "ancestry" | "class" | "archetype" | "general";
    slug?: string | undefined;
    summary?: string | undefined;
    description?: string | undefined;
    version?: {
        major?: number | undefined;
        minor?: number | undefined;
        patch?: number | undefined;
    } | undefined;
    rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
    traits?: string[] | undefined;
    tags?: string[] | undefined;
    prerequisites?: any;
    effects?: ({
        kind: "grantFeat";
        featId: string;
        level?: number | undefined;
        required?: boolean | undefined;
    } | {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "abilityBoost";
        mode: {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        } | {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        } | {
            type: "any";
            count: number;
            value?: number | undefined;
        };
    } | {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    } | {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking?: "max" | "stack" | undefined;
    } | {
        kind: "grantTrait";
        traitId: string;
    } | {
        kind: "grantLanguage";
        languageId: string;
    } | {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    } | {
        kind: "grantChoice";
        choice: {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        };
    } | {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    } | {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    } | {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    } | {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    } | {
        kind: "grantFlag";
        flag: string;
    } | {
        kind: "removeFlag";
        flag: string;
    })[] | undefined;
    actionCost?: {
        type?: "one" | "two" | "three" | "free" | "reaction" | "varies" | undefined;
        trait?: string | undefined;
    } | undefined;
}>, z.ZodObject<{
    id: z.ZodString;
    slug: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
    summary: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
    source: z.ZodObject<{
        id: z.ZodString;
        page: z.ZodOptional<z.ZodNumber>;
        license: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    }, {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    }>;
    version: z.ZodOptional<z.ZodObject<{
        major: z.ZodDefault<z.ZodNumber>;
        minor: z.ZodDefault<z.ZodNumber>;
        patch: z.ZodDefault<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        major: number;
        minor: number;
        patch: number;
    }, {
        major?: number | undefined;
        minor?: number | undefined;
        patch?: number | undefined;
    }>>;
    rarity: z.ZodDefault<z.ZodEnum<["common", "uncommon", "rare", "unique"]>>;
    tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    prerequisites: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
    effects: z.ZodDefault<z.ZodArray<z.ZodDiscriminatedUnion<"kind", [z.ZodObject<{
        kind: z.ZodLiteral<"grantFeat">;
        featId: z.ZodString;
        level: z.ZodOptional<z.ZodNumber>;
        required: z.ZodDefault<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantFeat";
        featId: string;
        required: boolean;
        level?: number | undefined;
    }, {
        kind: "grantFeat";
        featId: string;
        level?: number | undefined;
        required?: boolean | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantProficiency">;
        target: z.ZodString;
        rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }, {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"setProficiency">;
        target: z.ZodString;
        rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
    }, "strip", z.ZodTypeAny, {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }, {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"abilityBoost">;
        mode: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"fixed">;
            abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        }, {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"choice">;
            count: z.ZodNumber;
            options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        }, {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"any">;
            count: z.ZodNumber;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "any";
            count: number;
        }, {
            type: "any";
            count: number;
            value?: number | undefined;
        }>]>;
    }, "strip", z.ZodTypeAny, {
        kind: "abilityBoost";
        mode: {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        } | {
            value: number;
            type: "any";
            count: number;
        };
    }, {
        kind: "abilityBoost";
        mode: {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        } | {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        } | {
            type: "any";
            count: number;
            value?: number | undefined;
        };
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"abilityFlaw">;
        abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
    }, "strip", z.ZodTypeAny, {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    }, {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"addModifier">;
        target: z.ZodString;
        modifierType: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
        value: z.ZodNumber;
        label: z.ZodString;
        stacking: z.ZodDefault<z.ZodEnum<["max", "stack"]>>;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking: "max" | "stack";
    }, {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking?: "max" | "stack" | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantTrait">;
        traitId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantTrait";
        traitId: string;
    }, {
        kind: "grantTrait";
        traitId: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantLanguage">;
        languageId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantLanguage";
        languageId: string;
    }, {
        kind: "grantLanguage";
        languageId: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSense">;
        senseId: z.ZodString;
        range: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    }, {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantChoice">;
        choice: z.ZodObject<{
            id: z.ZodString;
            label: z.ZodString;
            count: z.ZodDefault<z.ZodNumber>;
            scope: z.ZodEnum<["skill", "skillFeat", "classFeat", "generalFeat", "ancestryFeat", "classFeature", "spell", "abilityBoost", "proficiency", "language"]>;
            filter: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
            allowDuplicates: z.ZodDefault<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        }, {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantChoice";
        choice: {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        };
    }, {
        kind: "grantChoice";
        choice: {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        };
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"addSpeed">;
        speedType: z.ZodEnum<["land", "burrow", "climb", "fly", "swim"]>;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    }, {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSpell">;
        spellId: z.ZodString;
        tradition: z.ZodOptional<z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>>;
        rank: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    }, {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSpellSlot">;
        rank: z.ZodNumber;
        count: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    }, {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"modifyResource">;
        resource: z.ZodEnum<["focusPoints", "hitPoints", "resolve", "classDc", "heroPoints"]>;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    }, {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantFlag">;
        flag: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantFlag";
        flag: string;
    }, {
        kind: "grantFlag";
        flag: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"removeFlag">;
        flag: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "removeFlag";
        flag: string;
    }, {
        kind: "removeFlag";
        flag: string;
    }>]>, "many">>;
} & {
    type: z.ZodLiteral<"spell">;
    rank: z.ZodNumber;
    traditions: z.ZodDefault<z.ZodArray<z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>, "many">>;
    traits: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    duration: z.ZodOptional<z.ZodString>;
    range: z.ZodOptional<z.ZodString>;
    targets: z.ZodOptional<z.ZodString>;
    savingThrow: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    id: string;
    type: "spell";
    rank: number;
    name: string;
    source: {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    };
    rarity: "common" | "uncommon" | "rare" | "unique";
    traits: string[];
    tags: string[];
    effects: ({
        kind: "grantFeat";
        featId: string;
        required: boolean;
        level?: number | undefined;
    } | {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "abilityBoost";
        mode: {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        } | {
            value: number;
            type: "any";
            count: number;
        };
    } | {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    } | {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking: "max" | "stack";
    } | {
        kind: "grantTrait";
        traitId: string;
    } | {
        kind: "grantLanguage";
        languageId: string;
    } | {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    } | {
        kind: "grantChoice";
        choice: {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        };
    } | {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    } | {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    } | {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    } | {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    } | {
        kind: "grantFlag";
        flag: string;
    } | {
        kind: "removeFlag";
        flag: string;
    })[];
    traditions: ("arcane" | "divine" | "occult" | "primal" | "focus")[];
    range?: string | undefined;
    slug?: string | undefined;
    summary?: string | undefined;
    description?: string | undefined;
    version?: {
        major: number;
        minor: number;
        patch: number;
    } | undefined;
    prerequisites?: any;
    duration?: string | undefined;
    targets?: string | undefined;
    savingThrow?: string | undefined;
}, {
    id: string;
    type: "spell";
    rank: number;
    name: string;
    source: {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    };
    range?: string | undefined;
    slug?: string | undefined;
    summary?: string | undefined;
    description?: string | undefined;
    version?: {
        major?: number | undefined;
        minor?: number | undefined;
        patch?: number | undefined;
    } | undefined;
    rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
    traits?: string[] | undefined;
    tags?: string[] | undefined;
    prerequisites?: any;
    effects?: ({
        kind: "grantFeat";
        featId: string;
        level?: number | undefined;
        required?: boolean | undefined;
    } | {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "abilityBoost";
        mode: {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        } | {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        } | {
            type: "any";
            count: number;
            value?: number | undefined;
        };
    } | {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    } | {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking?: "max" | "stack" | undefined;
    } | {
        kind: "grantTrait";
        traitId: string;
    } | {
        kind: "grantLanguage";
        languageId: string;
    } | {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    } | {
        kind: "grantChoice";
        choice: {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        };
    } | {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    } | {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    } | {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    } | {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    } | {
        kind: "grantFlag";
        flag: string;
    } | {
        kind: "removeFlag";
        flag: string;
    })[] | undefined;
    traditions?: ("arcane" | "divine" | "occult" | "primal" | "focus")[] | undefined;
    duration?: string | undefined;
    targets?: string | undefined;
    savingThrow?: string | undefined;
}>, z.ZodObject<{
    id: z.ZodString;
    slug: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
    summary: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
    source: z.ZodObject<{
        id: z.ZodString;
        page: z.ZodOptional<z.ZodNumber>;
        license: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    }, {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    }>;
    version: z.ZodOptional<z.ZodObject<{
        major: z.ZodDefault<z.ZodNumber>;
        minor: z.ZodDefault<z.ZodNumber>;
        patch: z.ZodDefault<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        major: number;
        minor: number;
        patch: number;
    }, {
        major?: number | undefined;
        minor?: number | undefined;
        patch?: number | undefined;
    }>>;
    rarity: z.ZodDefault<z.ZodEnum<["common", "uncommon", "rare", "unique"]>>;
    tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    prerequisites: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
    effects: z.ZodDefault<z.ZodArray<z.ZodDiscriminatedUnion<"kind", [z.ZodObject<{
        kind: z.ZodLiteral<"grantFeat">;
        featId: z.ZodString;
        level: z.ZodOptional<z.ZodNumber>;
        required: z.ZodDefault<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantFeat";
        featId: string;
        required: boolean;
        level?: number | undefined;
    }, {
        kind: "grantFeat";
        featId: string;
        level?: number | undefined;
        required?: boolean | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantProficiency">;
        target: z.ZodString;
        rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }, {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"setProficiency">;
        target: z.ZodString;
        rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
    }, "strip", z.ZodTypeAny, {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }, {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"abilityBoost">;
        mode: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"fixed">;
            abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        }, {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"choice">;
            count: z.ZodNumber;
            options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        }, {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"any">;
            count: z.ZodNumber;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "any";
            count: number;
        }, {
            type: "any";
            count: number;
            value?: number | undefined;
        }>]>;
    }, "strip", z.ZodTypeAny, {
        kind: "abilityBoost";
        mode: {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        } | {
            value: number;
            type: "any";
            count: number;
        };
    }, {
        kind: "abilityBoost";
        mode: {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        } | {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        } | {
            type: "any";
            count: number;
            value?: number | undefined;
        };
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"abilityFlaw">;
        abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
    }, "strip", z.ZodTypeAny, {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    }, {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"addModifier">;
        target: z.ZodString;
        modifierType: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
        value: z.ZodNumber;
        label: z.ZodString;
        stacking: z.ZodDefault<z.ZodEnum<["max", "stack"]>>;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking: "max" | "stack";
    }, {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking?: "max" | "stack" | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantTrait">;
        traitId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantTrait";
        traitId: string;
    }, {
        kind: "grantTrait";
        traitId: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantLanguage">;
        languageId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantLanguage";
        languageId: string;
    }, {
        kind: "grantLanguage";
        languageId: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSense">;
        senseId: z.ZodString;
        range: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    }, {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantChoice">;
        choice: z.ZodObject<{
            id: z.ZodString;
            label: z.ZodString;
            count: z.ZodDefault<z.ZodNumber>;
            scope: z.ZodEnum<["skill", "skillFeat", "classFeat", "generalFeat", "ancestryFeat", "classFeature", "spell", "abilityBoost", "proficiency", "language"]>;
            filter: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
            allowDuplicates: z.ZodDefault<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        }, {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantChoice";
        choice: {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        };
    }, {
        kind: "grantChoice";
        choice: {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        };
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"addSpeed">;
        speedType: z.ZodEnum<["land", "burrow", "climb", "fly", "swim"]>;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    }, {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSpell">;
        spellId: z.ZodString;
        tradition: z.ZodOptional<z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>>;
        rank: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    }, {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSpellSlot">;
        rank: z.ZodNumber;
        count: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    }, {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"modifyResource">;
        resource: z.ZodEnum<["focusPoints", "hitPoints", "resolve", "classDc", "heroPoints"]>;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    }, {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantFlag">;
        flag: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantFlag";
        flag: string;
    }, {
        kind: "grantFlag";
        flag: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"removeFlag">;
        flag: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "removeFlag";
        flag: string;
    }, {
        kind: "removeFlag";
        flag: string;
    }>]>, "many">>;
} & {
    type: z.ZodLiteral<"item">;
    level: z.ZodNumber;
    price: z.ZodOptional<z.ZodString>;
    bulk: z.ZodOptional<z.ZodString>;
    traits: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    id: string;
    type: "item";
    level: number;
    name: string;
    source: {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    };
    rarity: "common" | "uncommon" | "rare" | "unique";
    traits: string[];
    tags: string[];
    effects: ({
        kind: "grantFeat";
        featId: string;
        required: boolean;
        level?: number | undefined;
    } | {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "abilityBoost";
        mode: {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        } | {
            value: number;
            type: "any";
            count: number;
        };
    } | {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    } | {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking: "max" | "stack";
    } | {
        kind: "grantTrait";
        traitId: string;
    } | {
        kind: "grantLanguage";
        languageId: string;
    } | {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    } | {
        kind: "grantChoice";
        choice: {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        };
    } | {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    } | {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    } | {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    } | {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    } | {
        kind: "grantFlag";
        flag: string;
    } | {
        kind: "removeFlag";
        flag: string;
    })[];
    slug?: string | undefined;
    summary?: string | undefined;
    description?: string | undefined;
    version?: {
        major: number;
        minor: number;
        patch: number;
    } | undefined;
    prerequisites?: any;
    price?: string | undefined;
    bulk?: string | undefined;
}, {
    id: string;
    type: "item";
    level: number;
    name: string;
    source: {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    };
    slug?: string | undefined;
    summary?: string | undefined;
    description?: string | undefined;
    version?: {
        major?: number | undefined;
        minor?: number | undefined;
        patch?: number | undefined;
    } | undefined;
    rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
    traits?: string[] | undefined;
    tags?: string[] | undefined;
    prerequisites?: any;
    effects?: ({
        kind: "grantFeat";
        featId: string;
        level?: number | undefined;
        required?: boolean | undefined;
    } | {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "abilityBoost";
        mode: {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        } | {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        } | {
            type: "any";
            count: number;
            value?: number | undefined;
        };
    } | {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    } | {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking?: "max" | "stack" | undefined;
    } | {
        kind: "grantTrait";
        traitId: string;
    } | {
        kind: "grantLanguage";
        languageId: string;
    } | {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    } | {
        kind: "grantChoice";
        choice: {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        };
    } | {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    } | {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    } | {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    } | {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    } | {
        kind: "grantFlag";
        flag: string;
    } | {
        kind: "removeFlag";
        flag: string;
    })[] | undefined;
    price?: string | undefined;
    bulk?: string | undefined;
}>, z.ZodObject<{
    id: z.ZodString;
    slug: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
    summary: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
    source: z.ZodObject<{
        id: z.ZodString;
        page: z.ZodOptional<z.ZodNumber>;
        license: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    }, {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    }>;
    version: z.ZodOptional<z.ZodObject<{
        major: z.ZodDefault<z.ZodNumber>;
        minor: z.ZodDefault<z.ZodNumber>;
        patch: z.ZodDefault<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        major: number;
        minor: number;
        patch: number;
    }, {
        major?: number | undefined;
        minor?: number | undefined;
        patch?: number | undefined;
    }>>;
    rarity: z.ZodDefault<z.ZodEnum<["common", "uncommon", "rare", "unique"]>>;
    traits: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    prerequisites: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
    effects: z.ZodDefault<z.ZodArray<z.ZodDiscriminatedUnion<"kind", [z.ZodObject<{
        kind: z.ZodLiteral<"grantFeat">;
        featId: z.ZodString;
        level: z.ZodOptional<z.ZodNumber>;
        required: z.ZodDefault<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantFeat";
        featId: string;
        required: boolean;
        level?: number | undefined;
    }, {
        kind: "grantFeat";
        featId: string;
        level?: number | undefined;
        required?: boolean | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantProficiency">;
        target: z.ZodString;
        rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }, {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"setProficiency">;
        target: z.ZodString;
        rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
    }, "strip", z.ZodTypeAny, {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }, {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"abilityBoost">;
        mode: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"fixed">;
            abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        }, {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"choice">;
            count: z.ZodNumber;
            options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        }, {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"any">;
            count: z.ZodNumber;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "any";
            count: number;
        }, {
            type: "any";
            count: number;
            value?: number | undefined;
        }>]>;
    }, "strip", z.ZodTypeAny, {
        kind: "abilityBoost";
        mode: {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        } | {
            value: number;
            type: "any";
            count: number;
        };
    }, {
        kind: "abilityBoost";
        mode: {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        } | {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        } | {
            type: "any";
            count: number;
            value?: number | undefined;
        };
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"abilityFlaw">;
        abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
    }, "strip", z.ZodTypeAny, {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    }, {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"addModifier">;
        target: z.ZodString;
        modifierType: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
        value: z.ZodNumber;
        label: z.ZodString;
        stacking: z.ZodDefault<z.ZodEnum<["max", "stack"]>>;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking: "max" | "stack";
    }, {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking?: "max" | "stack" | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantTrait">;
        traitId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantTrait";
        traitId: string;
    }, {
        kind: "grantTrait";
        traitId: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantLanguage">;
        languageId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantLanguage";
        languageId: string;
    }, {
        kind: "grantLanguage";
        languageId: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSense">;
        senseId: z.ZodString;
        range: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    }, {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantChoice">;
        choice: z.ZodObject<{
            id: z.ZodString;
            label: z.ZodString;
            count: z.ZodDefault<z.ZodNumber>;
            scope: z.ZodEnum<["skill", "skillFeat", "classFeat", "generalFeat", "ancestryFeat", "classFeature", "spell", "abilityBoost", "proficiency", "language"]>;
            filter: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
            allowDuplicates: z.ZodDefault<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        }, {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantChoice";
        choice: {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        };
    }, {
        kind: "grantChoice";
        choice: {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        };
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"addSpeed">;
        speedType: z.ZodEnum<["land", "burrow", "climb", "fly", "swim"]>;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    }, {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSpell">;
        spellId: z.ZodString;
        tradition: z.ZodOptional<z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>>;
        rank: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    }, {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSpellSlot">;
        rank: z.ZodNumber;
        count: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    }, {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"modifyResource">;
        resource: z.ZodEnum<["focusPoints", "hitPoints", "resolve", "classDc", "heroPoints"]>;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    }, {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantFlag">;
        flag: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantFlag";
        flag: string;
    }, {
        kind: "grantFlag";
        flag: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"removeFlag">;
        flag: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "removeFlag";
        flag: string;
    }, {
        kind: "removeFlag";
        flag: string;
    }>]>, "many">>;
} & {
    type: z.ZodLiteral<"condition">;
    levels: z.ZodDefault<z.ZodArray<z.ZodNumber, "many">>;
}, "strip", z.ZodTypeAny, {
    id: string;
    type: "condition";
    name: string;
    source: {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    };
    rarity: "common" | "uncommon" | "rare" | "unique";
    traits: string[];
    tags: string[];
    effects: ({
        kind: "grantFeat";
        featId: string;
        required: boolean;
        level?: number | undefined;
    } | {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "abilityBoost";
        mode: {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        } | {
            value: number;
            type: "any";
            count: number;
        };
    } | {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    } | {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking: "max" | "stack";
    } | {
        kind: "grantTrait";
        traitId: string;
    } | {
        kind: "grantLanguage";
        languageId: string;
    } | {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    } | {
        kind: "grantChoice";
        choice: {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        };
    } | {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    } | {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    } | {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    } | {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    } | {
        kind: "grantFlag";
        flag: string;
    } | {
        kind: "removeFlag";
        flag: string;
    })[];
    levels: number[];
    slug?: string | undefined;
    summary?: string | undefined;
    description?: string | undefined;
    version?: {
        major: number;
        minor: number;
        patch: number;
    } | undefined;
    prerequisites?: any;
}, {
    id: string;
    type: "condition";
    name: string;
    source: {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    };
    slug?: string | undefined;
    summary?: string | undefined;
    description?: string | undefined;
    version?: {
        major?: number | undefined;
        minor?: number | undefined;
        patch?: number | undefined;
    } | undefined;
    rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
    traits?: string[] | undefined;
    tags?: string[] | undefined;
    prerequisites?: any;
    effects?: ({
        kind: "grantFeat";
        featId: string;
        level?: number | undefined;
        required?: boolean | undefined;
    } | {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "abilityBoost";
        mode: {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        } | {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        } | {
            type: "any";
            count: number;
            value?: number | undefined;
        };
    } | {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    } | {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking?: "max" | "stack" | undefined;
    } | {
        kind: "grantTrait";
        traitId: string;
    } | {
        kind: "grantLanguage";
        languageId: string;
    } | {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    } | {
        kind: "grantChoice";
        choice: {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        };
    } | {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    } | {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    } | {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    } | {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    } | {
        kind: "grantFlag";
        flag: string;
    } | {
        kind: "removeFlag";
        flag: string;
    })[] | undefined;
    levels?: number[] | undefined;
}>, z.ZodObject<{
    id: z.ZodString;
    slug: z.ZodOptional<z.ZodString>;
    name: z.ZodString;
    summary: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
    source: z.ZodObject<{
        id: z.ZodString;
        page: z.ZodOptional<z.ZodNumber>;
        license: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    }, {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    }>;
    version: z.ZodOptional<z.ZodObject<{
        major: z.ZodDefault<z.ZodNumber>;
        minor: z.ZodDefault<z.ZodNumber>;
        patch: z.ZodDefault<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        major: number;
        minor: number;
        patch: number;
    }, {
        major?: number | undefined;
        minor?: number | undefined;
        patch?: number | undefined;
    }>>;
    rarity: z.ZodDefault<z.ZodEnum<["common", "uncommon", "rare", "unique"]>>;
    traits: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    prerequisites: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
    effects: z.ZodDefault<z.ZodArray<z.ZodDiscriminatedUnion<"kind", [z.ZodObject<{
        kind: z.ZodLiteral<"grantFeat">;
        featId: z.ZodString;
        level: z.ZodOptional<z.ZodNumber>;
        required: z.ZodDefault<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantFeat";
        featId: string;
        required: boolean;
        level?: number | undefined;
    }, {
        kind: "grantFeat";
        featId: string;
        level?: number | undefined;
        required?: boolean | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantProficiency">;
        target: z.ZodString;
        rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }, {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"setProficiency">;
        target: z.ZodString;
        rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
    }, "strip", z.ZodTypeAny, {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }, {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"abilityBoost">;
        mode: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"fixed">;
            abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        }, {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"choice">;
            count: z.ZodNumber;
            options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        }, {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"any">;
            count: z.ZodNumber;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "any";
            count: number;
        }, {
            type: "any";
            count: number;
            value?: number | undefined;
        }>]>;
    }, "strip", z.ZodTypeAny, {
        kind: "abilityBoost";
        mode: {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        } | {
            value: number;
            type: "any";
            count: number;
        };
    }, {
        kind: "abilityBoost";
        mode: {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        } | {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        } | {
            type: "any";
            count: number;
            value?: number | undefined;
        };
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"abilityFlaw">;
        abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
    }, "strip", z.ZodTypeAny, {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    }, {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"addModifier">;
        target: z.ZodString;
        modifierType: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
        value: z.ZodNumber;
        label: z.ZodString;
        stacking: z.ZodDefault<z.ZodEnum<["max", "stack"]>>;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking: "max" | "stack";
    }, {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking?: "max" | "stack" | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantTrait">;
        traitId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantTrait";
        traitId: string;
    }, {
        kind: "grantTrait";
        traitId: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantLanguage">;
        languageId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantLanguage";
        languageId: string;
    }, {
        kind: "grantLanguage";
        languageId: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSense">;
        senseId: z.ZodString;
        range: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    }, {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantChoice">;
        choice: z.ZodObject<{
            id: z.ZodString;
            label: z.ZodString;
            count: z.ZodDefault<z.ZodNumber>;
            scope: z.ZodEnum<["skill", "skillFeat", "classFeat", "generalFeat", "ancestryFeat", "classFeature", "spell", "abilityBoost", "proficiency", "language"]>;
            filter: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
            allowDuplicates: z.ZodDefault<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        }, {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantChoice";
        choice: {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        };
    }, {
        kind: "grantChoice";
        choice: {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        };
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"addSpeed">;
        speedType: z.ZodEnum<["land", "burrow", "climb", "fly", "swim"]>;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    }, {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSpell">;
        spellId: z.ZodString;
        tradition: z.ZodOptional<z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>>;
        rank: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    }, {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantSpellSlot">;
        rank: z.ZodNumber;
        count: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    }, {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"modifyResource">;
        resource: z.ZodEnum<["focusPoints", "hitPoints", "resolve", "classDc", "heroPoints"]>;
        value: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    }, {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"grantFlag">;
        flag: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "grantFlag";
        flag: string;
    }, {
        kind: "grantFlag";
        flag: string;
    }>, z.ZodObject<{
        kind: z.ZodLiteral<"removeFlag">;
        flag: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        kind: "removeFlag";
        flag: string;
    }, {
        kind: "removeFlag";
        flag: string;
    }>]>, "many">>;
} & {
    type: z.ZodLiteral<"rule">;
    category: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    type: "rule";
    name: string;
    source: {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    };
    rarity: "common" | "uncommon" | "rare" | "unique";
    traits: string[];
    tags: string[];
    effects: ({
        kind: "grantFeat";
        featId: string;
        required: boolean;
        level?: number | undefined;
    } | {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "abilityBoost";
        mode: {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        } | {
            value: number;
            type: "any";
            count: number;
        };
    } | {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    } | {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking: "max" | "stack";
    } | {
        kind: "grantTrait";
        traitId: string;
    } | {
        kind: "grantLanguage";
        languageId: string;
    } | {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    } | {
        kind: "grantChoice";
        choice: {
            id: string;
            count: number;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            allowDuplicates: boolean;
            filter?: any;
        };
    } | {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    } | {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    } | {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    } | {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    } | {
        kind: "grantFlag";
        flag: string;
    } | {
        kind: "removeFlag";
        flag: string;
    })[];
    category: string;
    slug?: string | undefined;
    summary?: string | undefined;
    description?: string | undefined;
    version?: {
        major: number;
        minor: number;
        patch: number;
    } | undefined;
    prerequisites?: any;
}, {
    id: string;
    type: "rule";
    name: string;
    source: {
        id: string;
        page?: number | undefined;
        license?: string | undefined;
    };
    category: string;
    slug?: string | undefined;
    summary?: string | undefined;
    description?: string | undefined;
    version?: {
        major?: number | undefined;
        minor?: number | undefined;
        patch?: number | undefined;
    } | undefined;
    rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
    traits?: string[] | undefined;
    tags?: string[] | undefined;
    prerequisites?: any;
    effects?: ({
        kind: "grantFeat";
        featId: string;
        level?: number | undefined;
        required?: boolean | undefined;
    } | {
        kind: "grantProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "setProficiency";
        target: string;
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
    } | {
        kind: "abilityBoost";
        mode: {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        } | {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        } | {
            type: "any";
            count: number;
            value?: number | undefined;
        };
    } | {
        kind: "abilityFlaw";
        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
    } | {
        value: number;
        kind: "addModifier";
        target: string;
        modifierType: "status" | "item" | "circumstance" | "untyped";
        label: string;
        stacking?: "max" | "stack" | undefined;
    } | {
        kind: "grantTrait";
        traitId: string;
    } | {
        kind: "grantLanguage";
        languageId: string;
    } | {
        kind: "grantSense";
        senseId: string;
        range?: number | undefined;
    } | {
        kind: "grantChoice";
        choice: {
            id: string;
            label: string;
            scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
            filter?: any;
            count?: number | undefined;
            allowDuplicates?: boolean | undefined;
        };
    } | {
        value: number;
        kind: "addSpeed";
        speedType: "land" | "burrow" | "climb" | "fly" | "swim";
    } | {
        kind: "grantSpell";
        spellId: string;
        rank?: number | undefined;
        tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
    } | {
        kind: "grantSpellSlot";
        rank: number;
        count: number;
    } | {
        value: number;
        kind: "modifyResource";
        resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
    } | {
        kind: "grantFlag";
        flag: string;
    } | {
        kind: "removeFlag";
        flag: string;
    })[] | undefined;
}>]>;
export type ContentEntity = z.infer<typeof contentEntitySchema>;
declare const proficiencySummarySchema: z.ZodObject<{
    perception: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
    saves: z.ZodObject<{
        fortitude: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
        reflex: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
        will: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
    }, "strip", z.ZodTypeAny, {
        fortitude: "untrained" | "trained" | "expert" | "master" | "legendary";
        reflex: "untrained" | "trained" | "expert" | "master" | "legendary";
        will: "untrained" | "trained" | "expert" | "master" | "legendary";
    }, {
        fortitude: "untrained" | "trained" | "expert" | "master" | "legendary";
        reflex: "untrained" | "trained" | "expert" | "master" | "legendary";
        will: "untrained" | "trained" | "expert" | "master" | "legendary";
    }>;
    skills: z.ZodRecord<z.ZodString, z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
    lores: z.ZodDefault<z.ZodRecord<z.ZodString, z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>>;
    weapons: z.ZodRecord<z.ZodString, z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
    armor: z.ZodRecord<z.ZodString, z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
    spellcasting: z.ZodDefault<z.ZodRecord<z.ZodString, z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>>;
    classDC: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
    perceptionModifiers: z.ZodDefault<z.ZodArray<z.ZodObject<{
        type: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
        label: z.ZodString;
        value: z.ZodNumber;
        source: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        value: number;
        type: "status" | "item" | "circumstance" | "untyped";
        label: string;
        source: string;
    }, {
        value: number;
        type: "status" | "item" | "circumstance" | "untyped";
        label: string;
        source: string;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    perception: "untrained" | "trained" | "expert" | "master" | "legendary";
    skills: Record<string, "untrained" | "trained" | "expert" | "master" | "legendary">;
    classDC: "untrained" | "trained" | "expert" | "master" | "legendary";
    spellcasting: Record<string, "untrained" | "trained" | "expert" | "master" | "legendary">;
    saves: {
        fortitude: "untrained" | "trained" | "expert" | "master" | "legendary";
        reflex: "untrained" | "trained" | "expert" | "master" | "legendary";
        will: "untrained" | "trained" | "expert" | "master" | "legendary";
    };
    lores: Record<string, "untrained" | "trained" | "expert" | "master" | "legendary">;
    weapons: Record<string, "untrained" | "trained" | "expert" | "master" | "legendary">;
    armor: Record<string, "untrained" | "trained" | "expert" | "master" | "legendary">;
    perceptionModifiers: {
        value: number;
        type: "status" | "item" | "circumstance" | "untyped";
        label: string;
        source: string;
    }[];
}, {
    perception: "untrained" | "trained" | "expert" | "master" | "legendary";
    skills: Record<string, "untrained" | "trained" | "expert" | "master" | "legendary">;
    classDC: "untrained" | "trained" | "expert" | "master" | "legendary";
    saves: {
        fortitude: "untrained" | "trained" | "expert" | "master" | "legendary";
        reflex: "untrained" | "trained" | "expert" | "master" | "legendary";
        will: "untrained" | "trained" | "expert" | "master" | "legendary";
    };
    weapons: Record<string, "untrained" | "trained" | "expert" | "master" | "legendary">;
    armor: Record<string, "untrained" | "trained" | "expert" | "master" | "legendary">;
    spellcasting?: Record<string, "untrained" | "trained" | "expert" | "master" | "legendary"> | undefined;
    lores?: Record<string, "untrained" | "trained" | "expert" | "master" | "legendary"> | undefined;
    perceptionModifiers?: {
        value: number;
        type: "status" | "item" | "circumstance" | "untyped";
        label: string;
        source: string;
    }[] | undefined;
}>;
export type ProficiencySummary = z.infer<typeof proficiencySummarySchema>;
declare const characterFeatSelectionSchema: z.ZodObject<{
    id: z.ZodString;
    grantedBy: z.ZodString;
    level: z.ZodNumber;
    replaced: z.ZodDefault<z.ZodBoolean>;
    choices: z.ZodDefault<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
}, "strip", z.ZodTypeAny, {
    id: string;
    level: number;
    choices: Record<string, unknown>;
    grantedBy: string;
    replaced: boolean;
}, {
    id: string;
    level: number;
    grantedBy: string;
    choices?: Record<string, unknown> | undefined;
    replaced?: boolean | undefined;
}>;
export type CharacterFeatSelection = z.infer<typeof characterFeatSelectionSchema>;
declare const characterSpellSchema: z.ZodObject<{
    id: z.ZodString;
    rank: z.ZodNumber;
    prepared: z.ZodDefault<z.ZodBoolean>;
    slots: z.ZodDefault<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    prepared: boolean;
    id: string;
    rank: number;
    slots: number;
}, {
    id: string;
    rank: number;
    prepared?: boolean | undefined;
    slots?: number | undefined;
}>;
export type CharacterSpell = z.infer<typeof characterSpellSchema>;
declare const characterSpellcastingEntrySchema: z.ZodObject<{
    id: z.ZodString;
    tradition: z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>;
    castingType: z.ZodEnum<["prepared", "spontaneous", "focus", "innate"]>;
    ability: z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>;
    focusPoints: z.ZodDefault<z.ZodNumber>;
    maxFocusPoints: z.ZodDefault<z.ZodNumber>;
    dc: z.ZodOptional<z.ZodNumber>;
    attack: z.ZodOptional<z.ZodNumber>;
    slots: z.ZodDefault<z.ZodRecord<z.ZodString, z.ZodNumber>>;
    spells: z.ZodDefault<z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        rank: z.ZodNumber;
        prepared: z.ZodDefault<z.ZodBoolean>;
        slots: z.ZodDefault<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        prepared: boolean;
        id: string;
        rank: number;
        slots: number;
    }, {
        id: string;
        rank: number;
        prepared?: boolean | undefined;
        slots?: number | undefined;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    id: string;
    tradition: "arcane" | "divine" | "occult" | "primal" | "focus";
    focusPoints: number;
    castingType: "focus" | "prepared" | "spontaneous" | "innate";
    ability: "STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA";
    maxFocusPoints: number;
    slots: Record<string, number>;
    spells: {
        prepared: boolean;
        id: string;
        rank: number;
        slots: number;
    }[];
    dc?: number | undefined;
    attack?: number | undefined;
}, {
    id: string;
    tradition: "arcane" | "divine" | "occult" | "primal" | "focus";
    castingType: "focus" | "prepared" | "spontaneous" | "innate";
    ability: "STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA";
    focusPoints?: number | undefined;
    maxFocusPoints?: number | undefined;
    dc?: number | undefined;
    attack?: number | undefined;
    slots?: Record<string, number> | undefined;
    spells?: {
        id: string;
        rank: number;
        prepared?: boolean | undefined;
        slots?: number | undefined;
    }[] | undefined;
}>;
export type CharacterSpellcastingEntry = z.infer<typeof characterSpellcastingEntrySchema>;
declare const characterItemSchema: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    sourceId: z.ZodOptional<z.ZodString>;
    quantity: z.ZodDefault<z.ZodNumber>;
    bulk: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
    invested: z.ZodOptional<z.ZodBoolean>;
    notes: z.ZodOptional<z.ZodString>;
    runes: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    containerId: z.ZodOptional<z.ZodString>;
    metadata: z.ZodDefault<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
}, "strip", z.ZodTypeAny, {
    id: string;
    name: string;
    metadata: Record<string, unknown>;
    quantity: number;
    runes: string[];
    bulk?: string | number | undefined;
    sourceId?: string | undefined;
    invested?: boolean | undefined;
    notes?: string | undefined;
    containerId?: string | undefined;
}, {
    id: string;
    name: string;
    bulk?: string | number | undefined;
    metadata?: Record<string, unknown> | undefined;
    sourceId?: string | undefined;
    quantity?: number | undefined;
    invested?: boolean | undefined;
    notes?: string | undefined;
    runes?: string[] | undefined;
    containerId?: string | undefined;
}>;
export type CharacterItem = z.infer<typeof characterItemSchema>;
declare const derivedStatsSchema: z.ZodObject<{
    hitPoints: z.ZodObject<{
        max: z.ZodNumber;
        current: z.ZodNumber;
        temporary: z.ZodDefault<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        max: number;
        current: number;
        temporary: number;
    }, {
        max: number;
        current: number;
        temporary?: number | undefined;
    }>;
    armorClass: z.ZodObject<{
        value: z.ZodNumber;
        breakdown: z.ZodDefault<z.ZodArray<z.ZodObject<{
            type: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
            label: z.ZodString;
            value: z.ZodNumber;
            source: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "status" | "item" | "circumstance" | "untyped";
            label: string;
            source: string;
        }, {
            value: number;
            type: "status" | "item" | "circumstance" | "untyped";
            label: string;
            source: string;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        value: number;
        breakdown: {
            value: number;
            type: "status" | "item" | "circumstance" | "untyped";
            label: string;
            source: string;
        }[];
    }, {
        value: number;
        breakdown?: {
            value: number;
            type: "status" | "item" | "circumstance" | "untyped";
            label: string;
            source: string;
        }[] | undefined;
    }>;
    classDC: z.ZodOptional<z.ZodObject<{
        value: z.ZodNumber;
        breakdown: z.ZodDefault<z.ZodArray<z.ZodObject<{
            type: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
            label: z.ZodString;
            value: z.ZodNumber;
            source: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "status" | "item" | "circumstance" | "untyped";
            label: string;
            source: string;
        }, {
            value: number;
            type: "status" | "item" | "circumstance" | "untyped";
            label: string;
            source: string;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        value: number;
        breakdown: {
            value: number;
            type: "status" | "item" | "circumstance" | "untyped";
            label: string;
            source: string;
        }[];
    }, {
        value: number;
        breakdown?: {
            value: number;
            type: "status" | "item" | "circumstance" | "untyped";
            label: string;
            source: string;
        }[] | undefined;
    }>>;
    perception: z.ZodObject<{
        modifier: z.ZodNumber;
        rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
        breakdown: z.ZodDefault<z.ZodArray<z.ZodObject<{
            type: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
            label: z.ZodString;
            value: z.ZodNumber;
            source: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "status" | "item" | "circumstance" | "untyped";
            label: string;
            source: string;
        }, {
            value: number;
            type: "status" | "item" | "circumstance" | "untyped";
            label: string;
            source: string;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        breakdown: {
            value: number;
            type: "status" | "item" | "circumstance" | "untyped";
            label: string;
            source: string;
        }[];
        modifier: number;
    }, {
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        modifier: number;
        breakdown?: {
            value: number;
            type: "status" | "item" | "circumstance" | "untyped";
            label: string;
            source: string;
        }[] | undefined;
    }>;
    saves: z.ZodObject<{
        fortitude: z.ZodObject<{
            value: z.ZodNumber;
            breakdown: z.ZodDefault<z.ZodArray<z.ZodObject<{
                type: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
                label: z.ZodString;
                value: z.ZodNumber;
                source: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }, {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }>, "many">>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            breakdown: {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }[];
        }, {
            value: number;
            breakdown?: {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }[] | undefined;
        }>;
        reflex: z.ZodObject<{
            value: z.ZodNumber;
            breakdown: z.ZodDefault<z.ZodArray<z.ZodObject<{
                type: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
                label: z.ZodString;
                value: z.ZodNumber;
                source: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }, {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }>, "many">>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            breakdown: {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }[];
        }, {
            value: number;
            breakdown?: {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }[] | undefined;
        }>;
        will: z.ZodObject<{
            value: z.ZodNumber;
            breakdown: z.ZodDefault<z.ZodArray<z.ZodObject<{
                type: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
                label: z.ZodString;
                value: z.ZodNumber;
                source: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }, {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }>, "many">>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            breakdown: {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }[];
        }, {
            value: number;
            breakdown?: {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }[] | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        fortitude: {
            value: number;
            breakdown: {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }[];
        };
        reflex: {
            value: number;
            breakdown: {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }[];
        };
        will: {
            value: number;
            breakdown: {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }[];
        };
    }, {
        fortitude: {
            value: number;
            breakdown?: {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }[] | undefined;
        };
        reflex: {
            value: number;
            breakdown?: {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }[] | undefined;
        };
        will: {
            value: number;
            breakdown?: {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }[] | undefined;
        };
    }>;
    skills: z.ZodRecord<z.ZodString, z.ZodObject<{
        modifier: z.ZodNumber;
        rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
        breakdown: z.ZodDefault<z.ZodArray<z.ZodObject<{
            type: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
            label: z.ZodString;
            value: z.ZodNumber;
            source: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "status" | "item" | "circumstance" | "untyped";
            label: string;
            source: string;
        }, {
            value: number;
            type: "status" | "item" | "circumstance" | "untyped";
            label: string;
            source: string;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        breakdown: {
            value: number;
            type: "status" | "item" | "circumstance" | "untyped";
            label: string;
            source: string;
        }[];
        modifier: number;
    }, {
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        modifier: number;
        breakdown?: {
            value: number;
            type: "status" | "item" | "circumstance" | "untyped";
            label: string;
            source: string;
        }[] | undefined;
    }>>;
    speeds: z.ZodDefault<z.ZodRecord<z.ZodEnum<["land", "burrow", "climb", "fly", "swim"]>, z.ZodNumber>>;
    attacks: z.ZodDefault<z.ZodArray<z.ZodObject<{
        label: z.ZodString;
        weaponId: z.ZodOptional<z.ZodString>;
        attackBonus: z.ZodNumber;
        damage: z.ZodString;
        traits: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        label: string;
        traits: string[];
        attackBonus: number;
        damage: string;
        weaponId?: string | undefined;
    }, {
        label: string;
        attackBonus: number;
        damage: string;
        traits?: string[] | undefined;
        weaponId?: string | undefined;
    }>, "many">>;
    resistances: z.ZodDefault<z.ZodArray<z.ZodObject<{
        type: z.ZodString;
        value: z.ZodNumber;
        notes: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        value: number;
        type: string;
        notes?: string | undefined;
    }, {
        value: number;
        type: string;
        notes?: string | undefined;
    }>, "many">>;
    weaknesses: z.ZodDefault<z.ZodArray<z.ZodObject<{
        type: z.ZodString;
        value: z.ZodNumber;
        notes: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        value: number;
        type: string;
        notes?: string | undefined;
    }, {
        value: number;
        type: string;
        notes?: string | undefined;
    }>, "many">>;
    immunities: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    hitPoints: {
        max: number;
        current: number;
        temporary: number;
    };
    perception: {
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        breakdown: {
            value: number;
            type: "status" | "item" | "circumstance" | "untyped";
            label: string;
            source: string;
        }[];
        modifier: number;
    };
    skills: Record<string, {
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        breakdown: {
            value: number;
            type: "status" | "item" | "circumstance" | "untyped";
            label: string;
            source: string;
        }[];
        modifier: number;
    }>;
    attacks: {
        label: string;
        traits: string[];
        attackBonus: number;
        damage: string;
        weaponId?: string | undefined;
    }[];
    saves: {
        fortitude: {
            value: number;
            breakdown: {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }[];
        };
        reflex: {
            value: number;
            breakdown: {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }[];
        };
        will: {
            value: number;
            breakdown: {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }[];
        };
    };
    armorClass: {
        value: number;
        breakdown: {
            value: number;
            type: "status" | "item" | "circumstance" | "untyped";
            label: string;
            source: string;
        }[];
    };
    speeds: Partial<Record<"land" | "burrow" | "climb" | "fly" | "swim", number>>;
    resistances: {
        value: number;
        type: string;
        notes?: string | undefined;
    }[];
    weaknesses: {
        value: number;
        type: string;
        notes?: string | undefined;
    }[];
    immunities: string[];
    classDC?: {
        value: number;
        breakdown: {
            value: number;
            type: "status" | "item" | "circumstance" | "untyped";
            label: string;
            source: string;
        }[];
    } | undefined;
}, {
    hitPoints: {
        max: number;
        current: number;
        temporary?: number | undefined;
    };
    perception: {
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        modifier: number;
        breakdown?: {
            value: number;
            type: "status" | "item" | "circumstance" | "untyped";
            label: string;
            source: string;
        }[] | undefined;
    };
    skills: Record<string, {
        rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        modifier: number;
        breakdown?: {
            value: number;
            type: "status" | "item" | "circumstance" | "untyped";
            label: string;
            source: string;
        }[] | undefined;
    }>;
    saves: {
        fortitude: {
            value: number;
            breakdown?: {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }[] | undefined;
        };
        reflex: {
            value: number;
            breakdown?: {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }[] | undefined;
        };
        will: {
            value: number;
            breakdown?: {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }[] | undefined;
        };
    };
    armorClass: {
        value: number;
        breakdown?: {
            value: number;
            type: "status" | "item" | "circumstance" | "untyped";
            label: string;
            source: string;
        }[] | undefined;
    };
    attacks?: {
        label: string;
        attackBonus: number;
        damage: string;
        traits?: string[] | undefined;
        weaponId?: string | undefined;
    }[] | undefined;
    classDC?: {
        value: number;
        breakdown?: {
            value: number;
            type: "status" | "item" | "circumstance" | "untyped";
            label: string;
            source: string;
        }[] | undefined;
    } | undefined;
    speeds?: Partial<Record<"land" | "burrow" | "climb" | "fly" | "swim", number>> | undefined;
    resistances?: {
        value: number;
        type: string;
        notes?: string | undefined;
    }[] | undefined;
    weaknesses?: {
        value: number;
        type: string;
        notes?: string | undefined;
    }[] | undefined;
    immunities?: string[] | undefined;
}>;
export type DerivedStats = z.infer<typeof derivedStatsSchema>;
declare const historyEntrySchema: z.ZodObject<{
    id: z.ZodString;
    level: z.ZodNumber;
    timestamp: z.ZodString;
    description: z.ZodString;
    operations: z.ZodDefault<z.ZodArray<z.ZodObject<{
        type: z.ZodString;
        payload: z.ZodDefault<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
    }, "strip", z.ZodTypeAny, {
        type: string;
        payload: Record<string, unknown>;
    }, {
        type: string;
        payload?: Record<string, unknown> | undefined;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    id: string;
    level: number;
    description: string;
    timestamp: string;
    operations: {
        type: string;
        payload: Record<string, unknown>;
    }[];
}, {
    id: string;
    level: number;
    description: string;
    timestamp: string;
    operations?: {
        type: string;
        payload?: Record<string, unknown> | undefined;
    }[] | undefined;
}>;
export type HistoryEntry = z.infer<typeof historyEntrySchema>;
declare const characterMetadataSchema: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    player: z.ZodOptional<z.ZodString>;
    campaign: z.ZodOptional<z.ZodString>;
    schemaVersion: z.ZodString;
    createdAt: z.ZodString;
    updatedAt: z.ZodString;
    sources: z.ZodDefault<z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        hash: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        hash: string;
    }, {
        id: string;
        hash: string;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    id: string;
    name: string;
    schemaVersion: string;
    createdAt: string;
    updatedAt: string;
    sources: {
        id: string;
        hash: string;
    }[];
    player?: string | undefined;
    campaign?: string | undefined;
}, {
    id: string;
    name: string;
    schemaVersion: string;
    createdAt: string;
    updatedAt: string;
    player?: string | undefined;
    campaign?: string | undefined;
    sources?: {
        id: string;
        hash: string;
    }[] | undefined;
}>;
export type CharacterMetadata = z.infer<typeof characterMetadataSchema>;
declare const characterIdentitySchema: z.ZodObject<{
    level: z.ZodNumber;
    ancestryId: z.ZodString;
    heritageId: z.ZodOptional<z.ZodString>;
    backgroundId: z.ZodString;
    classId: z.ZodString;
    archetypeIds: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    deityId: z.ZodOptional<z.ZodString>;
    alignment: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    level: number;
    ancestryId: string;
    backgroundId: string;
    classId: string;
    archetypeIds: string[];
    heritageId?: string | undefined;
    deityId?: string | undefined;
    alignment?: string | undefined;
}, {
    level: number;
    ancestryId: string;
    backgroundId: string;
    classId: string;
    heritageId?: string | undefined;
    archetypeIds?: string[] | undefined;
    deityId?: string | undefined;
    alignment?: string | undefined;
}>;
export type CharacterIdentity = z.infer<typeof characterIdentitySchema>;
declare const characterNotesSchema: z.ZodObject<{
    appearance: z.ZodOptional<z.ZodString>;
    backstory: z.ZodOptional<z.ZodString>;
    allies: z.ZodOptional<z.ZodString>;
    campaigns: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    appearance?: string | undefined;
    backstory?: string | undefined;
    allies?: string | undefined;
    campaigns?: string | undefined;
}, {
    appearance?: string | undefined;
    backstory?: string | undefined;
    allies?: string | undefined;
    campaigns?: string | undefined;
}>;
export type CharacterNotes = z.infer<typeof characterNotesSchema>;
export declare const characterSchema: z.ZodObject<{
    metadata: z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        player: z.ZodOptional<z.ZodString>;
        campaign: z.ZodOptional<z.ZodString>;
        schemaVersion: z.ZodString;
        createdAt: z.ZodString;
        updatedAt: z.ZodString;
        sources: z.ZodDefault<z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            hash: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            hash: string;
        }, {
            id: string;
            hash: string;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        name: string;
        schemaVersion: string;
        createdAt: string;
        updatedAt: string;
        sources: {
            id: string;
            hash: string;
        }[];
        player?: string | undefined;
        campaign?: string | undefined;
    }, {
        id: string;
        name: string;
        schemaVersion: string;
        createdAt: string;
        updatedAt: string;
        player?: string | undefined;
        campaign?: string | undefined;
        sources?: {
            id: string;
            hash: string;
        }[] | undefined;
    }>;
    identity: z.ZodObject<{
        level: z.ZodNumber;
        ancestryId: z.ZodString;
        heritageId: z.ZodOptional<z.ZodString>;
        backgroundId: z.ZodString;
        classId: z.ZodString;
        archetypeIds: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        deityId: z.ZodOptional<z.ZodString>;
        alignment: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        level: number;
        ancestryId: string;
        backgroundId: string;
        classId: string;
        archetypeIds: string[];
        heritageId?: string | undefined;
        deityId?: string | undefined;
        alignment?: string | undefined;
    }, {
        level: number;
        ancestryId: string;
        backgroundId: string;
        classId: string;
        heritageId?: string | undefined;
        archetypeIds?: string[] | undefined;
        deityId?: string | undefined;
        alignment?: string | undefined;
    }>;
    abilityScores: z.ZodObject<{
        base: z.ZodObject<{
            STR: z.ZodNumber;
            DEX: z.ZodNumber;
            CON: z.ZodNumber;
            INT: z.ZodNumber;
            WIS: z.ZodNumber;
            CHA: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            STR: number;
            DEX: number;
            CON: number;
            INT: number;
            WIS: number;
            CHA: number;
        }, {
            STR: number;
            DEX: number;
            CON: number;
            INT: number;
            WIS: number;
            CHA: number;
        }>;
        boosts: z.ZodDefault<z.ZodArray<z.ZodObject<{
            type: z.ZodEnum<["boost", "flaw"]>;
            abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            value: z.ZodNumber;
            source: z.ZodString;
            level: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "boost" | "flaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            source: string;
            level?: number | undefined;
        }, {
            value: number;
            type: "boost" | "flaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            source: string;
            level?: number | undefined;
        }>, "many">>;
        final: z.ZodObject<{
            STR: z.ZodNumber;
            DEX: z.ZodNumber;
            CON: z.ZodNumber;
            INT: z.ZodNumber;
            WIS: z.ZodNumber;
            CHA: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            STR: number;
            DEX: number;
            CON: number;
            INT: number;
            WIS: number;
            CHA: number;
        }, {
            STR: number;
            DEX: number;
            CON: number;
            INT: number;
            WIS: number;
            CHA: number;
        }>;
    }, "strip", z.ZodTypeAny, {
        boosts: {
            value: number;
            type: "boost" | "flaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            source: string;
            level?: number | undefined;
        }[];
        base: {
            STR: number;
            DEX: number;
            CON: number;
            INT: number;
            WIS: number;
            CHA: number;
        };
        final: {
            STR: number;
            DEX: number;
            CON: number;
            INT: number;
            WIS: number;
            CHA: number;
        };
    }, {
        base: {
            STR: number;
            DEX: number;
            CON: number;
            INT: number;
            WIS: number;
            CHA: number;
        };
        final: {
            STR: number;
            DEX: number;
            CON: number;
            INT: number;
            WIS: number;
            CHA: number;
        };
        boosts?: {
            value: number;
            type: "boost" | "flaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            source: string;
            level?: number | undefined;
        }[] | undefined;
    }>;
    proficiencies: z.ZodObject<{
        perception: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
        saves: z.ZodObject<{
            fortitude: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
            reflex: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
            will: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
        }, "strip", z.ZodTypeAny, {
            fortitude: "untrained" | "trained" | "expert" | "master" | "legendary";
            reflex: "untrained" | "trained" | "expert" | "master" | "legendary";
            will: "untrained" | "trained" | "expert" | "master" | "legendary";
        }, {
            fortitude: "untrained" | "trained" | "expert" | "master" | "legendary";
            reflex: "untrained" | "trained" | "expert" | "master" | "legendary";
            will: "untrained" | "trained" | "expert" | "master" | "legendary";
        }>;
        skills: z.ZodRecord<z.ZodString, z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
        lores: z.ZodDefault<z.ZodRecord<z.ZodString, z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>>;
        weapons: z.ZodRecord<z.ZodString, z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
        armor: z.ZodRecord<z.ZodString, z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
        spellcasting: z.ZodDefault<z.ZodRecord<z.ZodString, z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>>;
        classDC: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
        perceptionModifiers: z.ZodDefault<z.ZodArray<z.ZodObject<{
            type: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
            label: z.ZodString;
            value: z.ZodNumber;
            source: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "status" | "item" | "circumstance" | "untyped";
            label: string;
            source: string;
        }, {
            value: number;
            type: "status" | "item" | "circumstance" | "untyped";
            label: string;
            source: string;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        perception: "untrained" | "trained" | "expert" | "master" | "legendary";
        skills: Record<string, "untrained" | "trained" | "expert" | "master" | "legendary">;
        classDC: "untrained" | "trained" | "expert" | "master" | "legendary";
        spellcasting: Record<string, "untrained" | "trained" | "expert" | "master" | "legendary">;
        saves: {
            fortitude: "untrained" | "trained" | "expert" | "master" | "legendary";
            reflex: "untrained" | "trained" | "expert" | "master" | "legendary";
            will: "untrained" | "trained" | "expert" | "master" | "legendary";
        };
        lores: Record<string, "untrained" | "trained" | "expert" | "master" | "legendary">;
        weapons: Record<string, "untrained" | "trained" | "expert" | "master" | "legendary">;
        armor: Record<string, "untrained" | "trained" | "expert" | "master" | "legendary">;
        perceptionModifiers: {
            value: number;
            type: "status" | "item" | "circumstance" | "untyped";
            label: string;
            source: string;
        }[];
    }, {
        perception: "untrained" | "trained" | "expert" | "master" | "legendary";
        skills: Record<string, "untrained" | "trained" | "expert" | "master" | "legendary">;
        classDC: "untrained" | "trained" | "expert" | "master" | "legendary";
        saves: {
            fortitude: "untrained" | "trained" | "expert" | "master" | "legendary";
            reflex: "untrained" | "trained" | "expert" | "master" | "legendary";
            will: "untrained" | "trained" | "expert" | "master" | "legendary";
        };
        weapons: Record<string, "untrained" | "trained" | "expert" | "master" | "legendary">;
        armor: Record<string, "untrained" | "trained" | "expert" | "master" | "legendary">;
        spellcasting?: Record<string, "untrained" | "trained" | "expert" | "master" | "legendary"> | undefined;
        lores?: Record<string, "untrained" | "trained" | "expert" | "master" | "legendary"> | undefined;
        perceptionModifiers?: {
            value: number;
            type: "status" | "item" | "circumstance" | "untyped";
            label: string;
            source: string;
        }[] | undefined;
    }>;
    languages: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    senses: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    feats: z.ZodDefault<z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        grantedBy: z.ZodString;
        level: z.ZodNumber;
        replaced: z.ZodDefault<z.ZodBoolean>;
        choices: z.ZodDefault<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        level: number;
        choices: Record<string, unknown>;
        grantedBy: string;
        replaced: boolean;
    }, {
        id: string;
        level: number;
        grantedBy: string;
        choices?: Record<string, unknown> | undefined;
        replaced?: boolean | undefined;
    }>, "many">>;
    spellcasting: z.ZodDefault<z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        tradition: z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>;
        castingType: z.ZodEnum<["prepared", "spontaneous", "focus", "innate"]>;
        ability: z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>;
        focusPoints: z.ZodDefault<z.ZodNumber>;
        maxFocusPoints: z.ZodDefault<z.ZodNumber>;
        dc: z.ZodOptional<z.ZodNumber>;
        attack: z.ZodOptional<z.ZodNumber>;
        slots: z.ZodDefault<z.ZodRecord<z.ZodString, z.ZodNumber>>;
        spells: z.ZodDefault<z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            rank: z.ZodNumber;
            prepared: z.ZodDefault<z.ZodBoolean>;
            slots: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            prepared: boolean;
            id: string;
            rank: number;
            slots: number;
        }, {
            id: string;
            rank: number;
            prepared?: boolean | undefined;
            slots?: number | undefined;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        tradition: "arcane" | "divine" | "occult" | "primal" | "focus";
        focusPoints: number;
        castingType: "focus" | "prepared" | "spontaneous" | "innate";
        ability: "STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA";
        maxFocusPoints: number;
        slots: Record<string, number>;
        spells: {
            prepared: boolean;
            id: string;
            rank: number;
            slots: number;
        }[];
        dc?: number | undefined;
        attack?: number | undefined;
    }, {
        id: string;
        tradition: "arcane" | "divine" | "occult" | "primal" | "focus";
        castingType: "focus" | "prepared" | "spontaneous" | "innate";
        ability: "STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA";
        focusPoints?: number | undefined;
        maxFocusPoints?: number | undefined;
        dc?: number | undefined;
        attack?: number | undefined;
        slots?: Record<string, number> | undefined;
        spells?: {
            id: string;
            rank: number;
            prepared?: boolean | undefined;
            slots?: number | undefined;
        }[] | undefined;
    }>, "many">>;
    equipment: z.ZodDefault<z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        sourceId: z.ZodOptional<z.ZodString>;
        quantity: z.ZodDefault<z.ZodNumber>;
        bulk: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        invested: z.ZodOptional<z.ZodBoolean>;
        notes: z.ZodOptional<z.ZodString>;
        runes: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        containerId: z.ZodOptional<z.ZodString>;
        metadata: z.ZodDefault<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        name: string;
        metadata: Record<string, unknown>;
        quantity: number;
        runes: string[];
        bulk?: string | number | undefined;
        sourceId?: string | undefined;
        invested?: boolean | undefined;
        notes?: string | undefined;
        containerId?: string | undefined;
    }, {
        id: string;
        name: string;
        bulk?: string | number | undefined;
        metadata?: Record<string, unknown> | undefined;
        sourceId?: string | undefined;
        quantity?: number | undefined;
        invested?: boolean | undefined;
        notes?: string | undefined;
        runes?: string[] | undefined;
        containerId?: string | undefined;
    }>, "many">>;
    derived: z.ZodObject<{
        hitPoints: z.ZodObject<{
            max: z.ZodNumber;
            current: z.ZodNumber;
            temporary: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            max: number;
            current: number;
            temporary: number;
        }, {
            max: number;
            current: number;
            temporary?: number | undefined;
        }>;
        armorClass: z.ZodObject<{
            value: z.ZodNumber;
            breakdown: z.ZodDefault<z.ZodArray<z.ZodObject<{
                type: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
                label: z.ZodString;
                value: z.ZodNumber;
                source: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }, {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }>, "many">>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            breakdown: {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }[];
        }, {
            value: number;
            breakdown?: {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }[] | undefined;
        }>;
        classDC: z.ZodOptional<z.ZodObject<{
            value: z.ZodNumber;
            breakdown: z.ZodDefault<z.ZodArray<z.ZodObject<{
                type: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
                label: z.ZodString;
                value: z.ZodNumber;
                source: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }, {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }>, "many">>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            breakdown: {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }[];
        }, {
            value: number;
            breakdown?: {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }[] | undefined;
        }>>;
        perception: z.ZodObject<{
            modifier: z.ZodNumber;
            rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
            breakdown: z.ZodDefault<z.ZodArray<z.ZodObject<{
                type: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
                label: z.ZodString;
                value: z.ZodNumber;
                source: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }, {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }>, "many">>;
        }, "strip", z.ZodTypeAny, {
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            breakdown: {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }[];
            modifier: number;
        }, {
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            modifier: number;
            breakdown?: {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }[] | undefined;
        }>;
        saves: z.ZodObject<{
            fortitude: z.ZodObject<{
                value: z.ZodNumber;
                breakdown: z.ZodDefault<z.ZodArray<z.ZodObject<{
                    type: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
                    label: z.ZodString;
                    value: z.ZodNumber;
                    source: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    value: number;
                    type: "status" | "item" | "circumstance" | "untyped";
                    label: string;
                    source: string;
                }, {
                    value: number;
                    type: "status" | "item" | "circumstance" | "untyped";
                    label: string;
                    source: string;
                }>, "many">>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                breakdown: {
                    value: number;
                    type: "status" | "item" | "circumstance" | "untyped";
                    label: string;
                    source: string;
                }[];
            }, {
                value: number;
                breakdown?: {
                    value: number;
                    type: "status" | "item" | "circumstance" | "untyped";
                    label: string;
                    source: string;
                }[] | undefined;
            }>;
            reflex: z.ZodObject<{
                value: z.ZodNumber;
                breakdown: z.ZodDefault<z.ZodArray<z.ZodObject<{
                    type: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
                    label: z.ZodString;
                    value: z.ZodNumber;
                    source: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    value: number;
                    type: "status" | "item" | "circumstance" | "untyped";
                    label: string;
                    source: string;
                }, {
                    value: number;
                    type: "status" | "item" | "circumstance" | "untyped";
                    label: string;
                    source: string;
                }>, "many">>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                breakdown: {
                    value: number;
                    type: "status" | "item" | "circumstance" | "untyped";
                    label: string;
                    source: string;
                }[];
            }, {
                value: number;
                breakdown?: {
                    value: number;
                    type: "status" | "item" | "circumstance" | "untyped";
                    label: string;
                    source: string;
                }[] | undefined;
            }>;
            will: z.ZodObject<{
                value: z.ZodNumber;
                breakdown: z.ZodDefault<z.ZodArray<z.ZodObject<{
                    type: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
                    label: z.ZodString;
                    value: z.ZodNumber;
                    source: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    value: number;
                    type: "status" | "item" | "circumstance" | "untyped";
                    label: string;
                    source: string;
                }, {
                    value: number;
                    type: "status" | "item" | "circumstance" | "untyped";
                    label: string;
                    source: string;
                }>, "many">>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                breakdown: {
                    value: number;
                    type: "status" | "item" | "circumstance" | "untyped";
                    label: string;
                    source: string;
                }[];
            }, {
                value: number;
                breakdown?: {
                    value: number;
                    type: "status" | "item" | "circumstance" | "untyped";
                    label: string;
                    source: string;
                }[] | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            fortitude: {
                value: number;
                breakdown: {
                    value: number;
                    type: "status" | "item" | "circumstance" | "untyped";
                    label: string;
                    source: string;
                }[];
            };
            reflex: {
                value: number;
                breakdown: {
                    value: number;
                    type: "status" | "item" | "circumstance" | "untyped";
                    label: string;
                    source: string;
                }[];
            };
            will: {
                value: number;
                breakdown: {
                    value: number;
                    type: "status" | "item" | "circumstance" | "untyped";
                    label: string;
                    source: string;
                }[];
            };
        }, {
            fortitude: {
                value: number;
                breakdown?: {
                    value: number;
                    type: "status" | "item" | "circumstance" | "untyped";
                    label: string;
                    source: string;
                }[] | undefined;
            };
            reflex: {
                value: number;
                breakdown?: {
                    value: number;
                    type: "status" | "item" | "circumstance" | "untyped";
                    label: string;
                    source: string;
                }[] | undefined;
            };
            will: {
                value: number;
                breakdown?: {
                    value: number;
                    type: "status" | "item" | "circumstance" | "untyped";
                    label: string;
                    source: string;
                }[] | undefined;
            };
        }>;
        skills: z.ZodRecord<z.ZodString, z.ZodObject<{
            modifier: z.ZodNumber;
            rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
            breakdown: z.ZodDefault<z.ZodArray<z.ZodObject<{
                type: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
                label: z.ZodString;
                value: z.ZodNumber;
                source: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }, {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }>, "many">>;
        }, "strip", z.ZodTypeAny, {
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            breakdown: {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }[];
            modifier: number;
        }, {
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            modifier: number;
            breakdown?: {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }[] | undefined;
        }>>;
        speeds: z.ZodDefault<z.ZodRecord<z.ZodEnum<["land", "burrow", "climb", "fly", "swim"]>, z.ZodNumber>>;
        attacks: z.ZodDefault<z.ZodArray<z.ZodObject<{
            label: z.ZodString;
            weaponId: z.ZodOptional<z.ZodString>;
            attackBonus: z.ZodNumber;
            damage: z.ZodString;
            traits: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            label: string;
            traits: string[];
            attackBonus: number;
            damage: string;
            weaponId?: string | undefined;
        }, {
            label: string;
            attackBonus: number;
            damage: string;
            traits?: string[] | undefined;
            weaponId?: string | undefined;
        }>, "many">>;
        resistances: z.ZodDefault<z.ZodArray<z.ZodObject<{
            type: z.ZodString;
            value: z.ZodNumber;
            notes: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: string;
            notes?: string | undefined;
        }, {
            value: number;
            type: string;
            notes?: string | undefined;
        }>, "many">>;
        weaknesses: z.ZodDefault<z.ZodArray<z.ZodObject<{
            type: z.ZodString;
            value: z.ZodNumber;
            notes: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: string;
            notes?: string | undefined;
        }, {
            value: number;
            type: string;
            notes?: string | undefined;
        }>, "many">>;
        immunities: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        hitPoints: {
            max: number;
            current: number;
            temporary: number;
        };
        perception: {
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            breakdown: {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }[];
            modifier: number;
        };
        skills: Record<string, {
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            breakdown: {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }[];
            modifier: number;
        }>;
        attacks: {
            label: string;
            traits: string[];
            attackBonus: number;
            damage: string;
            weaponId?: string | undefined;
        }[];
        saves: {
            fortitude: {
                value: number;
                breakdown: {
                    value: number;
                    type: "status" | "item" | "circumstance" | "untyped";
                    label: string;
                    source: string;
                }[];
            };
            reflex: {
                value: number;
                breakdown: {
                    value: number;
                    type: "status" | "item" | "circumstance" | "untyped";
                    label: string;
                    source: string;
                }[];
            };
            will: {
                value: number;
                breakdown: {
                    value: number;
                    type: "status" | "item" | "circumstance" | "untyped";
                    label: string;
                    source: string;
                }[];
            };
        };
        armorClass: {
            value: number;
            breakdown: {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }[];
        };
        speeds: Partial<Record<"land" | "burrow" | "climb" | "fly" | "swim", number>>;
        resistances: {
            value: number;
            type: string;
            notes?: string | undefined;
        }[];
        weaknesses: {
            value: number;
            type: string;
            notes?: string | undefined;
        }[];
        immunities: string[];
        classDC?: {
            value: number;
            breakdown: {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }[];
        } | undefined;
    }, {
        hitPoints: {
            max: number;
            current: number;
            temporary?: number | undefined;
        };
        perception: {
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            modifier: number;
            breakdown?: {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }[] | undefined;
        };
        skills: Record<string, {
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            modifier: number;
            breakdown?: {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }[] | undefined;
        }>;
        saves: {
            fortitude: {
                value: number;
                breakdown?: {
                    value: number;
                    type: "status" | "item" | "circumstance" | "untyped";
                    label: string;
                    source: string;
                }[] | undefined;
            };
            reflex: {
                value: number;
                breakdown?: {
                    value: number;
                    type: "status" | "item" | "circumstance" | "untyped";
                    label: string;
                    source: string;
                }[] | undefined;
            };
            will: {
                value: number;
                breakdown?: {
                    value: number;
                    type: "status" | "item" | "circumstance" | "untyped";
                    label: string;
                    source: string;
                }[] | undefined;
            };
        };
        armorClass: {
            value: number;
            breakdown?: {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }[] | undefined;
        };
        attacks?: {
            label: string;
            attackBonus: number;
            damage: string;
            traits?: string[] | undefined;
            weaponId?: string | undefined;
        }[] | undefined;
        classDC?: {
            value: number;
            breakdown?: {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }[] | undefined;
        } | undefined;
        speeds?: Partial<Record<"land" | "burrow" | "climb" | "fly" | "swim", number>> | undefined;
        resistances?: {
            value: number;
            type: string;
            notes?: string | undefined;
        }[] | undefined;
        weaknesses?: {
            value: number;
            type: string;
            notes?: string | undefined;
        }[] | undefined;
        immunities?: string[] | undefined;
    }>;
    notes: z.ZodOptional<z.ZodObject<{
        appearance: z.ZodOptional<z.ZodString>;
        backstory: z.ZodOptional<z.ZodString>;
        allies: z.ZodOptional<z.ZodString>;
        campaigns: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        appearance?: string | undefined;
        backstory?: string | undefined;
        allies?: string | undefined;
        campaigns?: string | undefined;
    }, {
        appearance?: string | undefined;
        backstory?: string | undefined;
        allies?: string | undefined;
        campaigns?: string | undefined;
    }>>;
    history: z.ZodDefault<z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        level: z.ZodNumber;
        timestamp: z.ZodString;
        description: z.ZodString;
        operations: z.ZodDefault<z.ZodArray<z.ZodObject<{
            type: z.ZodString;
            payload: z.ZodDefault<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
        }, "strip", z.ZodTypeAny, {
            type: string;
            payload: Record<string, unknown>;
        }, {
            type: string;
            payload?: Record<string, unknown> | undefined;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        level: number;
        description: string;
        timestamp: string;
        operations: {
            type: string;
            payload: Record<string, unknown>;
        }[];
    }, {
        id: string;
        level: number;
        description: string;
        timestamp: string;
        operations?: {
            type: string;
            payload?: Record<string, unknown> | undefined;
        }[] | undefined;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    languages: string[];
    proficiencies: {
        perception: "untrained" | "trained" | "expert" | "master" | "legendary";
        skills: Record<string, "untrained" | "trained" | "expert" | "master" | "legendary">;
        classDC: "untrained" | "trained" | "expert" | "master" | "legendary";
        spellcasting: Record<string, "untrained" | "trained" | "expert" | "master" | "legendary">;
        saves: {
            fortitude: "untrained" | "trained" | "expert" | "master" | "legendary";
            reflex: "untrained" | "trained" | "expert" | "master" | "legendary";
            will: "untrained" | "trained" | "expert" | "master" | "legendary";
        };
        lores: Record<string, "untrained" | "trained" | "expert" | "master" | "legendary">;
        weapons: Record<string, "untrained" | "trained" | "expert" | "master" | "legendary">;
        armor: Record<string, "untrained" | "trained" | "expert" | "master" | "legendary">;
        perceptionModifiers: {
            value: number;
            type: "status" | "item" | "circumstance" | "untyped";
            label: string;
            source: string;
        }[];
    };
    spellcasting: {
        id: string;
        tradition: "arcane" | "divine" | "occult" | "primal" | "focus";
        focusPoints: number;
        castingType: "focus" | "prepared" | "spontaneous" | "innate";
        ability: "STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA";
        maxFocusPoints: number;
        slots: Record<string, number>;
        spells: {
            prepared: boolean;
            id: string;
            rank: number;
            slots: number;
        }[];
        dc?: number | undefined;
        attack?: number | undefined;
    }[];
    metadata: {
        id: string;
        name: string;
        schemaVersion: string;
        createdAt: string;
        updatedAt: string;
        sources: {
            id: string;
            hash: string;
        }[];
        player?: string | undefined;
        campaign?: string | undefined;
    };
    identity: {
        level: number;
        ancestryId: string;
        backgroundId: string;
        classId: string;
        archetypeIds: string[];
        heritageId?: string | undefined;
        deityId?: string | undefined;
        alignment?: string | undefined;
    };
    abilityScores: {
        boosts: {
            value: number;
            type: "boost" | "flaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            source: string;
            level?: number | undefined;
        }[];
        base: {
            STR: number;
            DEX: number;
            CON: number;
            INT: number;
            WIS: number;
            CHA: number;
        };
        final: {
            STR: number;
            DEX: number;
            CON: number;
            INT: number;
            WIS: number;
            CHA: number;
        };
    };
    senses: string[];
    feats: {
        id: string;
        level: number;
        choices: Record<string, unknown>;
        grantedBy: string;
        replaced: boolean;
    }[];
    equipment: {
        id: string;
        name: string;
        metadata: Record<string, unknown>;
        quantity: number;
        runes: string[];
        bulk?: string | number | undefined;
        sourceId?: string | undefined;
        invested?: boolean | undefined;
        notes?: string | undefined;
        containerId?: string | undefined;
    }[];
    derived: {
        hitPoints: {
            max: number;
            current: number;
            temporary: number;
        };
        perception: {
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            breakdown: {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }[];
            modifier: number;
        };
        skills: Record<string, {
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            breakdown: {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }[];
            modifier: number;
        }>;
        attacks: {
            label: string;
            traits: string[];
            attackBonus: number;
            damage: string;
            weaponId?: string | undefined;
        }[];
        saves: {
            fortitude: {
                value: number;
                breakdown: {
                    value: number;
                    type: "status" | "item" | "circumstance" | "untyped";
                    label: string;
                    source: string;
                }[];
            };
            reflex: {
                value: number;
                breakdown: {
                    value: number;
                    type: "status" | "item" | "circumstance" | "untyped";
                    label: string;
                    source: string;
                }[];
            };
            will: {
                value: number;
                breakdown: {
                    value: number;
                    type: "status" | "item" | "circumstance" | "untyped";
                    label: string;
                    source: string;
                }[];
            };
        };
        armorClass: {
            value: number;
            breakdown: {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }[];
        };
        speeds: Partial<Record<"land" | "burrow" | "climb" | "fly" | "swim", number>>;
        resistances: {
            value: number;
            type: string;
            notes?: string | undefined;
        }[];
        weaknesses: {
            value: number;
            type: string;
            notes?: string | undefined;
        }[];
        immunities: string[];
        classDC?: {
            value: number;
            breakdown: {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }[];
        } | undefined;
    };
    history: {
        id: string;
        level: number;
        description: string;
        timestamp: string;
        operations: {
            type: string;
            payload: Record<string, unknown>;
        }[];
    }[];
    notes?: {
        appearance?: string | undefined;
        backstory?: string | undefined;
        allies?: string | undefined;
        campaigns?: string | undefined;
    } | undefined;
}, {
    proficiencies: {
        perception: "untrained" | "trained" | "expert" | "master" | "legendary";
        skills: Record<string, "untrained" | "trained" | "expert" | "master" | "legendary">;
        classDC: "untrained" | "trained" | "expert" | "master" | "legendary";
        saves: {
            fortitude: "untrained" | "trained" | "expert" | "master" | "legendary";
            reflex: "untrained" | "trained" | "expert" | "master" | "legendary";
            will: "untrained" | "trained" | "expert" | "master" | "legendary";
        };
        weapons: Record<string, "untrained" | "trained" | "expert" | "master" | "legendary">;
        armor: Record<string, "untrained" | "trained" | "expert" | "master" | "legendary">;
        spellcasting?: Record<string, "untrained" | "trained" | "expert" | "master" | "legendary"> | undefined;
        lores?: Record<string, "untrained" | "trained" | "expert" | "master" | "legendary"> | undefined;
        perceptionModifiers?: {
            value: number;
            type: "status" | "item" | "circumstance" | "untyped";
            label: string;
            source: string;
        }[] | undefined;
    };
    metadata: {
        id: string;
        name: string;
        schemaVersion: string;
        createdAt: string;
        updatedAt: string;
        player?: string | undefined;
        campaign?: string | undefined;
        sources?: {
            id: string;
            hash: string;
        }[] | undefined;
    };
    identity: {
        level: number;
        ancestryId: string;
        backgroundId: string;
        classId: string;
        heritageId?: string | undefined;
        archetypeIds?: string[] | undefined;
        deityId?: string | undefined;
        alignment?: string | undefined;
    };
    abilityScores: {
        base: {
            STR: number;
            DEX: number;
            CON: number;
            INT: number;
            WIS: number;
            CHA: number;
        };
        final: {
            STR: number;
            DEX: number;
            CON: number;
            INT: number;
            WIS: number;
            CHA: number;
        };
        boosts?: {
            value: number;
            type: "boost" | "flaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            source: string;
            level?: number | undefined;
        }[] | undefined;
    };
    derived: {
        hitPoints: {
            max: number;
            current: number;
            temporary?: number | undefined;
        };
        perception: {
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            modifier: number;
            breakdown?: {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }[] | undefined;
        };
        skills: Record<string, {
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            modifier: number;
            breakdown?: {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }[] | undefined;
        }>;
        saves: {
            fortitude: {
                value: number;
                breakdown?: {
                    value: number;
                    type: "status" | "item" | "circumstance" | "untyped";
                    label: string;
                    source: string;
                }[] | undefined;
            };
            reflex: {
                value: number;
                breakdown?: {
                    value: number;
                    type: "status" | "item" | "circumstance" | "untyped";
                    label: string;
                    source: string;
                }[] | undefined;
            };
            will: {
                value: number;
                breakdown?: {
                    value: number;
                    type: "status" | "item" | "circumstance" | "untyped";
                    label: string;
                    source: string;
                }[] | undefined;
            };
        };
        armorClass: {
            value: number;
            breakdown?: {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }[] | undefined;
        };
        attacks?: {
            label: string;
            attackBonus: number;
            damage: string;
            traits?: string[] | undefined;
            weaponId?: string | undefined;
        }[] | undefined;
        classDC?: {
            value: number;
            breakdown?: {
                value: number;
                type: "status" | "item" | "circumstance" | "untyped";
                label: string;
                source: string;
            }[] | undefined;
        } | undefined;
        speeds?: Partial<Record<"land" | "burrow" | "climb" | "fly" | "swim", number>> | undefined;
        resistances?: {
            value: number;
            type: string;
            notes?: string | undefined;
        }[] | undefined;
        weaknesses?: {
            value: number;
            type: string;
            notes?: string | undefined;
        }[] | undefined;
        immunities?: string[] | undefined;
    };
    languages?: string[] | undefined;
    spellcasting?: {
        id: string;
        tradition: "arcane" | "divine" | "occult" | "primal" | "focus";
        castingType: "focus" | "prepared" | "spontaneous" | "innate";
        ability: "STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA";
        focusPoints?: number | undefined;
        maxFocusPoints?: number | undefined;
        dc?: number | undefined;
        attack?: number | undefined;
        slots?: Record<string, number> | undefined;
        spells?: {
            id: string;
            rank: number;
            prepared?: boolean | undefined;
            slots?: number | undefined;
        }[] | undefined;
    }[] | undefined;
    senses?: string[] | undefined;
    feats?: {
        id: string;
        level: number;
        grantedBy: string;
        choices?: Record<string, unknown> | undefined;
        replaced?: boolean | undefined;
    }[] | undefined;
    notes?: {
        appearance?: string | undefined;
        backstory?: string | undefined;
        allies?: string | undefined;
        campaigns?: string | undefined;
    } | undefined;
    equipment?: {
        id: string;
        name: string;
        bulk?: string | number | undefined;
        metadata?: Record<string, unknown> | undefined;
        sourceId?: string | undefined;
        quantity?: number | undefined;
        invested?: boolean | undefined;
        notes?: string | undefined;
        runes?: string[] | undefined;
        containerId?: string | undefined;
    }[] | undefined;
    history?: {
        id: string;
        level: number;
        description: string;
        timestamp: string;
        operations?: {
            type: string;
            payload?: Record<string, unknown> | undefined;
        }[] | undefined;
    }[] | undefined;
}>;
export type Character = z.infer<typeof characterSchema>;
export declare const catalogPackSchema: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    version: z.ZodOptional<z.ZodObject<{
        major: z.ZodDefault<z.ZodNumber>;
        minor: z.ZodDefault<z.ZodNumber>;
        patch: z.ZodDefault<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        major: number;
        minor: number;
        patch: number;
    }, {
        major?: number | undefined;
        minor?: number | undefined;
        patch?: number | undefined;
    }>>;
    license: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
    includes: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    id: string;
    includes: string[];
    name: string;
    license?: string | undefined;
    description?: string | undefined;
    version?: {
        major: number;
        minor: number;
        patch: number;
    } | undefined;
}, {
    id: string;
    name: string;
    license?: string | undefined;
    includes?: string[] | undefined;
    description?: string | undefined;
    version?: {
        major?: number | undefined;
        minor?: number | undefined;
        patch?: number | undefined;
    } | undefined;
}>;
export type CatalogPackManifest = z.infer<typeof catalogPackSchema>;
export declare const catalogIndexEntrySchema: z.ZodObject<{
    entity: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        id: z.ZodString;
        slug: z.ZodOptional<z.ZodString>;
        name: z.ZodString;
        summary: z.ZodOptional<z.ZodString>;
        description: z.ZodOptional<z.ZodString>;
        source: z.ZodObject<{
            id: z.ZodString;
            page: z.ZodOptional<z.ZodNumber>;
            license: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        }, {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        }>;
        version: z.ZodOptional<z.ZodObject<{
            major: z.ZodDefault<z.ZodNumber>;
            minor: z.ZodDefault<z.ZodNumber>;
            patch: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            major: number;
            minor: number;
            patch: number;
        }, {
            major?: number | undefined;
            minor?: number | undefined;
            patch?: number | undefined;
        }>>;
        rarity: z.ZodDefault<z.ZodEnum<["common", "uncommon", "rare", "unique"]>>;
        traits: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        prerequisites: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
        effects: z.ZodDefault<z.ZodArray<z.ZodDiscriminatedUnion<"kind", [z.ZodObject<{
            kind: z.ZodLiteral<"grantFeat">;
            featId: z.ZodString;
            level: z.ZodOptional<z.ZodNumber>;
            required: z.ZodDefault<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantFeat";
            featId: string;
            required: boolean;
            level?: number | undefined;
        }, {
            kind: "grantFeat";
            featId: string;
            level?: number | undefined;
            required?: boolean | undefined;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantProficiency">;
            target: z.ZodString;
            rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }, {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"setProficiency">;
            target: z.ZodString;
            rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
        }, "strip", z.ZodTypeAny, {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }, {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"abilityBoost">;
            mode: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"fixed">;
                abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
                value: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            }, {
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"choice">;
                count: z.ZodNumber;
                options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
                value: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            }, {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"any">;
                count: z.ZodNumber;
                value: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "any";
                count: number;
            }, {
                type: "any";
                count: number;
                value?: number | undefined;
            }>]>;
        }, "strip", z.ZodTypeAny, {
            kind: "abilityBoost";
            mode: {
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            } | {
                value: number;
                type: "any";
                count: number;
            };
        }, {
            kind: "abilityBoost";
            mode: {
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            } | {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            } | {
                type: "any";
                count: number;
                value?: number | undefined;
            };
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"abilityFlaw">;
            abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
        }, "strip", z.ZodTypeAny, {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        }, {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"addModifier">;
            target: z.ZodString;
            modifierType: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
            value: z.ZodNumber;
            label: z.ZodString;
            stacking: z.ZodDefault<z.ZodEnum<["max", "stack"]>>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking: "max" | "stack";
        }, {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking?: "max" | "stack" | undefined;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantTrait">;
            traitId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            kind: "grantTrait";
            traitId: string;
        }, {
            kind: "grantTrait";
            traitId: string;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantLanguage">;
            languageId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            kind: "grantLanguage";
            languageId: string;
        }, {
            kind: "grantLanguage";
            languageId: string;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantSense">;
            senseId: z.ZodString;
            range: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        }, {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantChoice">;
            choice: z.ZodObject<{
                id: z.ZodString;
                label: z.ZodString;
                count: z.ZodDefault<z.ZodNumber>;
                scope: z.ZodEnum<["skill", "skillFeat", "classFeat", "generalFeat", "ancestryFeat", "classFeature", "spell", "abilityBoost", "proficiency", "language"]>;
                filter: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
                allowDuplicates: z.ZodDefault<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                count: number;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                allowDuplicates: boolean;
                filter?: any;
            }, {
                id: string;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                filter?: any;
                count?: number | undefined;
                allowDuplicates?: boolean | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantChoice";
            choice: {
                id: string;
                count: number;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                allowDuplicates: boolean;
                filter?: any;
            };
        }, {
            kind: "grantChoice";
            choice: {
                id: string;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                filter?: any;
                count?: number | undefined;
                allowDuplicates?: boolean | undefined;
            };
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"addSpeed">;
            speedType: z.ZodEnum<["land", "burrow", "climb", "fly", "swim"]>;
            value: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        }, {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantSpell">;
            spellId: z.ZodString;
            tradition: z.ZodOptional<z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>>;
            rank: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        }, {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantSpellSlot">;
            rank: z.ZodNumber;
            count: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        }, {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"modifyResource">;
            resource: z.ZodEnum<["focusPoints", "hitPoints", "resolve", "classDc", "heroPoints"]>;
            value: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        }, {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantFlag">;
            flag: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            kind: "grantFlag";
            flag: string;
        }, {
            kind: "grantFlag";
            flag: string;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"removeFlag">;
            flag: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            kind: "removeFlag";
            flag: string;
        }, {
            kind: "removeFlag";
            flag: string;
        }>]>, "many">>;
    } & {
        type: z.ZodLiteral<"ancestry">;
        hitPoints: z.ZodNumber;
        size: z.ZodEnum<["tiny", "small", "medium", "large", "huge", "gargantuan"]>;
        speed: z.ZodNumber;
        boosts: z.ZodDefault<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"fixed">;
            abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        }, {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"choice">;
            count: z.ZodNumber;
            options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        }, {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"any">;
            count: z.ZodNumber;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "any";
            count: number;
        }, {
            type: "any";
            count: number;
            value?: number | undefined;
        }>]>, "many">>;
        flaws: z.ZodDefault<z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">>;
        languages: z.ZodDefault<z.ZodObject<{
            granted: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
            choices: z.ZodDefault<z.ZodObject<{
                count: z.ZodDefault<z.ZodNumber>;
                options: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
            }, "strip", z.ZodTypeAny, {
                options: string[];
                count: number;
            }, {
                options?: string[] | undefined;
                count?: number | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            granted: string[];
            choices: {
                options: string[];
                count: number;
            };
        }, {
            granted?: string[] | undefined;
            choices?: {
                options?: string[] | undefined;
                count?: number | undefined;
            } | undefined;
        }>>;
        features: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        type: "ancestry";
        hitPoints: number;
        name: string;
        source: {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        };
        rarity: "common" | "uncommon" | "rare" | "unique";
        traits: string[];
        tags: string[];
        effects: ({
            kind: "grantFeat";
            featId: string;
            required: boolean;
            level?: number | undefined;
        } | {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "abilityBoost";
            mode: {
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            } | {
                value: number;
                type: "any";
                count: number;
            };
        } | {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking: "max" | "stack";
        } | {
            kind: "grantTrait";
            traitId: string;
        } | {
            kind: "grantLanguage";
            languageId: string;
        } | {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        } | {
            kind: "grantChoice";
            choice: {
                id: string;
                count: number;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                allowDuplicates: boolean;
                filter?: any;
            };
        } | {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        } | {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        } | {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        } | {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        } | {
            kind: "grantFlag";
            flag: string;
        } | {
            kind: "removeFlag";
            flag: string;
        })[];
        size: "tiny" | "small" | "medium" | "large" | "huge" | "gargantuan";
        speed: number;
        boosts: ({
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        } | {
            value: number;
            type: "any";
            count: number;
        })[];
        flaws: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        languages: {
            granted: string[];
            choices: {
                options: string[];
                count: number;
            };
        };
        features: string[];
        slug?: string | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        version?: {
            major: number;
            minor: number;
            patch: number;
        } | undefined;
        prerequisites?: any;
    }, {
        id: string;
        type: "ancestry";
        hitPoints: number;
        name: string;
        source: {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        };
        size: "tiny" | "small" | "medium" | "large" | "huge" | "gargantuan";
        speed: number;
        slug?: string | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        version?: {
            major?: number | undefined;
            minor?: number | undefined;
            patch?: number | undefined;
        } | undefined;
        rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
        traits?: string[] | undefined;
        tags?: string[] | undefined;
        prerequisites?: any;
        effects?: ({
            kind: "grantFeat";
            featId: string;
            level?: number | undefined;
            required?: boolean | undefined;
        } | {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "abilityBoost";
            mode: {
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            } | {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            } | {
                type: "any";
                count: number;
                value?: number | undefined;
            };
        } | {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking?: "max" | "stack" | undefined;
        } | {
            kind: "grantTrait";
            traitId: string;
        } | {
            kind: "grantLanguage";
            languageId: string;
        } | {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        } | {
            kind: "grantChoice";
            choice: {
                id: string;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                filter?: any;
                count?: number | undefined;
                allowDuplicates?: boolean | undefined;
            };
        } | {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        } | {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        } | {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        } | {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        } | {
            kind: "grantFlag";
            flag: string;
        } | {
            kind: "removeFlag";
            flag: string;
        })[] | undefined;
        boosts?: ({
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        } | {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        } | {
            type: "any";
            count: number;
            value?: number | undefined;
        })[] | undefined;
        flaws?: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[] | undefined;
        languages?: {
            granted?: string[] | undefined;
            choices?: {
                options?: string[] | undefined;
                count?: number | undefined;
            } | undefined;
        } | undefined;
        features?: string[] | undefined;
    }>, z.ZodObject<{
        id: z.ZodString;
        slug: z.ZodOptional<z.ZodString>;
        name: z.ZodString;
        summary: z.ZodOptional<z.ZodString>;
        description: z.ZodOptional<z.ZodString>;
        source: z.ZodObject<{
            id: z.ZodString;
            page: z.ZodOptional<z.ZodNumber>;
            license: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        }, {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        }>;
        version: z.ZodOptional<z.ZodObject<{
            major: z.ZodDefault<z.ZodNumber>;
            minor: z.ZodDefault<z.ZodNumber>;
            patch: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            major: number;
            minor: number;
            patch: number;
        }, {
            major?: number | undefined;
            minor?: number | undefined;
            patch?: number | undefined;
        }>>;
        rarity: z.ZodDefault<z.ZodEnum<["common", "uncommon", "rare", "unique"]>>;
        traits: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        prerequisites: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
        effects: z.ZodDefault<z.ZodArray<z.ZodDiscriminatedUnion<"kind", [z.ZodObject<{
            kind: z.ZodLiteral<"grantFeat">;
            featId: z.ZodString;
            level: z.ZodOptional<z.ZodNumber>;
            required: z.ZodDefault<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantFeat";
            featId: string;
            required: boolean;
            level?: number | undefined;
        }, {
            kind: "grantFeat";
            featId: string;
            level?: number | undefined;
            required?: boolean | undefined;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantProficiency">;
            target: z.ZodString;
            rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }, {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"setProficiency">;
            target: z.ZodString;
            rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
        }, "strip", z.ZodTypeAny, {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }, {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"abilityBoost">;
            mode: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"fixed">;
                abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
                value: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            }, {
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"choice">;
                count: z.ZodNumber;
                options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
                value: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            }, {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"any">;
                count: z.ZodNumber;
                value: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "any";
                count: number;
            }, {
                type: "any";
                count: number;
                value?: number | undefined;
            }>]>;
        }, "strip", z.ZodTypeAny, {
            kind: "abilityBoost";
            mode: {
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            } | {
                value: number;
                type: "any";
                count: number;
            };
        }, {
            kind: "abilityBoost";
            mode: {
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            } | {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            } | {
                type: "any";
                count: number;
                value?: number | undefined;
            };
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"abilityFlaw">;
            abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
        }, "strip", z.ZodTypeAny, {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        }, {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"addModifier">;
            target: z.ZodString;
            modifierType: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
            value: z.ZodNumber;
            label: z.ZodString;
            stacking: z.ZodDefault<z.ZodEnum<["max", "stack"]>>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking: "max" | "stack";
        }, {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking?: "max" | "stack" | undefined;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantTrait">;
            traitId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            kind: "grantTrait";
            traitId: string;
        }, {
            kind: "grantTrait";
            traitId: string;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantLanguage">;
            languageId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            kind: "grantLanguage";
            languageId: string;
        }, {
            kind: "grantLanguage";
            languageId: string;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantSense">;
            senseId: z.ZodString;
            range: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        }, {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantChoice">;
            choice: z.ZodObject<{
                id: z.ZodString;
                label: z.ZodString;
                count: z.ZodDefault<z.ZodNumber>;
                scope: z.ZodEnum<["skill", "skillFeat", "classFeat", "generalFeat", "ancestryFeat", "classFeature", "spell", "abilityBoost", "proficiency", "language"]>;
                filter: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
                allowDuplicates: z.ZodDefault<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                count: number;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                allowDuplicates: boolean;
                filter?: any;
            }, {
                id: string;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                filter?: any;
                count?: number | undefined;
                allowDuplicates?: boolean | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantChoice";
            choice: {
                id: string;
                count: number;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                allowDuplicates: boolean;
                filter?: any;
            };
        }, {
            kind: "grantChoice";
            choice: {
                id: string;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                filter?: any;
                count?: number | undefined;
                allowDuplicates?: boolean | undefined;
            };
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"addSpeed">;
            speedType: z.ZodEnum<["land", "burrow", "climb", "fly", "swim"]>;
            value: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        }, {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantSpell">;
            spellId: z.ZodString;
            tradition: z.ZodOptional<z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>>;
            rank: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        }, {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantSpellSlot">;
            rank: z.ZodNumber;
            count: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        }, {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"modifyResource">;
            resource: z.ZodEnum<["focusPoints", "hitPoints", "resolve", "classDc", "heroPoints"]>;
            value: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        }, {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantFlag">;
            flag: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            kind: "grantFlag";
            flag: string;
        }, {
            kind: "grantFlag";
            flag: string;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"removeFlag">;
            flag: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            kind: "removeFlag";
            flag: string;
        }, {
            kind: "removeFlag";
            flag: string;
        }>]>, "many">>;
    } & {
        type: z.ZodLiteral<"heritage">;
        ancestryId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        type: "heritage";
        name: string;
        source: {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        };
        rarity: "common" | "uncommon" | "rare" | "unique";
        traits: string[];
        tags: string[];
        effects: ({
            kind: "grantFeat";
            featId: string;
            required: boolean;
            level?: number | undefined;
        } | {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "abilityBoost";
            mode: {
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            } | {
                value: number;
                type: "any";
                count: number;
            };
        } | {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking: "max" | "stack";
        } | {
            kind: "grantTrait";
            traitId: string;
        } | {
            kind: "grantLanguage";
            languageId: string;
        } | {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        } | {
            kind: "grantChoice";
            choice: {
                id: string;
                count: number;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                allowDuplicates: boolean;
                filter?: any;
            };
        } | {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        } | {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        } | {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        } | {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        } | {
            kind: "grantFlag";
            flag: string;
        } | {
            kind: "removeFlag";
            flag: string;
        })[];
        ancestryId: string;
        slug?: string | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        version?: {
            major: number;
            minor: number;
            patch: number;
        } | undefined;
        prerequisites?: any;
    }, {
        id: string;
        type: "heritage";
        name: string;
        source: {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        };
        ancestryId: string;
        slug?: string | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        version?: {
            major?: number | undefined;
            minor?: number | undefined;
            patch?: number | undefined;
        } | undefined;
        rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
        traits?: string[] | undefined;
        tags?: string[] | undefined;
        prerequisites?: any;
        effects?: ({
            kind: "grantFeat";
            featId: string;
            level?: number | undefined;
            required?: boolean | undefined;
        } | {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "abilityBoost";
            mode: {
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            } | {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            } | {
                type: "any";
                count: number;
                value?: number | undefined;
            };
        } | {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking?: "max" | "stack" | undefined;
        } | {
            kind: "grantTrait";
            traitId: string;
        } | {
            kind: "grantLanguage";
            languageId: string;
        } | {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        } | {
            kind: "grantChoice";
            choice: {
                id: string;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                filter?: any;
                count?: number | undefined;
                allowDuplicates?: boolean | undefined;
            };
        } | {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        } | {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        } | {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        } | {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        } | {
            kind: "grantFlag";
            flag: string;
        } | {
            kind: "removeFlag";
            flag: string;
        })[] | undefined;
    }>, z.ZodObject<{
        id: z.ZodString;
        slug: z.ZodOptional<z.ZodString>;
        name: z.ZodString;
        summary: z.ZodOptional<z.ZodString>;
        description: z.ZodOptional<z.ZodString>;
        source: z.ZodObject<{
            id: z.ZodString;
            page: z.ZodOptional<z.ZodNumber>;
            license: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        }, {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        }>;
        version: z.ZodOptional<z.ZodObject<{
            major: z.ZodDefault<z.ZodNumber>;
            minor: z.ZodDefault<z.ZodNumber>;
            patch: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            major: number;
            minor: number;
            patch: number;
        }, {
            major?: number | undefined;
            minor?: number | undefined;
            patch?: number | undefined;
        }>>;
        rarity: z.ZodDefault<z.ZodEnum<["common", "uncommon", "rare", "unique"]>>;
        traits: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        prerequisites: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
        effects: z.ZodDefault<z.ZodArray<z.ZodDiscriminatedUnion<"kind", [z.ZodObject<{
            kind: z.ZodLiteral<"grantFeat">;
            featId: z.ZodString;
            level: z.ZodOptional<z.ZodNumber>;
            required: z.ZodDefault<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantFeat";
            featId: string;
            required: boolean;
            level?: number | undefined;
        }, {
            kind: "grantFeat";
            featId: string;
            level?: number | undefined;
            required?: boolean | undefined;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantProficiency">;
            target: z.ZodString;
            rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }, {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"setProficiency">;
            target: z.ZodString;
            rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
        }, "strip", z.ZodTypeAny, {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }, {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"abilityBoost">;
            mode: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"fixed">;
                abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
                value: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            }, {
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"choice">;
                count: z.ZodNumber;
                options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
                value: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            }, {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"any">;
                count: z.ZodNumber;
                value: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "any";
                count: number;
            }, {
                type: "any";
                count: number;
                value?: number | undefined;
            }>]>;
        }, "strip", z.ZodTypeAny, {
            kind: "abilityBoost";
            mode: {
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            } | {
                value: number;
                type: "any";
                count: number;
            };
        }, {
            kind: "abilityBoost";
            mode: {
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            } | {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            } | {
                type: "any";
                count: number;
                value?: number | undefined;
            };
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"abilityFlaw">;
            abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
        }, "strip", z.ZodTypeAny, {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        }, {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"addModifier">;
            target: z.ZodString;
            modifierType: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
            value: z.ZodNumber;
            label: z.ZodString;
            stacking: z.ZodDefault<z.ZodEnum<["max", "stack"]>>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking: "max" | "stack";
        }, {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking?: "max" | "stack" | undefined;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantTrait">;
            traitId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            kind: "grantTrait";
            traitId: string;
        }, {
            kind: "grantTrait";
            traitId: string;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantLanguage">;
            languageId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            kind: "grantLanguage";
            languageId: string;
        }, {
            kind: "grantLanguage";
            languageId: string;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantSense">;
            senseId: z.ZodString;
            range: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        }, {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantChoice">;
            choice: z.ZodObject<{
                id: z.ZodString;
                label: z.ZodString;
                count: z.ZodDefault<z.ZodNumber>;
                scope: z.ZodEnum<["skill", "skillFeat", "classFeat", "generalFeat", "ancestryFeat", "classFeature", "spell", "abilityBoost", "proficiency", "language"]>;
                filter: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
                allowDuplicates: z.ZodDefault<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                count: number;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                allowDuplicates: boolean;
                filter?: any;
            }, {
                id: string;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                filter?: any;
                count?: number | undefined;
                allowDuplicates?: boolean | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantChoice";
            choice: {
                id: string;
                count: number;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                allowDuplicates: boolean;
                filter?: any;
            };
        }, {
            kind: "grantChoice";
            choice: {
                id: string;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                filter?: any;
                count?: number | undefined;
                allowDuplicates?: boolean | undefined;
            };
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"addSpeed">;
            speedType: z.ZodEnum<["land", "burrow", "climb", "fly", "swim"]>;
            value: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        }, {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantSpell">;
            spellId: z.ZodString;
            tradition: z.ZodOptional<z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>>;
            rank: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        }, {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantSpellSlot">;
            rank: z.ZodNumber;
            count: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        }, {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"modifyResource">;
            resource: z.ZodEnum<["focusPoints", "hitPoints", "resolve", "classDc", "heroPoints"]>;
            value: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        }, {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantFlag">;
            flag: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            kind: "grantFlag";
            flag: string;
        }, {
            kind: "grantFlag";
            flag: string;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"removeFlag">;
            flag: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            kind: "removeFlag";
            flag: string;
        }, {
            kind: "removeFlag";
            flag: string;
        }>]>, "many">>;
    } & {
        type: z.ZodLiteral<"background">;
        boosts: z.ZodDefault<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"fixed">;
            abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        }, {
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"choice">;
            count: z.ZodNumber;
            options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        }, {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"any">;
            count: z.ZodNumber;
            value: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            type: "any";
            count: number;
        }, {
            type: "any";
            count: number;
            value?: number | undefined;
        }>]>, "many">>;
        skillTraining: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        feat: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        type: "background";
        name: string;
        source: {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        };
        rarity: "common" | "uncommon" | "rare" | "unique";
        traits: string[];
        tags: string[];
        effects: ({
            kind: "grantFeat";
            featId: string;
            required: boolean;
            level?: number | undefined;
        } | {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "abilityBoost";
            mode: {
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            } | {
                value: number;
                type: "any";
                count: number;
            };
        } | {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking: "max" | "stack";
        } | {
            kind: "grantTrait";
            traitId: string;
        } | {
            kind: "grantLanguage";
            languageId: string;
        } | {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        } | {
            kind: "grantChoice";
            choice: {
                id: string;
                count: number;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                allowDuplicates: boolean;
                filter?: any;
            };
        } | {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        } | {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        } | {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        } | {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        } | {
            kind: "grantFlag";
            flag: string;
        } | {
            kind: "removeFlag";
            flag: string;
        })[];
        boosts: ({
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        } | {
            value: number;
            type: "any";
            count: number;
        })[];
        skillTraining: string[];
        slug?: string | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        version?: {
            major: number;
            minor: number;
            patch: number;
        } | undefined;
        prerequisites?: any;
        feat?: string | undefined;
    }, {
        id: string;
        type: "background";
        name: string;
        source: {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        };
        slug?: string | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        version?: {
            major?: number | undefined;
            minor?: number | undefined;
            patch?: number | undefined;
        } | undefined;
        rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
        traits?: string[] | undefined;
        tags?: string[] | undefined;
        prerequisites?: any;
        effects?: ({
            kind: "grantFeat";
            featId: string;
            level?: number | undefined;
            required?: boolean | undefined;
        } | {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "abilityBoost";
            mode: {
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            } | {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            } | {
                type: "any";
                count: number;
                value?: number | undefined;
            };
        } | {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking?: "max" | "stack" | undefined;
        } | {
            kind: "grantTrait";
            traitId: string;
        } | {
            kind: "grantLanguage";
            languageId: string;
        } | {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        } | {
            kind: "grantChoice";
            choice: {
                id: string;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                filter?: any;
                count?: number | undefined;
                allowDuplicates?: boolean | undefined;
            };
        } | {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        } | {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        } | {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        } | {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        } | {
            kind: "grantFlag";
            flag: string;
        } | {
            kind: "removeFlag";
            flag: string;
        })[] | undefined;
        boosts?: ({
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        } | {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        } | {
            type: "any";
            count: number;
            value?: number | undefined;
        })[] | undefined;
        skillTraining?: string[] | undefined;
        feat?: string | undefined;
    }>, z.ZodObject<{
        id: z.ZodString;
        slug: z.ZodOptional<z.ZodString>;
        name: z.ZodString;
        summary: z.ZodOptional<z.ZodString>;
        description: z.ZodOptional<z.ZodString>;
        source: z.ZodObject<{
            id: z.ZodString;
            page: z.ZodOptional<z.ZodNumber>;
            license: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        }, {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        }>;
        version: z.ZodOptional<z.ZodObject<{
            major: z.ZodDefault<z.ZodNumber>;
            minor: z.ZodDefault<z.ZodNumber>;
            patch: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            major: number;
            minor: number;
            patch: number;
        }, {
            major?: number | undefined;
            minor?: number | undefined;
            patch?: number | undefined;
        }>>;
        rarity: z.ZodDefault<z.ZodEnum<["common", "uncommon", "rare", "unique"]>>;
        traits: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        prerequisites: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
        effects: z.ZodDefault<z.ZodArray<z.ZodDiscriminatedUnion<"kind", [z.ZodObject<{
            kind: z.ZodLiteral<"grantFeat">;
            featId: z.ZodString;
            level: z.ZodOptional<z.ZodNumber>;
            required: z.ZodDefault<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantFeat";
            featId: string;
            required: boolean;
            level?: number | undefined;
        }, {
            kind: "grantFeat";
            featId: string;
            level?: number | undefined;
            required?: boolean | undefined;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantProficiency">;
            target: z.ZodString;
            rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }, {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"setProficiency">;
            target: z.ZodString;
            rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
        }, "strip", z.ZodTypeAny, {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }, {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"abilityBoost">;
            mode: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"fixed">;
                abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
                value: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            }, {
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"choice">;
                count: z.ZodNumber;
                options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
                value: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            }, {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"any">;
                count: z.ZodNumber;
                value: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "any";
                count: number;
            }, {
                type: "any";
                count: number;
                value?: number | undefined;
            }>]>;
        }, "strip", z.ZodTypeAny, {
            kind: "abilityBoost";
            mode: {
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            } | {
                value: number;
                type: "any";
                count: number;
            };
        }, {
            kind: "abilityBoost";
            mode: {
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            } | {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            } | {
                type: "any";
                count: number;
                value?: number | undefined;
            };
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"abilityFlaw">;
            abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
        }, "strip", z.ZodTypeAny, {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        }, {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"addModifier">;
            target: z.ZodString;
            modifierType: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
            value: z.ZodNumber;
            label: z.ZodString;
            stacking: z.ZodDefault<z.ZodEnum<["max", "stack"]>>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking: "max" | "stack";
        }, {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking?: "max" | "stack" | undefined;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantTrait">;
            traitId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            kind: "grantTrait";
            traitId: string;
        }, {
            kind: "grantTrait";
            traitId: string;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantLanguage">;
            languageId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            kind: "grantLanguage";
            languageId: string;
        }, {
            kind: "grantLanguage";
            languageId: string;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantSense">;
            senseId: z.ZodString;
            range: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        }, {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantChoice">;
            choice: z.ZodObject<{
                id: z.ZodString;
                label: z.ZodString;
                count: z.ZodDefault<z.ZodNumber>;
                scope: z.ZodEnum<["skill", "skillFeat", "classFeat", "generalFeat", "ancestryFeat", "classFeature", "spell", "abilityBoost", "proficiency", "language"]>;
                filter: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
                allowDuplicates: z.ZodDefault<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                count: number;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                allowDuplicates: boolean;
                filter?: any;
            }, {
                id: string;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                filter?: any;
                count?: number | undefined;
                allowDuplicates?: boolean | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantChoice";
            choice: {
                id: string;
                count: number;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                allowDuplicates: boolean;
                filter?: any;
            };
        }, {
            kind: "grantChoice";
            choice: {
                id: string;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                filter?: any;
                count?: number | undefined;
                allowDuplicates?: boolean | undefined;
            };
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"addSpeed">;
            speedType: z.ZodEnum<["land", "burrow", "climb", "fly", "swim"]>;
            value: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        }, {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantSpell">;
            spellId: z.ZodString;
            tradition: z.ZodOptional<z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>>;
            rank: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        }, {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantSpellSlot">;
            rank: z.ZodNumber;
            count: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        }, {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"modifyResource">;
            resource: z.ZodEnum<["focusPoints", "hitPoints", "resolve", "classDc", "heroPoints"]>;
            value: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        }, {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantFlag">;
            flag: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            kind: "grantFlag";
            flag: string;
        }, {
            kind: "grantFlag";
            flag: string;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"removeFlag">;
            flag: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            kind: "removeFlag";
            flag: string;
        }, {
            kind: "removeFlag";
            flag: string;
        }>]>, "many">>;
    } & {
        type: z.ZodLiteral<"class">;
        keyAbility: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
        hitPointsPerLevel: z.ZodNumber;
        proficiencies: z.ZodObject<{
            perception: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
            savingThrows: z.ZodObject<{
                fortitude: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
                reflex: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
                will: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
            }, "strip", z.ZodTypeAny, {
                fortitude: "untrained" | "trained" | "expert" | "master" | "legendary";
                reflex: "untrained" | "trained" | "expert" | "master" | "legendary";
                will: "untrained" | "trained" | "expert" | "master" | "legendary";
            }, {
                fortitude: "untrained" | "trained" | "expert" | "master" | "legendary";
                reflex: "untrained" | "trained" | "expert" | "master" | "legendary";
                will: "untrained" | "trained" | "expert" | "master" | "legendary";
            }>;
            skills: z.ZodObject<{
                trained: z.ZodDefault<z.ZodNumber>;
                additionalChoices: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
            }, "strip", z.ZodTypeAny, {
                trained: number;
                additionalChoices: string[];
            }, {
                trained?: number | undefined;
                additionalChoices?: string[] | undefined;
            }>;
            attacks: z.ZodDefault<z.ZodObject<{
                simple: z.ZodOptional<z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
                martial: z.ZodOptional<z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
                advanced: z.ZodOptional<z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
                unarmed: z.ZodOptional<z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
            }, "strip", z.ZodTypeAny, {
                simple?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                martial?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                advanced?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                unarmed?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            }, {
                simple?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                martial?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                advanced?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                unarmed?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            }>>;
            defense: z.ZodDefault<z.ZodObject<{
                unarmored: z.ZodOptional<z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
                light: z.ZodOptional<z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
                medium: z.ZodOptional<z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
                heavy: z.ZodOptional<z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
                shields: z.ZodOptional<z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
            }, "strip", z.ZodTypeAny, {
                medium?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                unarmored?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                light?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                heavy?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                shields?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            }, {
                medium?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                unarmored?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                light?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                heavy?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                shields?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            }>>;
            classDC: z.ZodOptional<z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
        }, "strip", z.ZodTypeAny, {
            perception: "untrained" | "trained" | "expert" | "master" | "legendary";
            savingThrows: {
                fortitude: "untrained" | "trained" | "expert" | "master" | "legendary";
                reflex: "untrained" | "trained" | "expert" | "master" | "legendary";
                will: "untrained" | "trained" | "expert" | "master" | "legendary";
            };
            skills: {
                trained: number;
                additionalChoices: string[];
            };
            attacks: {
                simple?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                martial?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                advanced?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                unarmed?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            };
            defense: {
                medium?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                unarmored?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                light?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                heavy?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                shields?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            };
            classDC?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        }, {
            perception: "untrained" | "trained" | "expert" | "master" | "legendary";
            savingThrows: {
                fortitude: "untrained" | "trained" | "expert" | "master" | "legendary";
                reflex: "untrained" | "trained" | "expert" | "master" | "legendary";
                will: "untrained" | "trained" | "expert" | "master" | "legendary";
            };
            skills: {
                trained?: number | undefined;
                additionalChoices?: string[] | undefined;
            };
            attacks?: {
                simple?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                martial?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                advanced?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                unarmed?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            } | undefined;
            defense?: {
                medium?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                unarmored?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                light?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                heavy?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                shields?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            } | undefined;
            classDC?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        }>;
        progression: z.ZodRecord<z.ZodString, z.ZodObject<{
            grants: z.ZodDefault<z.ZodArray<z.ZodDiscriminatedUnion<"kind", [z.ZodObject<{
                kind: z.ZodLiteral<"grantFeat">;
                featId: z.ZodString;
                level: z.ZodOptional<z.ZodNumber>;
                required: z.ZodDefault<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                kind: "grantFeat";
                featId: string;
                required: boolean;
                level?: number | undefined;
            }, {
                kind: "grantFeat";
                featId: string;
                level?: number | undefined;
                required?: boolean | undefined;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantProficiency">;
                target: z.ZodString;
                rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
            }, "strip", z.ZodTypeAny, {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            }, {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"setProficiency">;
                target: z.ZodString;
                rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
            }, "strip", z.ZodTypeAny, {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            }, {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"abilityBoost">;
                mode: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                    type: z.ZodLiteral<"fixed">;
                    abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
                    value: z.ZodDefault<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    value: number;
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                }, {
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    value?: number | undefined;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"choice">;
                    count: z.ZodNumber;
                    options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
                    value: z.ZodDefault<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    value: number;
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                }, {
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                    value?: number | undefined;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"any">;
                    count: z.ZodNumber;
                    value: z.ZodDefault<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    value: number;
                    type: "any";
                    count: number;
                }, {
                    type: "any";
                    count: number;
                    value?: number | undefined;
                }>]>;
            }, "strip", z.ZodTypeAny, {
                kind: "abilityBoost";
                mode: {
                    value: number;
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                } | {
                    value: number;
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                } | {
                    value: number;
                    type: "any";
                    count: number;
                };
            }, {
                kind: "abilityBoost";
                mode: {
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    value?: number | undefined;
                } | {
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                    value?: number | undefined;
                } | {
                    type: "any";
                    count: number;
                    value?: number | undefined;
                };
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"abilityFlaw">;
                abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            }, "strip", z.ZodTypeAny, {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            }, {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"addModifier">;
                target: z.ZodString;
                modifierType: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
                value: z.ZodNumber;
                label: z.ZodString;
                stacking: z.ZodDefault<z.ZodEnum<["max", "stack"]>>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking: "max" | "stack";
            }, {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking?: "max" | "stack" | undefined;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantTrait">;
                traitId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                kind: "grantTrait";
                traitId: string;
            }, {
                kind: "grantTrait";
                traitId: string;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantLanguage">;
                languageId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                kind: "grantLanguage";
                languageId: string;
            }, {
                kind: "grantLanguage";
                languageId: string;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantSense">;
                senseId: z.ZodString;
                range: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            }, {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantChoice">;
                choice: z.ZodObject<{
                    id: z.ZodString;
                    label: z.ZodString;
                    count: z.ZodDefault<z.ZodNumber>;
                    scope: z.ZodEnum<["skill", "skillFeat", "classFeat", "generalFeat", "ancestryFeat", "classFeature", "spell", "abilityBoost", "proficiency", "language"]>;
                    filter: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
                    allowDuplicates: z.ZodDefault<z.ZodBoolean>;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                }, {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                kind: "grantChoice";
                choice: {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                };
            }, {
                kind: "grantChoice";
                choice: {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                };
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"addSpeed">;
                speedType: z.ZodEnum<["land", "burrow", "climb", "fly", "swim"]>;
                value: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            }, {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantSpell">;
                spellId: z.ZodString;
                tradition: z.ZodOptional<z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>>;
                rank: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            }, {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantSpellSlot">;
                rank: z.ZodNumber;
                count: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            }, {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"modifyResource">;
                resource: z.ZodEnum<["focusPoints", "hitPoints", "resolve", "classDc", "heroPoints"]>;
                value: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            }, {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantFlag">;
                flag: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                kind: "grantFlag";
                flag: string;
            }, {
                kind: "grantFlag";
                flag: string;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"removeFlag">;
                flag: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                kind: "removeFlag";
                flag: string;
            }, {
                kind: "removeFlag";
                flag: string;
            }>]>, "many">>;
            choices: z.ZodDefault<z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                label: z.ZodString;
                count: z.ZodDefault<z.ZodNumber>;
                scope: z.ZodEnum<["skill", "skillFeat", "classFeat", "generalFeat", "ancestryFeat", "classFeature", "spell", "abilityBoost", "proficiency", "language"]>;
                filter: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
                allowDuplicates: z.ZodDefault<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                count: number;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                allowDuplicates: boolean;
                filter?: any;
            }, {
                id: string;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                filter?: any;
                count?: number | undefined;
                allowDuplicates?: boolean | undefined;
            }>, "many">>;
            proficiencyBumps: z.ZodDefault<z.ZodArray<z.ZodObject<{
                target: z.ZodString;
                rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
            }, "strip", z.ZodTypeAny, {
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            }, {
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            }>, "many">>;
            featureRefs: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            choices: {
                id: string;
                count: number;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                allowDuplicates: boolean;
                filter?: any;
            }[];
            grants: ({
                kind: "grantFeat";
                featId: string;
                required: boolean;
                level?: number | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    value: number;
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                } | {
                    value: number;
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                } | {
                    value: number;
                    type: "any";
                    count: number;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking: "max" | "stack";
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[];
            proficiencyBumps: {
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            }[];
            featureRefs: string[];
        }, {
            choices?: {
                id: string;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                filter?: any;
                count?: number | undefined;
                allowDuplicates?: boolean | undefined;
            }[] | undefined;
            grants?: ({
                kind: "grantFeat";
                featId: string;
                level?: number | undefined;
                required?: boolean | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    value?: number | undefined;
                } | {
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                    value?: number | undefined;
                } | {
                    type: "any";
                    count: number;
                    value?: number | undefined;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking?: "max" | "stack" | undefined;
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[] | undefined;
            proficiencyBumps?: {
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            }[] | undefined;
            featureRefs?: string[] | undefined;
        }>>;
        spellcasting: z.ZodOptional<z.ZodObject<{
            tradition: z.ZodOptional<z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>>;
            type: z.ZodOptional<z.ZodEnum<["prepared", "spontaneous", "focus", "innate"]>>;
        }, "strip", z.ZodTypeAny, {
            type?: "focus" | "prepared" | "spontaneous" | "innate" | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        }, {
            type?: "focus" | "prepared" | "spontaneous" | "innate" | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        type: "class";
        name: string;
        source: {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        };
        rarity: "common" | "uncommon" | "rare" | "unique";
        traits: string[];
        tags: string[];
        effects: ({
            kind: "grantFeat";
            featId: string;
            required: boolean;
            level?: number | undefined;
        } | {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "abilityBoost";
            mode: {
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            } | {
                value: number;
                type: "any";
                count: number;
            };
        } | {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking: "max" | "stack";
        } | {
            kind: "grantTrait";
            traitId: string;
        } | {
            kind: "grantLanguage";
            languageId: string;
        } | {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        } | {
            kind: "grantChoice";
            choice: {
                id: string;
                count: number;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                allowDuplicates: boolean;
                filter?: any;
            };
        } | {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        } | {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        } | {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        } | {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        } | {
            kind: "grantFlag";
            flag: string;
        } | {
            kind: "removeFlag";
            flag: string;
        })[];
        keyAbility: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        hitPointsPerLevel: number;
        proficiencies: {
            perception: "untrained" | "trained" | "expert" | "master" | "legendary";
            savingThrows: {
                fortitude: "untrained" | "trained" | "expert" | "master" | "legendary";
                reflex: "untrained" | "trained" | "expert" | "master" | "legendary";
                will: "untrained" | "trained" | "expert" | "master" | "legendary";
            };
            skills: {
                trained: number;
                additionalChoices: string[];
            };
            attacks: {
                simple?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                martial?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                advanced?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                unarmed?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            };
            defense: {
                medium?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                unarmored?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                light?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                heavy?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                shields?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            };
            classDC?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        };
        progression: Record<string, {
            choices: {
                id: string;
                count: number;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                allowDuplicates: boolean;
                filter?: any;
            }[];
            grants: ({
                kind: "grantFeat";
                featId: string;
                required: boolean;
                level?: number | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    value: number;
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                } | {
                    value: number;
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                } | {
                    value: number;
                    type: "any";
                    count: number;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking: "max" | "stack";
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[];
            proficiencyBumps: {
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            }[];
            featureRefs: string[];
        }>;
        slug?: string | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        version?: {
            major: number;
            minor: number;
            patch: number;
        } | undefined;
        prerequisites?: any;
        spellcasting?: {
            type?: "focus" | "prepared" | "spontaneous" | "innate" | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        } | undefined;
    }, {
        id: string;
        type: "class";
        name: string;
        source: {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        };
        keyAbility: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        hitPointsPerLevel: number;
        proficiencies: {
            perception: "untrained" | "trained" | "expert" | "master" | "legendary";
            savingThrows: {
                fortitude: "untrained" | "trained" | "expert" | "master" | "legendary";
                reflex: "untrained" | "trained" | "expert" | "master" | "legendary";
                will: "untrained" | "trained" | "expert" | "master" | "legendary";
            };
            skills: {
                trained?: number | undefined;
                additionalChoices?: string[] | undefined;
            };
            attacks?: {
                simple?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                martial?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                advanced?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                unarmed?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            } | undefined;
            defense?: {
                medium?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                unarmored?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                light?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                heavy?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                shields?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            } | undefined;
            classDC?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        };
        progression: Record<string, {
            choices?: {
                id: string;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                filter?: any;
                count?: number | undefined;
                allowDuplicates?: boolean | undefined;
            }[] | undefined;
            grants?: ({
                kind: "grantFeat";
                featId: string;
                level?: number | undefined;
                required?: boolean | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    value?: number | undefined;
                } | {
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                    value?: number | undefined;
                } | {
                    type: "any";
                    count: number;
                    value?: number | undefined;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking?: "max" | "stack" | undefined;
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[] | undefined;
            proficiencyBumps?: {
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            }[] | undefined;
            featureRefs?: string[] | undefined;
        }>;
        slug?: string | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        version?: {
            major?: number | undefined;
            minor?: number | undefined;
            patch?: number | undefined;
        } | undefined;
        rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
        traits?: string[] | undefined;
        tags?: string[] | undefined;
        prerequisites?: any;
        effects?: ({
            kind: "grantFeat";
            featId: string;
            level?: number | undefined;
            required?: boolean | undefined;
        } | {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "abilityBoost";
            mode: {
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            } | {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            } | {
                type: "any";
                count: number;
                value?: number | undefined;
            };
        } | {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking?: "max" | "stack" | undefined;
        } | {
            kind: "grantTrait";
            traitId: string;
        } | {
            kind: "grantLanguage";
            languageId: string;
        } | {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        } | {
            kind: "grantChoice";
            choice: {
                id: string;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                filter?: any;
                count?: number | undefined;
                allowDuplicates?: boolean | undefined;
            };
        } | {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        } | {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        } | {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        } | {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        } | {
            kind: "grantFlag";
            flag: string;
        } | {
            kind: "removeFlag";
            flag: string;
        })[] | undefined;
        spellcasting?: {
            type?: "focus" | "prepared" | "spontaneous" | "innate" | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        } | undefined;
    }>, z.ZodObject<{
        id: z.ZodString;
        slug: z.ZodOptional<z.ZodString>;
        name: z.ZodString;
        summary: z.ZodOptional<z.ZodString>;
        description: z.ZodOptional<z.ZodString>;
        source: z.ZodObject<{
            id: z.ZodString;
            page: z.ZodOptional<z.ZodNumber>;
            license: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        }, {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        }>;
        version: z.ZodOptional<z.ZodObject<{
            major: z.ZodDefault<z.ZodNumber>;
            minor: z.ZodDefault<z.ZodNumber>;
            patch: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            major: number;
            minor: number;
            patch: number;
        }, {
            major?: number | undefined;
            minor?: number | undefined;
            patch?: number | undefined;
        }>>;
        rarity: z.ZodDefault<z.ZodEnum<["common", "uncommon", "rare", "unique"]>>;
        traits: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        prerequisites: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
        effects: z.ZodDefault<z.ZodArray<z.ZodDiscriminatedUnion<"kind", [z.ZodObject<{
            kind: z.ZodLiteral<"grantFeat">;
            featId: z.ZodString;
            level: z.ZodOptional<z.ZodNumber>;
            required: z.ZodDefault<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantFeat";
            featId: string;
            required: boolean;
            level?: number | undefined;
        }, {
            kind: "grantFeat";
            featId: string;
            level?: number | undefined;
            required?: boolean | undefined;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantProficiency">;
            target: z.ZodString;
            rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }, {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"setProficiency">;
            target: z.ZodString;
            rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
        }, "strip", z.ZodTypeAny, {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }, {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"abilityBoost">;
            mode: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"fixed">;
                abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
                value: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            }, {
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"choice">;
                count: z.ZodNumber;
                options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
                value: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            }, {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"any">;
                count: z.ZodNumber;
                value: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "any";
                count: number;
            }, {
                type: "any";
                count: number;
                value?: number | undefined;
            }>]>;
        }, "strip", z.ZodTypeAny, {
            kind: "abilityBoost";
            mode: {
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            } | {
                value: number;
                type: "any";
                count: number;
            };
        }, {
            kind: "abilityBoost";
            mode: {
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            } | {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            } | {
                type: "any";
                count: number;
                value?: number | undefined;
            };
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"abilityFlaw">;
            abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
        }, "strip", z.ZodTypeAny, {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        }, {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"addModifier">;
            target: z.ZodString;
            modifierType: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
            value: z.ZodNumber;
            label: z.ZodString;
            stacking: z.ZodDefault<z.ZodEnum<["max", "stack"]>>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking: "max" | "stack";
        }, {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking?: "max" | "stack" | undefined;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantTrait">;
            traitId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            kind: "grantTrait";
            traitId: string;
        }, {
            kind: "grantTrait";
            traitId: string;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantLanguage">;
            languageId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            kind: "grantLanguage";
            languageId: string;
        }, {
            kind: "grantLanguage";
            languageId: string;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantSense">;
            senseId: z.ZodString;
            range: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        }, {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantChoice">;
            choice: z.ZodObject<{
                id: z.ZodString;
                label: z.ZodString;
                count: z.ZodDefault<z.ZodNumber>;
                scope: z.ZodEnum<["skill", "skillFeat", "classFeat", "generalFeat", "ancestryFeat", "classFeature", "spell", "abilityBoost", "proficiency", "language"]>;
                filter: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
                allowDuplicates: z.ZodDefault<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                count: number;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                allowDuplicates: boolean;
                filter?: any;
            }, {
                id: string;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                filter?: any;
                count?: number | undefined;
                allowDuplicates?: boolean | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantChoice";
            choice: {
                id: string;
                count: number;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                allowDuplicates: boolean;
                filter?: any;
            };
        }, {
            kind: "grantChoice";
            choice: {
                id: string;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                filter?: any;
                count?: number | undefined;
                allowDuplicates?: boolean | undefined;
            };
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"addSpeed">;
            speedType: z.ZodEnum<["land", "burrow", "climb", "fly", "swim"]>;
            value: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        }, {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantSpell">;
            spellId: z.ZodString;
            tradition: z.ZodOptional<z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>>;
            rank: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        }, {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantSpellSlot">;
            rank: z.ZodNumber;
            count: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        }, {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"modifyResource">;
            resource: z.ZodEnum<["focusPoints", "hitPoints", "resolve", "classDc", "heroPoints"]>;
            value: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        }, {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantFlag">;
            flag: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            kind: "grantFlag";
            flag: string;
        }, {
            kind: "grantFlag";
            flag: string;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"removeFlag">;
            flag: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            kind: "removeFlag";
            flag: string;
        }, {
            kind: "removeFlag";
            flag: string;
        }>]>, "many">>;
    } & {
        type: z.ZodLiteral<"archetype">;
        dedicationFeatId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        type: "archetype";
        name: string;
        source: {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        };
        rarity: "common" | "uncommon" | "rare" | "unique";
        traits: string[];
        tags: string[];
        effects: ({
            kind: "grantFeat";
            featId: string;
            required: boolean;
            level?: number | undefined;
        } | {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "abilityBoost";
            mode: {
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            } | {
                value: number;
                type: "any";
                count: number;
            };
        } | {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking: "max" | "stack";
        } | {
            kind: "grantTrait";
            traitId: string;
        } | {
            kind: "grantLanguage";
            languageId: string;
        } | {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        } | {
            kind: "grantChoice";
            choice: {
                id: string;
                count: number;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                allowDuplicates: boolean;
                filter?: any;
            };
        } | {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        } | {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        } | {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        } | {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        } | {
            kind: "grantFlag";
            flag: string;
        } | {
            kind: "removeFlag";
            flag: string;
        })[];
        dedicationFeatId: string;
        slug?: string | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        version?: {
            major: number;
            minor: number;
            patch: number;
        } | undefined;
        prerequisites?: any;
    }, {
        id: string;
        type: "archetype";
        name: string;
        source: {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        };
        dedicationFeatId: string;
        slug?: string | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        version?: {
            major?: number | undefined;
            minor?: number | undefined;
            patch?: number | undefined;
        } | undefined;
        rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
        traits?: string[] | undefined;
        tags?: string[] | undefined;
        prerequisites?: any;
        effects?: ({
            kind: "grantFeat";
            featId: string;
            level?: number | undefined;
            required?: boolean | undefined;
        } | {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "abilityBoost";
            mode: {
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            } | {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            } | {
                type: "any";
                count: number;
                value?: number | undefined;
            };
        } | {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking?: "max" | "stack" | undefined;
        } | {
            kind: "grantTrait";
            traitId: string;
        } | {
            kind: "grantLanguage";
            languageId: string;
        } | {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        } | {
            kind: "grantChoice";
            choice: {
                id: string;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                filter?: any;
                count?: number | undefined;
                allowDuplicates?: boolean | undefined;
            };
        } | {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        } | {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        } | {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        } | {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        } | {
            kind: "grantFlag";
            flag: string;
        } | {
            kind: "removeFlag";
            flag: string;
        })[] | undefined;
    }>, z.ZodObject<{
        id: z.ZodString;
        slug: z.ZodOptional<z.ZodString>;
        name: z.ZodString;
        summary: z.ZodOptional<z.ZodString>;
        description: z.ZodOptional<z.ZodString>;
        source: z.ZodObject<{
            id: z.ZodString;
            page: z.ZodOptional<z.ZodNumber>;
            license: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        }, {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        }>;
        version: z.ZodOptional<z.ZodObject<{
            major: z.ZodDefault<z.ZodNumber>;
            minor: z.ZodDefault<z.ZodNumber>;
            patch: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            major: number;
            minor: number;
            patch: number;
        }, {
            major?: number | undefined;
            minor?: number | undefined;
            patch?: number | undefined;
        }>>;
        rarity: z.ZodDefault<z.ZodEnum<["common", "uncommon", "rare", "unique"]>>;
        traits: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        prerequisites: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
        effects: z.ZodDefault<z.ZodArray<z.ZodDiscriminatedUnion<"kind", [z.ZodObject<{
            kind: z.ZodLiteral<"grantFeat">;
            featId: z.ZodString;
            level: z.ZodOptional<z.ZodNumber>;
            required: z.ZodDefault<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantFeat";
            featId: string;
            required: boolean;
            level?: number | undefined;
        }, {
            kind: "grantFeat";
            featId: string;
            level?: number | undefined;
            required?: boolean | undefined;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantProficiency">;
            target: z.ZodString;
            rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }, {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"setProficiency">;
            target: z.ZodString;
            rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
        }, "strip", z.ZodTypeAny, {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }, {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"abilityBoost">;
            mode: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"fixed">;
                abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
                value: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            }, {
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"choice">;
                count: z.ZodNumber;
                options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
                value: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            }, {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"any">;
                count: z.ZodNumber;
                value: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "any";
                count: number;
            }, {
                type: "any";
                count: number;
                value?: number | undefined;
            }>]>;
        }, "strip", z.ZodTypeAny, {
            kind: "abilityBoost";
            mode: {
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            } | {
                value: number;
                type: "any";
                count: number;
            };
        }, {
            kind: "abilityBoost";
            mode: {
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            } | {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            } | {
                type: "any";
                count: number;
                value?: number | undefined;
            };
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"abilityFlaw">;
            abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
        }, "strip", z.ZodTypeAny, {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        }, {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"addModifier">;
            target: z.ZodString;
            modifierType: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
            value: z.ZodNumber;
            label: z.ZodString;
            stacking: z.ZodDefault<z.ZodEnum<["max", "stack"]>>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking: "max" | "stack";
        }, {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking?: "max" | "stack" | undefined;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantTrait">;
            traitId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            kind: "grantTrait";
            traitId: string;
        }, {
            kind: "grantTrait";
            traitId: string;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantLanguage">;
            languageId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            kind: "grantLanguage";
            languageId: string;
        }, {
            kind: "grantLanguage";
            languageId: string;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantSense">;
            senseId: z.ZodString;
            range: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        }, {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantChoice">;
            choice: z.ZodObject<{
                id: z.ZodString;
                label: z.ZodString;
                count: z.ZodDefault<z.ZodNumber>;
                scope: z.ZodEnum<["skill", "skillFeat", "classFeat", "generalFeat", "ancestryFeat", "classFeature", "spell", "abilityBoost", "proficiency", "language"]>;
                filter: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
                allowDuplicates: z.ZodDefault<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                count: number;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                allowDuplicates: boolean;
                filter?: any;
            }, {
                id: string;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                filter?: any;
                count?: number | undefined;
                allowDuplicates?: boolean | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantChoice";
            choice: {
                id: string;
                count: number;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                allowDuplicates: boolean;
                filter?: any;
            };
        }, {
            kind: "grantChoice";
            choice: {
                id: string;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                filter?: any;
                count?: number | undefined;
                allowDuplicates?: boolean | undefined;
            };
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"addSpeed">;
            speedType: z.ZodEnum<["land", "burrow", "climb", "fly", "swim"]>;
            value: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        }, {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantSpell">;
            spellId: z.ZodString;
            tradition: z.ZodOptional<z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>>;
            rank: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        }, {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantSpellSlot">;
            rank: z.ZodNumber;
            count: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        }, {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"modifyResource">;
            resource: z.ZodEnum<["focusPoints", "hitPoints", "resolve", "classDc", "heroPoints"]>;
            value: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        }, {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantFlag">;
            flag: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            kind: "grantFlag";
            flag: string;
        }, {
            kind: "grantFlag";
            flag: string;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"removeFlag">;
            flag: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            kind: "removeFlag";
            flag: string;
        }, {
            kind: "removeFlag";
            flag: string;
        }>]>, "many">>;
    } & {
        type: z.ZodLiteral<"feat">;
        level: z.ZodNumber;
        category: z.ZodEnum<["ancestry", "class", "skill", "general", "archetype"]>;
        actionCost: z.ZodOptional<z.ZodObject<{
            type: z.ZodOptional<z.ZodEnum<["one", "two", "three", "free", "reaction", "varies"]>>;
            trait: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            type?: "one" | "two" | "three" | "free" | "reaction" | "varies" | undefined;
            trait?: string | undefined;
        }, {
            type?: "one" | "two" | "three" | "free" | "reaction" | "varies" | undefined;
            trait?: string | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        type: "feat";
        level: number;
        name: string;
        source: {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        };
        rarity: "common" | "uncommon" | "rare" | "unique";
        traits: string[];
        tags: string[];
        effects: ({
            kind: "grantFeat";
            featId: string;
            required: boolean;
            level?: number | undefined;
        } | {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "abilityBoost";
            mode: {
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            } | {
                value: number;
                type: "any";
                count: number;
            };
        } | {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking: "max" | "stack";
        } | {
            kind: "grantTrait";
            traitId: string;
        } | {
            kind: "grantLanguage";
            languageId: string;
        } | {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        } | {
            kind: "grantChoice";
            choice: {
                id: string;
                count: number;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                allowDuplicates: boolean;
                filter?: any;
            };
        } | {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        } | {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        } | {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        } | {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        } | {
            kind: "grantFlag";
            flag: string;
        } | {
            kind: "removeFlag";
            flag: string;
        })[];
        category: "skill" | "ancestry" | "class" | "archetype" | "general";
        slug?: string | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        version?: {
            major: number;
            minor: number;
            patch: number;
        } | undefined;
        prerequisites?: any;
        actionCost?: {
            type?: "one" | "two" | "three" | "free" | "reaction" | "varies" | undefined;
            trait?: string | undefined;
        } | undefined;
    }, {
        id: string;
        type: "feat";
        level: number;
        name: string;
        source: {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        };
        category: "skill" | "ancestry" | "class" | "archetype" | "general";
        slug?: string | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        version?: {
            major?: number | undefined;
            minor?: number | undefined;
            patch?: number | undefined;
        } | undefined;
        rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
        traits?: string[] | undefined;
        tags?: string[] | undefined;
        prerequisites?: any;
        effects?: ({
            kind: "grantFeat";
            featId: string;
            level?: number | undefined;
            required?: boolean | undefined;
        } | {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "abilityBoost";
            mode: {
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            } | {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            } | {
                type: "any";
                count: number;
                value?: number | undefined;
            };
        } | {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking?: "max" | "stack" | undefined;
        } | {
            kind: "grantTrait";
            traitId: string;
        } | {
            kind: "grantLanguage";
            languageId: string;
        } | {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        } | {
            kind: "grantChoice";
            choice: {
                id: string;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                filter?: any;
                count?: number | undefined;
                allowDuplicates?: boolean | undefined;
            };
        } | {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        } | {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        } | {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        } | {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        } | {
            kind: "grantFlag";
            flag: string;
        } | {
            kind: "removeFlag";
            flag: string;
        })[] | undefined;
        actionCost?: {
            type?: "one" | "two" | "three" | "free" | "reaction" | "varies" | undefined;
            trait?: string | undefined;
        } | undefined;
    }>, z.ZodObject<{
        id: z.ZodString;
        slug: z.ZodOptional<z.ZodString>;
        name: z.ZodString;
        summary: z.ZodOptional<z.ZodString>;
        description: z.ZodOptional<z.ZodString>;
        source: z.ZodObject<{
            id: z.ZodString;
            page: z.ZodOptional<z.ZodNumber>;
            license: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        }, {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        }>;
        version: z.ZodOptional<z.ZodObject<{
            major: z.ZodDefault<z.ZodNumber>;
            minor: z.ZodDefault<z.ZodNumber>;
            patch: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            major: number;
            minor: number;
            patch: number;
        }, {
            major?: number | undefined;
            minor?: number | undefined;
            patch?: number | undefined;
        }>>;
        rarity: z.ZodDefault<z.ZodEnum<["common", "uncommon", "rare", "unique"]>>;
        tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        prerequisites: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
        effects: z.ZodDefault<z.ZodArray<z.ZodDiscriminatedUnion<"kind", [z.ZodObject<{
            kind: z.ZodLiteral<"grantFeat">;
            featId: z.ZodString;
            level: z.ZodOptional<z.ZodNumber>;
            required: z.ZodDefault<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantFeat";
            featId: string;
            required: boolean;
            level?: number | undefined;
        }, {
            kind: "grantFeat";
            featId: string;
            level?: number | undefined;
            required?: boolean | undefined;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantProficiency">;
            target: z.ZodString;
            rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }, {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"setProficiency">;
            target: z.ZodString;
            rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
        }, "strip", z.ZodTypeAny, {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }, {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"abilityBoost">;
            mode: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"fixed">;
                abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
                value: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            }, {
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"choice">;
                count: z.ZodNumber;
                options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
                value: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            }, {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"any">;
                count: z.ZodNumber;
                value: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "any";
                count: number;
            }, {
                type: "any";
                count: number;
                value?: number | undefined;
            }>]>;
        }, "strip", z.ZodTypeAny, {
            kind: "abilityBoost";
            mode: {
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            } | {
                value: number;
                type: "any";
                count: number;
            };
        }, {
            kind: "abilityBoost";
            mode: {
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            } | {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            } | {
                type: "any";
                count: number;
                value?: number | undefined;
            };
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"abilityFlaw">;
            abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
        }, "strip", z.ZodTypeAny, {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        }, {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"addModifier">;
            target: z.ZodString;
            modifierType: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
            value: z.ZodNumber;
            label: z.ZodString;
            stacking: z.ZodDefault<z.ZodEnum<["max", "stack"]>>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking: "max" | "stack";
        }, {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking?: "max" | "stack" | undefined;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantTrait">;
            traitId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            kind: "grantTrait";
            traitId: string;
        }, {
            kind: "grantTrait";
            traitId: string;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantLanguage">;
            languageId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            kind: "grantLanguage";
            languageId: string;
        }, {
            kind: "grantLanguage";
            languageId: string;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantSense">;
            senseId: z.ZodString;
            range: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        }, {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantChoice">;
            choice: z.ZodObject<{
                id: z.ZodString;
                label: z.ZodString;
                count: z.ZodDefault<z.ZodNumber>;
                scope: z.ZodEnum<["skill", "skillFeat", "classFeat", "generalFeat", "ancestryFeat", "classFeature", "spell", "abilityBoost", "proficiency", "language"]>;
                filter: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
                allowDuplicates: z.ZodDefault<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                count: number;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                allowDuplicates: boolean;
                filter?: any;
            }, {
                id: string;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                filter?: any;
                count?: number | undefined;
                allowDuplicates?: boolean | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantChoice";
            choice: {
                id: string;
                count: number;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                allowDuplicates: boolean;
                filter?: any;
            };
        }, {
            kind: "grantChoice";
            choice: {
                id: string;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                filter?: any;
                count?: number | undefined;
                allowDuplicates?: boolean | undefined;
            };
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"addSpeed">;
            speedType: z.ZodEnum<["land", "burrow", "climb", "fly", "swim"]>;
            value: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        }, {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantSpell">;
            spellId: z.ZodString;
            tradition: z.ZodOptional<z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>>;
            rank: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        }, {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantSpellSlot">;
            rank: z.ZodNumber;
            count: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        }, {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"modifyResource">;
            resource: z.ZodEnum<["focusPoints", "hitPoints", "resolve", "classDc", "heroPoints"]>;
            value: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        }, {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantFlag">;
            flag: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            kind: "grantFlag";
            flag: string;
        }, {
            kind: "grantFlag";
            flag: string;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"removeFlag">;
            flag: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            kind: "removeFlag";
            flag: string;
        }, {
            kind: "removeFlag";
            flag: string;
        }>]>, "many">>;
    } & {
        type: z.ZodLiteral<"spell">;
        rank: z.ZodNumber;
        traditions: z.ZodDefault<z.ZodArray<z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>, "many">>;
        traits: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        duration: z.ZodOptional<z.ZodString>;
        range: z.ZodOptional<z.ZodString>;
        targets: z.ZodOptional<z.ZodString>;
        savingThrow: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        type: "spell";
        rank: number;
        name: string;
        source: {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        };
        rarity: "common" | "uncommon" | "rare" | "unique";
        traits: string[];
        tags: string[];
        effects: ({
            kind: "grantFeat";
            featId: string;
            required: boolean;
            level?: number | undefined;
        } | {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "abilityBoost";
            mode: {
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            } | {
                value: number;
                type: "any";
                count: number;
            };
        } | {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking: "max" | "stack";
        } | {
            kind: "grantTrait";
            traitId: string;
        } | {
            kind: "grantLanguage";
            languageId: string;
        } | {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        } | {
            kind: "grantChoice";
            choice: {
                id: string;
                count: number;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                allowDuplicates: boolean;
                filter?: any;
            };
        } | {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        } | {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        } | {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        } | {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        } | {
            kind: "grantFlag";
            flag: string;
        } | {
            kind: "removeFlag";
            flag: string;
        })[];
        traditions: ("arcane" | "divine" | "occult" | "primal" | "focus")[];
        range?: string | undefined;
        slug?: string | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        version?: {
            major: number;
            minor: number;
            patch: number;
        } | undefined;
        prerequisites?: any;
        duration?: string | undefined;
        targets?: string | undefined;
        savingThrow?: string | undefined;
    }, {
        id: string;
        type: "spell";
        rank: number;
        name: string;
        source: {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        };
        range?: string | undefined;
        slug?: string | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        version?: {
            major?: number | undefined;
            minor?: number | undefined;
            patch?: number | undefined;
        } | undefined;
        rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
        traits?: string[] | undefined;
        tags?: string[] | undefined;
        prerequisites?: any;
        effects?: ({
            kind: "grantFeat";
            featId: string;
            level?: number | undefined;
            required?: boolean | undefined;
        } | {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "abilityBoost";
            mode: {
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            } | {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            } | {
                type: "any";
                count: number;
                value?: number | undefined;
            };
        } | {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking?: "max" | "stack" | undefined;
        } | {
            kind: "grantTrait";
            traitId: string;
        } | {
            kind: "grantLanguage";
            languageId: string;
        } | {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        } | {
            kind: "grantChoice";
            choice: {
                id: string;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                filter?: any;
                count?: number | undefined;
                allowDuplicates?: boolean | undefined;
            };
        } | {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        } | {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        } | {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        } | {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        } | {
            kind: "grantFlag";
            flag: string;
        } | {
            kind: "removeFlag";
            flag: string;
        })[] | undefined;
        traditions?: ("arcane" | "divine" | "occult" | "primal" | "focus")[] | undefined;
        duration?: string | undefined;
        targets?: string | undefined;
        savingThrow?: string | undefined;
    }>, z.ZodObject<{
        id: z.ZodString;
        slug: z.ZodOptional<z.ZodString>;
        name: z.ZodString;
        summary: z.ZodOptional<z.ZodString>;
        description: z.ZodOptional<z.ZodString>;
        source: z.ZodObject<{
            id: z.ZodString;
            page: z.ZodOptional<z.ZodNumber>;
            license: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        }, {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        }>;
        version: z.ZodOptional<z.ZodObject<{
            major: z.ZodDefault<z.ZodNumber>;
            minor: z.ZodDefault<z.ZodNumber>;
            patch: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            major: number;
            minor: number;
            patch: number;
        }, {
            major?: number | undefined;
            minor?: number | undefined;
            patch?: number | undefined;
        }>>;
        rarity: z.ZodDefault<z.ZodEnum<["common", "uncommon", "rare", "unique"]>>;
        tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        prerequisites: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
        effects: z.ZodDefault<z.ZodArray<z.ZodDiscriminatedUnion<"kind", [z.ZodObject<{
            kind: z.ZodLiteral<"grantFeat">;
            featId: z.ZodString;
            level: z.ZodOptional<z.ZodNumber>;
            required: z.ZodDefault<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantFeat";
            featId: string;
            required: boolean;
            level?: number | undefined;
        }, {
            kind: "grantFeat";
            featId: string;
            level?: number | undefined;
            required?: boolean | undefined;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantProficiency">;
            target: z.ZodString;
            rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }, {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"setProficiency">;
            target: z.ZodString;
            rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
        }, "strip", z.ZodTypeAny, {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }, {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"abilityBoost">;
            mode: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"fixed">;
                abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
                value: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            }, {
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"choice">;
                count: z.ZodNumber;
                options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
                value: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            }, {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"any">;
                count: z.ZodNumber;
                value: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "any";
                count: number;
            }, {
                type: "any";
                count: number;
                value?: number | undefined;
            }>]>;
        }, "strip", z.ZodTypeAny, {
            kind: "abilityBoost";
            mode: {
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            } | {
                value: number;
                type: "any";
                count: number;
            };
        }, {
            kind: "abilityBoost";
            mode: {
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            } | {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            } | {
                type: "any";
                count: number;
                value?: number | undefined;
            };
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"abilityFlaw">;
            abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
        }, "strip", z.ZodTypeAny, {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        }, {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"addModifier">;
            target: z.ZodString;
            modifierType: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
            value: z.ZodNumber;
            label: z.ZodString;
            stacking: z.ZodDefault<z.ZodEnum<["max", "stack"]>>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking: "max" | "stack";
        }, {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking?: "max" | "stack" | undefined;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantTrait">;
            traitId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            kind: "grantTrait";
            traitId: string;
        }, {
            kind: "grantTrait";
            traitId: string;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantLanguage">;
            languageId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            kind: "grantLanguage";
            languageId: string;
        }, {
            kind: "grantLanguage";
            languageId: string;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantSense">;
            senseId: z.ZodString;
            range: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        }, {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantChoice">;
            choice: z.ZodObject<{
                id: z.ZodString;
                label: z.ZodString;
                count: z.ZodDefault<z.ZodNumber>;
                scope: z.ZodEnum<["skill", "skillFeat", "classFeat", "generalFeat", "ancestryFeat", "classFeature", "spell", "abilityBoost", "proficiency", "language"]>;
                filter: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
                allowDuplicates: z.ZodDefault<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                count: number;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                allowDuplicates: boolean;
                filter?: any;
            }, {
                id: string;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                filter?: any;
                count?: number | undefined;
                allowDuplicates?: boolean | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantChoice";
            choice: {
                id: string;
                count: number;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                allowDuplicates: boolean;
                filter?: any;
            };
        }, {
            kind: "grantChoice";
            choice: {
                id: string;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                filter?: any;
                count?: number | undefined;
                allowDuplicates?: boolean | undefined;
            };
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"addSpeed">;
            speedType: z.ZodEnum<["land", "burrow", "climb", "fly", "swim"]>;
            value: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        }, {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantSpell">;
            spellId: z.ZodString;
            tradition: z.ZodOptional<z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>>;
            rank: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        }, {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantSpellSlot">;
            rank: z.ZodNumber;
            count: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        }, {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"modifyResource">;
            resource: z.ZodEnum<["focusPoints", "hitPoints", "resolve", "classDc", "heroPoints"]>;
            value: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        }, {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantFlag">;
            flag: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            kind: "grantFlag";
            flag: string;
        }, {
            kind: "grantFlag";
            flag: string;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"removeFlag">;
            flag: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            kind: "removeFlag";
            flag: string;
        }, {
            kind: "removeFlag";
            flag: string;
        }>]>, "many">>;
    } & {
        type: z.ZodLiteral<"item">;
        level: z.ZodNumber;
        price: z.ZodOptional<z.ZodString>;
        bulk: z.ZodOptional<z.ZodString>;
        traits: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        type: "item";
        level: number;
        name: string;
        source: {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        };
        rarity: "common" | "uncommon" | "rare" | "unique";
        traits: string[];
        tags: string[];
        effects: ({
            kind: "grantFeat";
            featId: string;
            required: boolean;
            level?: number | undefined;
        } | {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "abilityBoost";
            mode: {
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            } | {
                value: number;
                type: "any";
                count: number;
            };
        } | {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking: "max" | "stack";
        } | {
            kind: "grantTrait";
            traitId: string;
        } | {
            kind: "grantLanguage";
            languageId: string;
        } | {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        } | {
            kind: "grantChoice";
            choice: {
                id: string;
                count: number;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                allowDuplicates: boolean;
                filter?: any;
            };
        } | {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        } | {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        } | {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        } | {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        } | {
            kind: "grantFlag";
            flag: string;
        } | {
            kind: "removeFlag";
            flag: string;
        })[];
        slug?: string | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        version?: {
            major: number;
            minor: number;
            patch: number;
        } | undefined;
        prerequisites?: any;
        price?: string | undefined;
        bulk?: string | undefined;
    }, {
        id: string;
        type: "item";
        level: number;
        name: string;
        source: {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        };
        slug?: string | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        version?: {
            major?: number | undefined;
            minor?: number | undefined;
            patch?: number | undefined;
        } | undefined;
        rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
        traits?: string[] | undefined;
        tags?: string[] | undefined;
        prerequisites?: any;
        effects?: ({
            kind: "grantFeat";
            featId: string;
            level?: number | undefined;
            required?: boolean | undefined;
        } | {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "abilityBoost";
            mode: {
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            } | {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            } | {
                type: "any";
                count: number;
                value?: number | undefined;
            };
        } | {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking?: "max" | "stack" | undefined;
        } | {
            kind: "grantTrait";
            traitId: string;
        } | {
            kind: "grantLanguage";
            languageId: string;
        } | {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        } | {
            kind: "grantChoice";
            choice: {
                id: string;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                filter?: any;
                count?: number | undefined;
                allowDuplicates?: boolean | undefined;
            };
        } | {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        } | {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        } | {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        } | {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        } | {
            kind: "grantFlag";
            flag: string;
        } | {
            kind: "removeFlag";
            flag: string;
        })[] | undefined;
        price?: string | undefined;
        bulk?: string | undefined;
    }>, z.ZodObject<{
        id: z.ZodString;
        slug: z.ZodOptional<z.ZodString>;
        name: z.ZodString;
        summary: z.ZodOptional<z.ZodString>;
        description: z.ZodOptional<z.ZodString>;
        source: z.ZodObject<{
            id: z.ZodString;
            page: z.ZodOptional<z.ZodNumber>;
            license: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        }, {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        }>;
        version: z.ZodOptional<z.ZodObject<{
            major: z.ZodDefault<z.ZodNumber>;
            minor: z.ZodDefault<z.ZodNumber>;
            patch: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            major: number;
            minor: number;
            patch: number;
        }, {
            major?: number | undefined;
            minor?: number | undefined;
            patch?: number | undefined;
        }>>;
        rarity: z.ZodDefault<z.ZodEnum<["common", "uncommon", "rare", "unique"]>>;
        traits: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        prerequisites: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
        effects: z.ZodDefault<z.ZodArray<z.ZodDiscriminatedUnion<"kind", [z.ZodObject<{
            kind: z.ZodLiteral<"grantFeat">;
            featId: z.ZodString;
            level: z.ZodOptional<z.ZodNumber>;
            required: z.ZodDefault<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantFeat";
            featId: string;
            required: boolean;
            level?: number | undefined;
        }, {
            kind: "grantFeat";
            featId: string;
            level?: number | undefined;
            required?: boolean | undefined;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantProficiency">;
            target: z.ZodString;
            rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }, {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"setProficiency">;
            target: z.ZodString;
            rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
        }, "strip", z.ZodTypeAny, {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }, {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"abilityBoost">;
            mode: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"fixed">;
                abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
                value: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            }, {
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"choice">;
                count: z.ZodNumber;
                options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
                value: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            }, {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"any">;
                count: z.ZodNumber;
                value: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "any";
                count: number;
            }, {
                type: "any";
                count: number;
                value?: number | undefined;
            }>]>;
        }, "strip", z.ZodTypeAny, {
            kind: "abilityBoost";
            mode: {
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            } | {
                value: number;
                type: "any";
                count: number;
            };
        }, {
            kind: "abilityBoost";
            mode: {
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            } | {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            } | {
                type: "any";
                count: number;
                value?: number | undefined;
            };
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"abilityFlaw">;
            abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
        }, "strip", z.ZodTypeAny, {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        }, {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"addModifier">;
            target: z.ZodString;
            modifierType: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
            value: z.ZodNumber;
            label: z.ZodString;
            stacking: z.ZodDefault<z.ZodEnum<["max", "stack"]>>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking: "max" | "stack";
        }, {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking?: "max" | "stack" | undefined;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantTrait">;
            traitId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            kind: "grantTrait";
            traitId: string;
        }, {
            kind: "grantTrait";
            traitId: string;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantLanguage">;
            languageId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            kind: "grantLanguage";
            languageId: string;
        }, {
            kind: "grantLanguage";
            languageId: string;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantSense">;
            senseId: z.ZodString;
            range: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        }, {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantChoice">;
            choice: z.ZodObject<{
                id: z.ZodString;
                label: z.ZodString;
                count: z.ZodDefault<z.ZodNumber>;
                scope: z.ZodEnum<["skill", "skillFeat", "classFeat", "generalFeat", "ancestryFeat", "classFeature", "spell", "abilityBoost", "proficiency", "language"]>;
                filter: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
                allowDuplicates: z.ZodDefault<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                count: number;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                allowDuplicates: boolean;
                filter?: any;
            }, {
                id: string;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                filter?: any;
                count?: number | undefined;
                allowDuplicates?: boolean | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantChoice";
            choice: {
                id: string;
                count: number;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                allowDuplicates: boolean;
                filter?: any;
            };
        }, {
            kind: "grantChoice";
            choice: {
                id: string;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                filter?: any;
                count?: number | undefined;
                allowDuplicates?: boolean | undefined;
            };
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"addSpeed">;
            speedType: z.ZodEnum<["land", "burrow", "climb", "fly", "swim"]>;
            value: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        }, {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantSpell">;
            spellId: z.ZodString;
            tradition: z.ZodOptional<z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>>;
            rank: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        }, {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantSpellSlot">;
            rank: z.ZodNumber;
            count: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        }, {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"modifyResource">;
            resource: z.ZodEnum<["focusPoints", "hitPoints", "resolve", "classDc", "heroPoints"]>;
            value: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        }, {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantFlag">;
            flag: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            kind: "grantFlag";
            flag: string;
        }, {
            kind: "grantFlag";
            flag: string;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"removeFlag">;
            flag: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            kind: "removeFlag";
            flag: string;
        }, {
            kind: "removeFlag";
            flag: string;
        }>]>, "many">>;
    } & {
        type: z.ZodLiteral<"condition">;
        levels: z.ZodDefault<z.ZodArray<z.ZodNumber, "many">>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        type: "condition";
        name: string;
        source: {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        };
        rarity: "common" | "uncommon" | "rare" | "unique";
        traits: string[];
        tags: string[];
        effects: ({
            kind: "grantFeat";
            featId: string;
            required: boolean;
            level?: number | undefined;
        } | {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "abilityBoost";
            mode: {
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            } | {
                value: number;
                type: "any";
                count: number;
            };
        } | {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking: "max" | "stack";
        } | {
            kind: "grantTrait";
            traitId: string;
        } | {
            kind: "grantLanguage";
            languageId: string;
        } | {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        } | {
            kind: "grantChoice";
            choice: {
                id: string;
                count: number;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                allowDuplicates: boolean;
                filter?: any;
            };
        } | {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        } | {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        } | {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        } | {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        } | {
            kind: "grantFlag";
            flag: string;
        } | {
            kind: "removeFlag";
            flag: string;
        })[];
        levels: number[];
        slug?: string | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        version?: {
            major: number;
            minor: number;
            patch: number;
        } | undefined;
        prerequisites?: any;
    }, {
        id: string;
        type: "condition";
        name: string;
        source: {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        };
        slug?: string | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        version?: {
            major?: number | undefined;
            minor?: number | undefined;
            patch?: number | undefined;
        } | undefined;
        rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
        traits?: string[] | undefined;
        tags?: string[] | undefined;
        prerequisites?: any;
        effects?: ({
            kind: "grantFeat";
            featId: string;
            level?: number | undefined;
            required?: boolean | undefined;
        } | {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "abilityBoost";
            mode: {
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            } | {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            } | {
                type: "any";
                count: number;
                value?: number | undefined;
            };
        } | {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking?: "max" | "stack" | undefined;
        } | {
            kind: "grantTrait";
            traitId: string;
        } | {
            kind: "grantLanguage";
            languageId: string;
        } | {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        } | {
            kind: "grantChoice";
            choice: {
                id: string;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                filter?: any;
                count?: number | undefined;
                allowDuplicates?: boolean | undefined;
            };
        } | {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        } | {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        } | {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        } | {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        } | {
            kind: "grantFlag";
            flag: string;
        } | {
            kind: "removeFlag";
            flag: string;
        })[] | undefined;
        levels?: number[] | undefined;
    }>, z.ZodObject<{
        id: z.ZodString;
        slug: z.ZodOptional<z.ZodString>;
        name: z.ZodString;
        summary: z.ZodOptional<z.ZodString>;
        description: z.ZodOptional<z.ZodString>;
        source: z.ZodObject<{
            id: z.ZodString;
            page: z.ZodOptional<z.ZodNumber>;
            license: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        }, {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        }>;
        version: z.ZodOptional<z.ZodObject<{
            major: z.ZodDefault<z.ZodNumber>;
            minor: z.ZodDefault<z.ZodNumber>;
            patch: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            major: number;
            minor: number;
            patch: number;
        }, {
            major?: number | undefined;
            minor?: number | undefined;
            patch?: number | undefined;
        }>>;
        rarity: z.ZodDefault<z.ZodEnum<["common", "uncommon", "rare", "unique"]>>;
        traits: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        prerequisites: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
        effects: z.ZodDefault<z.ZodArray<z.ZodDiscriminatedUnion<"kind", [z.ZodObject<{
            kind: z.ZodLiteral<"grantFeat">;
            featId: z.ZodString;
            level: z.ZodOptional<z.ZodNumber>;
            required: z.ZodDefault<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantFeat";
            featId: string;
            required: boolean;
            level?: number | undefined;
        }, {
            kind: "grantFeat";
            featId: string;
            level?: number | undefined;
            required?: boolean | undefined;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantProficiency">;
            target: z.ZodString;
            rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }, {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"setProficiency">;
            target: z.ZodString;
            rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
        }, "strip", z.ZodTypeAny, {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }, {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"abilityBoost">;
            mode: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"fixed">;
                abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
                value: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            }, {
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"choice">;
                count: z.ZodNumber;
                options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
                value: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            }, {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"any">;
                count: z.ZodNumber;
                value: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "any";
                count: number;
            }, {
                type: "any";
                count: number;
                value?: number | undefined;
            }>]>;
        }, "strip", z.ZodTypeAny, {
            kind: "abilityBoost";
            mode: {
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            } | {
                value: number;
                type: "any";
                count: number;
            };
        }, {
            kind: "abilityBoost";
            mode: {
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            } | {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            } | {
                type: "any";
                count: number;
                value?: number | undefined;
            };
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"abilityFlaw">;
            abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
        }, "strip", z.ZodTypeAny, {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        }, {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"addModifier">;
            target: z.ZodString;
            modifierType: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
            value: z.ZodNumber;
            label: z.ZodString;
            stacking: z.ZodDefault<z.ZodEnum<["max", "stack"]>>;
        }, "strip", z.ZodTypeAny, {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking: "max" | "stack";
        }, {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking?: "max" | "stack" | undefined;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantTrait">;
            traitId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            kind: "grantTrait";
            traitId: string;
        }, {
            kind: "grantTrait";
            traitId: string;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantLanguage">;
            languageId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            kind: "grantLanguage";
            languageId: string;
        }, {
            kind: "grantLanguage";
            languageId: string;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantSense">;
            senseId: z.ZodString;
            range: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        }, {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantChoice">;
            choice: z.ZodObject<{
                id: z.ZodString;
                label: z.ZodString;
                count: z.ZodDefault<z.ZodNumber>;
                scope: z.ZodEnum<["skill", "skillFeat", "classFeat", "generalFeat", "ancestryFeat", "classFeature", "spell", "abilityBoost", "proficiency", "language"]>;
                filter: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
                allowDuplicates: z.ZodDefault<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                count: number;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                allowDuplicates: boolean;
                filter?: any;
            }, {
                id: string;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                filter?: any;
                count?: number | undefined;
                allowDuplicates?: boolean | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantChoice";
            choice: {
                id: string;
                count: number;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                allowDuplicates: boolean;
                filter?: any;
            };
        }, {
            kind: "grantChoice";
            choice: {
                id: string;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                filter?: any;
                count?: number | undefined;
                allowDuplicates?: boolean | undefined;
            };
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"addSpeed">;
            speedType: z.ZodEnum<["land", "burrow", "climb", "fly", "swim"]>;
            value: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        }, {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantSpell">;
            spellId: z.ZodString;
            tradition: z.ZodOptional<z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>>;
            rank: z.ZodOptional<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        }, {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantSpellSlot">;
            rank: z.ZodNumber;
            count: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        }, {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"modifyResource">;
            resource: z.ZodEnum<["focusPoints", "hitPoints", "resolve", "classDc", "heroPoints"]>;
            value: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        }, {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"grantFlag">;
            flag: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            kind: "grantFlag";
            flag: string;
        }, {
            kind: "grantFlag";
            flag: string;
        }>, z.ZodObject<{
            kind: z.ZodLiteral<"removeFlag">;
            flag: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            kind: "removeFlag";
            flag: string;
        }, {
            kind: "removeFlag";
            flag: string;
        }>]>, "many">>;
    } & {
        type: z.ZodLiteral<"rule">;
        category: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        type: "rule";
        name: string;
        source: {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        };
        rarity: "common" | "uncommon" | "rare" | "unique";
        traits: string[];
        tags: string[];
        effects: ({
            kind: "grantFeat";
            featId: string;
            required: boolean;
            level?: number | undefined;
        } | {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "abilityBoost";
            mode: {
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            } | {
                value: number;
                type: "any";
                count: number;
            };
        } | {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking: "max" | "stack";
        } | {
            kind: "grantTrait";
            traitId: string;
        } | {
            kind: "grantLanguage";
            languageId: string;
        } | {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        } | {
            kind: "grantChoice";
            choice: {
                id: string;
                count: number;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                allowDuplicates: boolean;
                filter?: any;
            };
        } | {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        } | {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        } | {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        } | {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        } | {
            kind: "grantFlag";
            flag: string;
        } | {
            kind: "removeFlag";
            flag: string;
        })[];
        category: string;
        slug?: string | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        version?: {
            major: number;
            minor: number;
            patch: number;
        } | undefined;
        prerequisites?: any;
    }, {
        id: string;
        type: "rule";
        name: string;
        source: {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        };
        category: string;
        slug?: string | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        version?: {
            major?: number | undefined;
            minor?: number | undefined;
            patch?: number | undefined;
        } | undefined;
        rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
        traits?: string[] | undefined;
        tags?: string[] | undefined;
        prerequisites?: any;
        effects?: ({
            kind: "grantFeat";
            featId: string;
            level?: number | undefined;
            required?: boolean | undefined;
        } | {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "abilityBoost";
            mode: {
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            } | {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            } | {
                type: "any";
                count: number;
                value?: number | undefined;
            };
        } | {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking?: "max" | "stack" | undefined;
        } | {
            kind: "grantTrait";
            traitId: string;
        } | {
            kind: "grantLanguage";
            languageId: string;
        } | {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        } | {
            kind: "grantChoice";
            choice: {
                id: string;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                filter?: any;
                count?: number | undefined;
                allowDuplicates?: boolean | undefined;
            };
        } | {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        } | {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        } | {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        } | {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        } | {
            kind: "grantFlag";
            flag: string;
        } | {
            kind: "removeFlag";
            flag: string;
        })[] | undefined;
    }>]>;
    packId: z.ZodString;
    hash: z.ZodString;
}, "strip", z.ZodTypeAny, {
    hash: string;
    entity: {
        id: string;
        type: "ancestry";
        hitPoints: number;
        name: string;
        source: {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        };
        rarity: "common" | "uncommon" | "rare" | "unique";
        traits: string[];
        tags: string[];
        effects: ({
            kind: "grantFeat";
            featId: string;
            required: boolean;
            level?: number | undefined;
        } | {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "abilityBoost";
            mode: {
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            } | {
                value: number;
                type: "any";
                count: number;
            };
        } | {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking: "max" | "stack";
        } | {
            kind: "grantTrait";
            traitId: string;
        } | {
            kind: "grantLanguage";
            languageId: string;
        } | {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        } | {
            kind: "grantChoice";
            choice: {
                id: string;
                count: number;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                allowDuplicates: boolean;
                filter?: any;
            };
        } | {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        } | {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        } | {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        } | {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        } | {
            kind: "grantFlag";
            flag: string;
        } | {
            kind: "removeFlag";
            flag: string;
        })[];
        size: "tiny" | "small" | "medium" | "large" | "huge" | "gargantuan";
        speed: number;
        boosts: ({
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        } | {
            value: number;
            type: "any";
            count: number;
        })[];
        flaws: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        languages: {
            granted: string[];
            choices: {
                options: string[];
                count: number;
            };
        };
        features: string[];
        slug?: string | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        version?: {
            major: number;
            minor: number;
            patch: number;
        } | undefined;
        prerequisites?: any;
    } | {
        id: string;
        type: "heritage";
        name: string;
        source: {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        };
        rarity: "common" | "uncommon" | "rare" | "unique";
        traits: string[];
        tags: string[];
        effects: ({
            kind: "grantFeat";
            featId: string;
            required: boolean;
            level?: number | undefined;
        } | {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "abilityBoost";
            mode: {
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            } | {
                value: number;
                type: "any";
                count: number;
            };
        } | {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking: "max" | "stack";
        } | {
            kind: "grantTrait";
            traitId: string;
        } | {
            kind: "grantLanguage";
            languageId: string;
        } | {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        } | {
            kind: "grantChoice";
            choice: {
                id: string;
                count: number;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                allowDuplicates: boolean;
                filter?: any;
            };
        } | {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        } | {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        } | {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        } | {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        } | {
            kind: "grantFlag";
            flag: string;
        } | {
            kind: "removeFlag";
            flag: string;
        })[];
        ancestryId: string;
        slug?: string | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        version?: {
            major: number;
            minor: number;
            patch: number;
        } | undefined;
        prerequisites?: any;
    } | {
        id: string;
        type: "background";
        name: string;
        source: {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        };
        rarity: "common" | "uncommon" | "rare" | "unique";
        traits: string[];
        tags: string[];
        effects: ({
            kind: "grantFeat";
            featId: string;
            required: boolean;
            level?: number | undefined;
        } | {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "abilityBoost";
            mode: {
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            } | {
                value: number;
                type: "any";
                count: number;
            };
        } | {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking: "max" | "stack";
        } | {
            kind: "grantTrait";
            traitId: string;
        } | {
            kind: "grantLanguage";
            languageId: string;
        } | {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        } | {
            kind: "grantChoice";
            choice: {
                id: string;
                count: number;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                allowDuplicates: boolean;
                filter?: any;
            };
        } | {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        } | {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        } | {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        } | {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        } | {
            kind: "grantFlag";
            flag: string;
        } | {
            kind: "removeFlag";
            flag: string;
        })[];
        boosts: ({
            value: number;
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
        } | {
            value: number;
            type: "any";
            count: number;
        })[];
        skillTraining: string[];
        slug?: string | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        version?: {
            major: number;
            minor: number;
            patch: number;
        } | undefined;
        prerequisites?: any;
        feat?: string | undefined;
    } | {
        id: string;
        type: "class";
        name: string;
        source: {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        };
        rarity: "common" | "uncommon" | "rare" | "unique";
        traits: string[];
        tags: string[];
        effects: ({
            kind: "grantFeat";
            featId: string;
            required: boolean;
            level?: number | undefined;
        } | {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "abilityBoost";
            mode: {
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            } | {
                value: number;
                type: "any";
                count: number;
            };
        } | {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking: "max" | "stack";
        } | {
            kind: "grantTrait";
            traitId: string;
        } | {
            kind: "grantLanguage";
            languageId: string;
        } | {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        } | {
            kind: "grantChoice";
            choice: {
                id: string;
                count: number;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                allowDuplicates: boolean;
                filter?: any;
            };
        } | {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        } | {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        } | {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        } | {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        } | {
            kind: "grantFlag";
            flag: string;
        } | {
            kind: "removeFlag";
            flag: string;
        })[];
        keyAbility: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        hitPointsPerLevel: number;
        proficiencies: {
            perception: "untrained" | "trained" | "expert" | "master" | "legendary";
            savingThrows: {
                fortitude: "untrained" | "trained" | "expert" | "master" | "legendary";
                reflex: "untrained" | "trained" | "expert" | "master" | "legendary";
                will: "untrained" | "trained" | "expert" | "master" | "legendary";
            };
            skills: {
                trained: number;
                additionalChoices: string[];
            };
            attacks: {
                simple?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                martial?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                advanced?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                unarmed?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            };
            defense: {
                medium?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                unarmored?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                light?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                heavy?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                shields?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            };
            classDC?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        };
        progression: Record<string, {
            choices: {
                id: string;
                count: number;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                allowDuplicates: boolean;
                filter?: any;
            }[];
            grants: ({
                kind: "grantFeat";
                featId: string;
                required: boolean;
                level?: number | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    value: number;
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                } | {
                    value: number;
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                } | {
                    value: number;
                    type: "any";
                    count: number;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking: "max" | "stack";
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[];
            proficiencyBumps: {
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            }[];
            featureRefs: string[];
        }>;
        slug?: string | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        version?: {
            major: number;
            minor: number;
            patch: number;
        } | undefined;
        prerequisites?: any;
        spellcasting?: {
            type?: "focus" | "prepared" | "spontaneous" | "innate" | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        } | undefined;
    } | {
        id: string;
        type: "archetype";
        name: string;
        source: {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        };
        rarity: "common" | "uncommon" | "rare" | "unique";
        traits: string[];
        tags: string[];
        effects: ({
            kind: "grantFeat";
            featId: string;
            required: boolean;
            level?: number | undefined;
        } | {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "abilityBoost";
            mode: {
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            } | {
                value: number;
                type: "any";
                count: number;
            };
        } | {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking: "max" | "stack";
        } | {
            kind: "grantTrait";
            traitId: string;
        } | {
            kind: "grantLanguage";
            languageId: string;
        } | {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        } | {
            kind: "grantChoice";
            choice: {
                id: string;
                count: number;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                allowDuplicates: boolean;
                filter?: any;
            };
        } | {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        } | {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        } | {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        } | {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        } | {
            kind: "grantFlag";
            flag: string;
        } | {
            kind: "removeFlag";
            flag: string;
        })[];
        dedicationFeatId: string;
        slug?: string | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        version?: {
            major: number;
            minor: number;
            patch: number;
        } | undefined;
        prerequisites?: any;
    } | {
        id: string;
        type: "feat";
        level: number;
        name: string;
        source: {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        };
        rarity: "common" | "uncommon" | "rare" | "unique";
        traits: string[];
        tags: string[];
        effects: ({
            kind: "grantFeat";
            featId: string;
            required: boolean;
            level?: number | undefined;
        } | {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "abilityBoost";
            mode: {
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            } | {
                value: number;
                type: "any";
                count: number;
            };
        } | {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking: "max" | "stack";
        } | {
            kind: "grantTrait";
            traitId: string;
        } | {
            kind: "grantLanguage";
            languageId: string;
        } | {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        } | {
            kind: "grantChoice";
            choice: {
                id: string;
                count: number;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                allowDuplicates: boolean;
                filter?: any;
            };
        } | {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        } | {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        } | {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        } | {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        } | {
            kind: "grantFlag";
            flag: string;
        } | {
            kind: "removeFlag";
            flag: string;
        })[];
        category: "skill" | "ancestry" | "class" | "archetype" | "general";
        slug?: string | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        version?: {
            major: number;
            minor: number;
            patch: number;
        } | undefined;
        prerequisites?: any;
        actionCost?: {
            type?: "one" | "two" | "three" | "free" | "reaction" | "varies" | undefined;
            trait?: string | undefined;
        } | undefined;
    } | {
        id: string;
        type: "spell";
        rank: number;
        name: string;
        source: {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        };
        rarity: "common" | "uncommon" | "rare" | "unique";
        traits: string[];
        tags: string[];
        effects: ({
            kind: "grantFeat";
            featId: string;
            required: boolean;
            level?: number | undefined;
        } | {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "abilityBoost";
            mode: {
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            } | {
                value: number;
                type: "any";
                count: number;
            };
        } | {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking: "max" | "stack";
        } | {
            kind: "grantTrait";
            traitId: string;
        } | {
            kind: "grantLanguage";
            languageId: string;
        } | {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        } | {
            kind: "grantChoice";
            choice: {
                id: string;
                count: number;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                allowDuplicates: boolean;
                filter?: any;
            };
        } | {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        } | {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        } | {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        } | {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        } | {
            kind: "grantFlag";
            flag: string;
        } | {
            kind: "removeFlag";
            flag: string;
        })[];
        traditions: ("arcane" | "divine" | "occult" | "primal" | "focus")[];
        range?: string | undefined;
        slug?: string | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        version?: {
            major: number;
            minor: number;
            patch: number;
        } | undefined;
        prerequisites?: any;
        duration?: string | undefined;
        targets?: string | undefined;
        savingThrow?: string | undefined;
    } | {
        id: string;
        type: "item";
        level: number;
        name: string;
        source: {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        };
        rarity: "common" | "uncommon" | "rare" | "unique";
        traits: string[];
        tags: string[];
        effects: ({
            kind: "grantFeat";
            featId: string;
            required: boolean;
            level?: number | undefined;
        } | {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "abilityBoost";
            mode: {
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            } | {
                value: number;
                type: "any";
                count: number;
            };
        } | {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking: "max" | "stack";
        } | {
            kind: "grantTrait";
            traitId: string;
        } | {
            kind: "grantLanguage";
            languageId: string;
        } | {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        } | {
            kind: "grantChoice";
            choice: {
                id: string;
                count: number;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                allowDuplicates: boolean;
                filter?: any;
            };
        } | {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        } | {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        } | {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        } | {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        } | {
            kind: "grantFlag";
            flag: string;
        } | {
            kind: "removeFlag";
            flag: string;
        })[];
        slug?: string | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        version?: {
            major: number;
            minor: number;
            patch: number;
        } | undefined;
        prerequisites?: any;
        price?: string | undefined;
        bulk?: string | undefined;
    } | {
        id: string;
        type: "condition";
        name: string;
        source: {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        };
        rarity: "common" | "uncommon" | "rare" | "unique";
        traits: string[];
        tags: string[];
        effects: ({
            kind: "grantFeat";
            featId: string;
            required: boolean;
            level?: number | undefined;
        } | {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "abilityBoost";
            mode: {
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            } | {
                value: number;
                type: "any";
                count: number;
            };
        } | {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking: "max" | "stack";
        } | {
            kind: "grantTrait";
            traitId: string;
        } | {
            kind: "grantLanguage";
            languageId: string;
        } | {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        } | {
            kind: "grantChoice";
            choice: {
                id: string;
                count: number;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                allowDuplicates: boolean;
                filter?: any;
            };
        } | {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        } | {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        } | {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        } | {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        } | {
            kind: "grantFlag";
            flag: string;
        } | {
            kind: "removeFlag";
            flag: string;
        })[];
        levels: number[];
        slug?: string | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        version?: {
            major: number;
            minor: number;
            patch: number;
        } | undefined;
        prerequisites?: any;
    } | {
        id: string;
        type: "rule";
        name: string;
        source: {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        };
        rarity: "common" | "uncommon" | "rare" | "unique";
        traits: string[];
        tags: string[];
        effects: ({
            kind: "grantFeat";
            featId: string;
            required: boolean;
            level?: number | undefined;
        } | {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "abilityBoost";
            mode: {
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            } | {
                value: number;
                type: "any";
                count: number;
            };
        } | {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking: "max" | "stack";
        } | {
            kind: "grantTrait";
            traitId: string;
        } | {
            kind: "grantLanguage";
            languageId: string;
        } | {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        } | {
            kind: "grantChoice";
            choice: {
                id: string;
                count: number;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                allowDuplicates: boolean;
                filter?: any;
            };
        } | {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        } | {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        } | {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        } | {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        } | {
            kind: "grantFlag";
            flag: string;
        } | {
            kind: "removeFlag";
            flag: string;
        })[];
        category: string;
        slug?: string | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        version?: {
            major: number;
            minor: number;
            patch: number;
        } | undefined;
        prerequisites?: any;
    };
    packId: string;
}, {
    hash: string;
    entity: {
        id: string;
        type: "ancestry";
        hitPoints: number;
        name: string;
        source: {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        };
        size: "tiny" | "small" | "medium" | "large" | "huge" | "gargantuan";
        speed: number;
        slug?: string | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        version?: {
            major?: number | undefined;
            minor?: number | undefined;
            patch?: number | undefined;
        } | undefined;
        rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
        traits?: string[] | undefined;
        tags?: string[] | undefined;
        prerequisites?: any;
        effects?: ({
            kind: "grantFeat";
            featId: string;
            level?: number | undefined;
            required?: boolean | undefined;
        } | {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "abilityBoost";
            mode: {
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            } | {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            } | {
                type: "any";
                count: number;
                value?: number | undefined;
            };
        } | {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking?: "max" | "stack" | undefined;
        } | {
            kind: "grantTrait";
            traitId: string;
        } | {
            kind: "grantLanguage";
            languageId: string;
        } | {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        } | {
            kind: "grantChoice";
            choice: {
                id: string;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                filter?: any;
                count?: number | undefined;
                allowDuplicates?: boolean | undefined;
            };
        } | {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        } | {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        } | {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        } | {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        } | {
            kind: "grantFlag";
            flag: string;
        } | {
            kind: "removeFlag";
            flag: string;
        })[] | undefined;
        boosts?: ({
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        } | {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        } | {
            type: "any";
            count: number;
            value?: number | undefined;
        })[] | undefined;
        flaws?: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[] | undefined;
        languages?: {
            granted?: string[] | undefined;
            choices?: {
                options?: string[] | undefined;
                count?: number | undefined;
            } | undefined;
        } | undefined;
        features?: string[] | undefined;
    } | {
        id: string;
        type: "heritage";
        name: string;
        source: {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        };
        ancestryId: string;
        slug?: string | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        version?: {
            major?: number | undefined;
            minor?: number | undefined;
            patch?: number | undefined;
        } | undefined;
        rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
        traits?: string[] | undefined;
        tags?: string[] | undefined;
        prerequisites?: any;
        effects?: ({
            kind: "grantFeat";
            featId: string;
            level?: number | undefined;
            required?: boolean | undefined;
        } | {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "abilityBoost";
            mode: {
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            } | {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            } | {
                type: "any";
                count: number;
                value?: number | undefined;
            };
        } | {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking?: "max" | "stack" | undefined;
        } | {
            kind: "grantTrait";
            traitId: string;
        } | {
            kind: "grantLanguage";
            languageId: string;
        } | {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        } | {
            kind: "grantChoice";
            choice: {
                id: string;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                filter?: any;
                count?: number | undefined;
                allowDuplicates?: boolean | undefined;
            };
        } | {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        } | {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        } | {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        } | {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        } | {
            kind: "grantFlag";
            flag: string;
        } | {
            kind: "removeFlag";
            flag: string;
        })[] | undefined;
    } | {
        id: string;
        type: "background";
        name: string;
        source: {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        };
        slug?: string | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        version?: {
            major?: number | undefined;
            minor?: number | undefined;
            patch?: number | undefined;
        } | undefined;
        rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
        traits?: string[] | undefined;
        tags?: string[] | undefined;
        prerequisites?: any;
        effects?: ({
            kind: "grantFeat";
            featId: string;
            level?: number | undefined;
            required?: boolean | undefined;
        } | {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "abilityBoost";
            mode: {
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            } | {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            } | {
                type: "any";
                count: number;
                value?: number | undefined;
            };
        } | {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking?: "max" | "stack" | undefined;
        } | {
            kind: "grantTrait";
            traitId: string;
        } | {
            kind: "grantLanguage";
            languageId: string;
        } | {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        } | {
            kind: "grantChoice";
            choice: {
                id: string;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                filter?: any;
                count?: number | undefined;
                allowDuplicates?: boolean | undefined;
            };
        } | {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        } | {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        } | {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        } | {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        } | {
            kind: "grantFlag";
            flag: string;
        } | {
            kind: "removeFlag";
            flag: string;
        })[] | undefined;
        boosts?: ({
            type: "fixed";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            value?: number | undefined;
        } | {
            options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            type: "choice";
            count: number;
            value?: number | undefined;
        } | {
            type: "any";
            count: number;
            value?: number | undefined;
        })[] | undefined;
        skillTraining?: string[] | undefined;
        feat?: string | undefined;
    } | {
        id: string;
        type: "class";
        name: string;
        source: {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        };
        keyAbility: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        hitPointsPerLevel: number;
        proficiencies: {
            perception: "untrained" | "trained" | "expert" | "master" | "legendary";
            savingThrows: {
                fortitude: "untrained" | "trained" | "expert" | "master" | "legendary";
                reflex: "untrained" | "trained" | "expert" | "master" | "legendary";
                will: "untrained" | "trained" | "expert" | "master" | "legendary";
            };
            skills: {
                trained?: number | undefined;
                additionalChoices?: string[] | undefined;
            };
            attacks?: {
                simple?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                martial?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                advanced?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                unarmed?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            } | undefined;
            defense?: {
                medium?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                unarmored?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                light?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                heavy?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                shields?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            } | undefined;
            classDC?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
        };
        progression: Record<string, {
            choices?: {
                id: string;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                filter?: any;
                count?: number | undefined;
                allowDuplicates?: boolean | undefined;
            }[] | undefined;
            grants?: ({
                kind: "grantFeat";
                featId: string;
                level?: number | undefined;
                required?: boolean | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    value?: number | undefined;
                } | {
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                    value?: number | undefined;
                } | {
                    type: "any";
                    count: number;
                    value?: number | undefined;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking?: "max" | "stack" | undefined;
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[] | undefined;
            proficiencyBumps?: {
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            }[] | undefined;
            featureRefs?: string[] | undefined;
        }>;
        slug?: string | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        version?: {
            major?: number | undefined;
            minor?: number | undefined;
            patch?: number | undefined;
        } | undefined;
        rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
        traits?: string[] | undefined;
        tags?: string[] | undefined;
        prerequisites?: any;
        effects?: ({
            kind: "grantFeat";
            featId: string;
            level?: number | undefined;
            required?: boolean | undefined;
        } | {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "abilityBoost";
            mode: {
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            } | {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            } | {
                type: "any";
                count: number;
                value?: number | undefined;
            };
        } | {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking?: "max" | "stack" | undefined;
        } | {
            kind: "grantTrait";
            traitId: string;
        } | {
            kind: "grantLanguage";
            languageId: string;
        } | {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        } | {
            kind: "grantChoice";
            choice: {
                id: string;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                filter?: any;
                count?: number | undefined;
                allowDuplicates?: boolean | undefined;
            };
        } | {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        } | {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        } | {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        } | {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        } | {
            kind: "grantFlag";
            flag: string;
        } | {
            kind: "removeFlag";
            flag: string;
        })[] | undefined;
        spellcasting?: {
            type?: "focus" | "prepared" | "spontaneous" | "innate" | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        } | undefined;
    } | {
        id: string;
        type: "archetype";
        name: string;
        source: {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        };
        dedicationFeatId: string;
        slug?: string | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        version?: {
            major?: number | undefined;
            minor?: number | undefined;
            patch?: number | undefined;
        } | undefined;
        rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
        traits?: string[] | undefined;
        tags?: string[] | undefined;
        prerequisites?: any;
        effects?: ({
            kind: "grantFeat";
            featId: string;
            level?: number | undefined;
            required?: boolean | undefined;
        } | {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "abilityBoost";
            mode: {
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            } | {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            } | {
                type: "any";
                count: number;
                value?: number | undefined;
            };
        } | {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking?: "max" | "stack" | undefined;
        } | {
            kind: "grantTrait";
            traitId: string;
        } | {
            kind: "grantLanguage";
            languageId: string;
        } | {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        } | {
            kind: "grantChoice";
            choice: {
                id: string;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                filter?: any;
                count?: number | undefined;
                allowDuplicates?: boolean | undefined;
            };
        } | {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        } | {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        } | {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        } | {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        } | {
            kind: "grantFlag";
            flag: string;
        } | {
            kind: "removeFlag";
            flag: string;
        })[] | undefined;
    } | {
        id: string;
        type: "feat";
        level: number;
        name: string;
        source: {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        };
        category: "skill" | "ancestry" | "class" | "archetype" | "general";
        slug?: string | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        version?: {
            major?: number | undefined;
            minor?: number | undefined;
            patch?: number | undefined;
        } | undefined;
        rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
        traits?: string[] | undefined;
        tags?: string[] | undefined;
        prerequisites?: any;
        effects?: ({
            kind: "grantFeat";
            featId: string;
            level?: number | undefined;
            required?: boolean | undefined;
        } | {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "abilityBoost";
            mode: {
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            } | {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            } | {
                type: "any";
                count: number;
                value?: number | undefined;
            };
        } | {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking?: "max" | "stack" | undefined;
        } | {
            kind: "grantTrait";
            traitId: string;
        } | {
            kind: "grantLanguage";
            languageId: string;
        } | {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        } | {
            kind: "grantChoice";
            choice: {
                id: string;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                filter?: any;
                count?: number | undefined;
                allowDuplicates?: boolean | undefined;
            };
        } | {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        } | {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        } | {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        } | {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        } | {
            kind: "grantFlag";
            flag: string;
        } | {
            kind: "removeFlag";
            flag: string;
        })[] | undefined;
        actionCost?: {
            type?: "one" | "two" | "three" | "free" | "reaction" | "varies" | undefined;
            trait?: string | undefined;
        } | undefined;
    } | {
        id: string;
        type: "spell";
        rank: number;
        name: string;
        source: {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        };
        range?: string | undefined;
        slug?: string | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        version?: {
            major?: number | undefined;
            minor?: number | undefined;
            patch?: number | undefined;
        } | undefined;
        rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
        traits?: string[] | undefined;
        tags?: string[] | undefined;
        prerequisites?: any;
        effects?: ({
            kind: "grantFeat";
            featId: string;
            level?: number | undefined;
            required?: boolean | undefined;
        } | {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "abilityBoost";
            mode: {
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            } | {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            } | {
                type: "any";
                count: number;
                value?: number | undefined;
            };
        } | {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking?: "max" | "stack" | undefined;
        } | {
            kind: "grantTrait";
            traitId: string;
        } | {
            kind: "grantLanguage";
            languageId: string;
        } | {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        } | {
            kind: "grantChoice";
            choice: {
                id: string;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                filter?: any;
                count?: number | undefined;
                allowDuplicates?: boolean | undefined;
            };
        } | {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        } | {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        } | {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        } | {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        } | {
            kind: "grantFlag";
            flag: string;
        } | {
            kind: "removeFlag";
            flag: string;
        })[] | undefined;
        traditions?: ("arcane" | "divine" | "occult" | "primal" | "focus")[] | undefined;
        duration?: string | undefined;
        targets?: string | undefined;
        savingThrow?: string | undefined;
    } | {
        id: string;
        type: "item";
        level: number;
        name: string;
        source: {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        };
        slug?: string | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        version?: {
            major?: number | undefined;
            minor?: number | undefined;
            patch?: number | undefined;
        } | undefined;
        rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
        traits?: string[] | undefined;
        tags?: string[] | undefined;
        prerequisites?: any;
        effects?: ({
            kind: "grantFeat";
            featId: string;
            level?: number | undefined;
            required?: boolean | undefined;
        } | {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "abilityBoost";
            mode: {
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            } | {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            } | {
                type: "any";
                count: number;
                value?: number | undefined;
            };
        } | {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking?: "max" | "stack" | undefined;
        } | {
            kind: "grantTrait";
            traitId: string;
        } | {
            kind: "grantLanguage";
            languageId: string;
        } | {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        } | {
            kind: "grantChoice";
            choice: {
                id: string;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                filter?: any;
                count?: number | undefined;
                allowDuplicates?: boolean | undefined;
            };
        } | {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        } | {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        } | {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        } | {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        } | {
            kind: "grantFlag";
            flag: string;
        } | {
            kind: "removeFlag";
            flag: string;
        })[] | undefined;
        price?: string | undefined;
        bulk?: string | undefined;
    } | {
        id: string;
        type: "condition";
        name: string;
        source: {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        };
        slug?: string | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        version?: {
            major?: number | undefined;
            minor?: number | undefined;
            patch?: number | undefined;
        } | undefined;
        rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
        traits?: string[] | undefined;
        tags?: string[] | undefined;
        prerequisites?: any;
        effects?: ({
            kind: "grantFeat";
            featId: string;
            level?: number | undefined;
            required?: boolean | undefined;
        } | {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "abilityBoost";
            mode: {
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            } | {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            } | {
                type: "any";
                count: number;
                value?: number | undefined;
            };
        } | {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking?: "max" | "stack" | undefined;
        } | {
            kind: "grantTrait";
            traitId: string;
        } | {
            kind: "grantLanguage";
            languageId: string;
        } | {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        } | {
            kind: "grantChoice";
            choice: {
                id: string;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                filter?: any;
                count?: number | undefined;
                allowDuplicates?: boolean | undefined;
            };
        } | {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        } | {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        } | {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        } | {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        } | {
            kind: "grantFlag";
            flag: string;
        } | {
            kind: "removeFlag";
            flag: string;
        })[] | undefined;
        levels?: number[] | undefined;
    } | {
        id: string;
        type: "rule";
        name: string;
        source: {
            id: string;
            page?: number | undefined;
            license?: string | undefined;
        };
        category: string;
        slug?: string | undefined;
        summary?: string | undefined;
        description?: string | undefined;
        version?: {
            major?: number | undefined;
            minor?: number | undefined;
            patch?: number | undefined;
        } | undefined;
        rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
        traits?: string[] | undefined;
        tags?: string[] | undefined;
        prerequisites?: any;
        effects?: ({
            kind: "grantFeat";
            featId: string;
            level?: number | undefined;
            required?: boolean | undefined;
        } | {
            kind: "grantProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "setProficiency";
            target: string;
            rank: "untrained" | "trained" | "expert" | "master" | "legendary";
        } | {
            kind: "abilityBoost";
            mode: {
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            } | {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            } | {
                type: "any";
                count: number;
                value?: number | undefined;
            };
        } | {
            kind: "abilityFlaw";
            abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
        } | {
            value: number;
            kind: "addModifier";
            target: string;
            modifierType: "status" | "item" | "circumstance" | "untyped";
            label: string;
            stacking?: "max" | "stack" | undefined;
        } | {
            kind: "grantTrait";
            traitId: string;
        } | {
            kind: "grantLanguage";
            languageId: string;
        } | {
            kind: "grantSense";
            senseId: string;
            range?: number | undefined;
        } | {
            kind: "grantChoice";
            choice: {
                id: string;
                label: string;
                scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                filter?: any;
                count?: number | undefined;
                allowDuplicates?: boolean | undefined;
            };
        } | {
            value: number;
            kind: "addSpeed";
            speedType: "land" | "burrow" | "climb" | "fly" | "swim";
        } | {
            kind: "grantSpell";
            spellId: string;
            rank?: number | undefined;
            tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
        } | {
            kind: "grantSpellSlot";
            rank: number;
            count: number;
        } | {
            value: number;
            kind: "modifyResource";
            resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
        } | {
            kind: "grantFlag";
            flag: string;
        } | {
            kind: "removeFlag";
            flag: string;
        })[] | undefined;
    };
    packId: string;
}>;
export type CatalogIndexEntry = z.infer<typeof catalogIndexEntrySchema>;
export declare const catalogIndexSchema: z.ZodObject<{
    packs: z.ZodDefault<z.ZodRecord<z.ZodString, z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        version: z.ZodOptional<z.ZodObject<{
            major: z.ZodDefault<z.ZodNumber>;
            minor: z.ZodDefault<z.ZodNumber>;
            patch: z.ZodDefault<z.ZodNumber>;
        }, "strip", z.ZodTypeAny, {
            major: number;
            minor: number;
            patch: number;
        }, {
            major?: number | undefined;
            minor?: number | undefined;
            patch?: number | undefined;
        }>>;
        license: z.ZodOptional<z.ZodString>;
        description: z.ZodOptional<z.ZodString>;
        includes: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        includes: string[];
        name: string;
        license?: string | undefined;
        description?: string | undefined;
        version?: {
            major: number;
            minor: number;
            patch: number;
        } | undefined;
    }, {
        id: string;
        name: string;
        license?: string | undefined;
        includes?: string[] | undefined;
        description?: string | undefined;
        version?: {
            major?: number | undefined;
            minor?: number | undefined;
            patch?: number | undefined;
        } | undefined;
    }>>>;
    entities: z.ZodArray<z.ZodObject<{
        entity: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            id: z.ZodString;
            slug: z.ZodOptional<z.ZodString>;
            name: z.ZodString;
            summary: z.ZodOptional<z.ZodString>;
            description: z.ZodOptional<z.ZodString>;
            source: z.ZodObject<{
                id: z.ZodString;
                page: z.ZodOptional<z.ZodNumber>;
                license: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            }, {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            }>;
            version: z.ZodOptional<z.ZodObject<{
                major: z.ZodDefault<z.ZodNumber>;
                minor: z.ZodDefault<z.ZodNumber>;
                patch: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                major: number;
                minor: number;
                patch: number;
            }, {
                major?: number | undefined;
                minor?: number | undefined;
                patch?: number | undefined;
            }>>;
            rarity: z.ZodDefault<z.ZodEnum<["common", "uncommon", "rare", "unique"]>>;
            traits: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
            tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
            prerequisites: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
            effects: z.ZodDefault<z.ZodArray<z.ZodDiscriminatedUnion<"kind", [z.ZodObject<{
                kind: z.ZodLiteral<"grantFeat">;
                featId: z.ZodString;
                level: z.ZodOptional<z.ZodNumber>;
                required: z.ZodDefault<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                kind: "grantFeat";
                featId: string;
                required: boolean;
                level?: number | undefined;
            }, {
                kind: "grantFeat";
                featId: string;
                level?: number | undefined;
                required?: boolean | undefined;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantProficiency">;
                target: z.ZodString;
                rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
            }, "strip", z.ZodTypeAny, {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            }, {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"setProficiency">;
                target: z.ZodString;
                rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
            }, "strip", z.ZodTypeAny, {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            }, {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"abilityBoost">;
                mode: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                    type: z.ZodLiteral<"fixed">;
                    abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
                    value: z.ZodDefault<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    value: number;
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                }, {
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    value?: number | undefined;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"choice">;
                    count: z.ZodNumber;
                    options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
                    value: z.ZodDefault<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    value: number;
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                }, {
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                    value?: number | undefined;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"any">;
                    count: z.ZodNumber;
                    value: z.ZodDefault<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    value: number;
                    type: "any";
                    count: number;
                }, {
                    type: "any";
                    count: number;
                    value?: number | undefined;
                }>]>;
            }, "strip", z.ZodTypeAny, {
                kind: "abilityBoost";
                mode: {
                    value: number;
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                } | {
                    value: number;
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                } | {
                    value: number;
                    type: "any";
                    count: number;
                };
            }, {
                kind: "abilityBoost";
                mode: {
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    value?: number | undefined;
                } | {
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                    value?: number | undefined;
                } | {
                    type: "any";
                    count: number;
                    value?: number | undefined;
                };
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"abilityFlaw">;
                abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            }, "strip", z.ZodTypeAny, {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            }, {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"addModifier">;
                target: z.ZodString;
                modifierType: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
                value: z.ZodNumber;
                label: z.ZodString;
                stacking: z.ZodDefault<z.ZodEnum<["max", "stack"]>>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking: "max" | "stack";
            }, {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking?: "max" | "stack" | undefined;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantTrait">;
                traitId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                kind: "grantTrait";
                traitId: string;
            }, {
                kind: "grantTrait";
                traitId: string;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantLanguage">;
                languageId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                kind: "grantLanguage";
                languageId: string;
            }, {
                kind: "grantLanguage";
                languageId: string;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantSense">;
                senseId: z.ZodString;
                range: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            }, {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantChoice">;
                choice: z.ZodObject<{
                    id: z.ZodString;
                    label: z.ZodString;
                    count: z.ZodDefault<z.ZodNumber>;
                    scope: z.ZodEnum<["skill", "skillFeat", "classFeat", "generalFeat", "ancestryFeat", "classFeature", "spell", "abilityBoost", "proficiency", "language"]>;
                    filter: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
                    allowDuplicates: z.ZodDefault<z.ZodBoolean>;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                }, {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                kind: "grantChoice";
                choice: {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                };
            }, {
                kind: "grantChoice";
                choice: {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                };
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"addSpeed">;
                speedType: z.ZodEnum<["land", "burrow", "climb", "fly", "swim"]>;
                value: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            }, {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantSpell">;
                spellId: z.ZodString;
                tradition: z.ZodOptional<z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>>;
                rank: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            }, {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantSpellSlot">;
                rank: z.ZodNumber;
                count: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            }, {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"modifyResource">;
                resource: z.ZodEnum<["focusPoints", "hitPoints", "resolve", "classDc", "heroPoints"]>;
                value: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            }, {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantFlag">;
                flag: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                kind: "grantFlag";
                flag: string;
            }, {
                kind: "grantFlag";
                flag: string;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"removeFlag">;
                flag: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                kind: "removeFlag";
                flag: string;
            }, {
                kind: "removeFlag";
                flag: string;
            }>]>, "many">>;
        } & {
            type: z.ZodLiteral<"ancestry">;
            hitPoints: z.ZodNumber;
            size: z.ZodEnum<["tiny", "small", "medium", "large", "huge", "gargantuan"]>;
            speed: z.ZodNumber;
            boosts: z.ZodDefault<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"fixed">;
                abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
                value: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            }, {
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"choice">;
                count: z.ZodNumber;
                options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
                value: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            }, {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"any">;
                count: z.ZodNumber;
                value: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "any";
                count: number;
            }, {
                type: "any";
                count: number;
                value?: number | undefined;
            }>]>, "many">>;
            flaws: z.ZodDefault<z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">>;
            languages: z.ZodDefault<z.ZodObject<{
                granted: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
                choices: z.ZodDefault<z.ZodObject<{
                    count: z.ZodDefault<z.ZodNumber>;
                    options: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
                }, "strip", z.ZodTypeAny, {
                    options: string[];
                    count: number;
                }, {
                    options?: string[] | undefined;
                    count?: number | undefined;
                }>>;
            }, "strip", z.ZodTypeAny, {
                granted: string[];
                choices: {
                    options: string[];
                    count: number;
                };
            }, {
                granted?: string[] | undefined;
                choices?: {
                    options?: string[] | undefined;
                    count?: number | undefined;
                } | undefined;
            }>>;
            features: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            type: "ancestry";
            hitPoints: number;
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            rarity: "common" | "uncommon" | "rare" | "unique";
            traits: string[];
            tags: string[];
            effects: ({
                kind: "grantFeat";
                featId: string;
                required: boolean;
                level?: number | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    value: number;
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                } | {
                    value: number;
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                } | {
                    value: number;
                    type: "any";
                    count: number;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking: "max" | "stack";
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[];
            size: "tiny" | "small" | "medium" | "large" | "huge" | "gargantuan";
            speed: number;
            boosts: ({
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            } | {
                value: number;
                type: "any";
                count: number;
            })[];
            flaws: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            languages: {
                granted: string[];
                choices: {
                    options: string[];
                    count: number;
                };
            };
            features: string[];
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major: number;
                minor: number;
                patch: number;
            } | undefined;
            prerequisites?: any;
        }, {
            id: string;
            type: "ancestry";
            hitPoints: number;
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            size: "tiny" | "small" | "medium" | "large" | "huge" | "gargantuan";
            speed: number;
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major?: number | undefined;
                minor?: number | undefined;
                patch?: number | undefined;
            } | undefined;
            rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
            traits?: string[] | undefined;
            tags?: string[] | undefined;
            prerequisites?: any;
            effects?: ({
                kind: "grantFeat";
                featId: string;
                level?: number | undefined;
                required?: boolean | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    value?: number | undefined;
                } | {
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                    value?: number | undefined;
                } | {
                    type: "any";
                    count: number;
                    value?: number | undefined;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking?: "max" | "stack" | undefined;
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[] | undefined;
            boosts?: ({
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            } | {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            } | {
                type: "any";
                count: number;
                value?: number | undefined;
            })[] | undefined;
            flaws?: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[] | undefined;
            languages?: {
                granted?: string[] | undefined;
                choices?: {
                    options?: string[] | undefined;
                    count?: number | undefined;
                } | undefined;
            } | undefined;
            features?: string[] | undefined;
        }>, z.ZodObject<{
            id: z.ZodString;
            slug: z.ZodOptional<z.ZodString>;
            name: z.ZodString;
            summary: z.ZodOptional<z.ZodString>;
            description: z.ZodOptional<z.ZodString>;
            source: z.ZodObject<{
                id: z.ZodString;
                page: z.ZodOptional<z.ZodNumber>;
                license: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            }, {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            }>;
            version: z.ZodOptional<z.ZodObject<{
                major: z.ZodDefault<z.ZodNumber>;
                minor: z.ZodDefault<z.ZodNumber>;
                patch: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                major: number;
                minor: number;
                patch: number;
            }, {
                major?: number | undefined;
                minor?: number | undefined;
                patch?: number | undefined;
            }>>;
            rarity: z.ZodDefault<z.ZodEnum<["common", "uncommon", "rare", "unique"]>>;
            traits: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
            tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
            prerequisites: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
            effects: z.ZodDefault<z.ZodArray<z.ZodDiscriminatedUnion<"kind", [z.ZodObject<{
                kind: z.ZodLiteral<"grantFeat">;
                featId: z.ZodString;
                level: z.ZodOptional<z.ZodNumber>;
                required: z.ZodDefault<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                kind: "grantFeat";
                featId: string;
                required: boolean;
                level?: number | undefined;
            }, {
                kind: "grantFeat";
                featId: string;
                level?: number | undefined;
                required?: boolean | undefined;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantProficiency">;
                target: z.ZodString;
                rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
            }, "strip", z.ZodTypeAny, {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            }, {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"setProficiency">;
                target: z.ZodString;
                rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
            }, "strip", z.ZodTypeAny, {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            }, {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"abilityBoost">;
                mode: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                    type: z.ZodLiteral<"fixed">;
                    abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
                    value: z.ZodDefault<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    value: number;
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                }, {
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    value?: number | undefined;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"choice">;
                    count: z.ZodNumber;
                    options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
                    value: z.ZodDefault<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    value: number;
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                }, {
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                    value?: number | undefined;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"any">;
                    count: z.ZodNumber;
                    value: z.ZodDefault<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    value: number;
                    type: "any";
                    count: number;
                }, {
                    type: "any";
                    count: number;
                    value?: number | undefined;
                }>]>;
            }, "strip", z.ZodTypeAny, {
                kind: "abilityBoost";
                mode: {
                    value: number;
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                } | {
                    value: number;
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                } | {
                    value: number;
                    type: "any";
                    count: number;
                };
            }, {
                kind: "abilityBoost";
                mode: {
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    value?: number | undefined;
                } | {
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                    value?: number | undefined;
                } | {
                    type: "any";
                    count: number;
                    value?: number | undefined;
                };
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"abilityFlaw">;
                abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            }, "strip", z.ZodTypeAny, {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            }, {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"addModifier">;
                target: z.ZodString;
                modifierType: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
                value: z.ZodNumber;
                label: z.ZodString;
                stacking: z.ZodDefault<z.ZodEnum<["max", "stack"]>>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking: "max" | "stack";
            }, {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking?: "max" | "stack" | undefined;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantTrait">;
                traitId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                kind: "grantTrait";
                traitId: string;
            }, {
                kind: "grantTrait";
                traitId: string;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantLanguage">;
                languageId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                kind: "grantLanguage";
                languageId: string;
            }, {
                kind: "grantLanguage";
                languageId: string;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantSense">;
                senseId: z.ZodString;
                range: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            }, {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantChoice">;
                choice: z.ZodObject<{
                    id: z.ZodString;
                    label: z.ZodString;
                    count: z.ZodDefault<z.ZodNumber>;
                    scope: z.ZodEnum<["skill", "skillFeat", "classFeat", "generalFeat", "ancestryFeat", "classFeature", "spell", "abilityBoost", "proficiency", "language"]>;
                    filter: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
                    allowDuplicates: z.ZodDefault<z.ZodBoolean>;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                }, {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                kind: "grantChoice";
                choice: {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                };
            }, {
                kind: "grantChoice";
                choice: {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                };
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"addSpeed">;
                speedType: z.ZodEnum<["land", "burrow", "climb", "fly", "swim"]>;
                value: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            }, {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantSpell">;
                spellId: z.ZodString;
                tradition: z.ZodOptional<z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>>;
                rank: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            }, {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantSpellSlot">;
                rank: z.ZodNumber;
                count: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            }, {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"modifyResource">;
                resource: z.ZodEnum<["focusPoints", "hitPoints", "resolve", "classDc", "heroPoints"]>;
                value: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            }, {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantFlag">;
                flag: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                kind: "grantFlag";
                flag: string;
            }, {
                kind: "grantFlag";
                flag: string;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"removeFlag">;
                flag: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                kind: "removeFlag";
                flag: string;
            }, {
                kind: "removeFlag";
                flag: string;
            }>]>, "many">>;
        } & {
            type: z.ZodLiteral<"heritage">;
            ancestryId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            type: "heritage";
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            rarity: "common" | "uncommon" | "rare" | "unique";
            traits: string[];
            tags: string[];
            effects: ({
                kind: "grantFeat";
                featId: string;
                required: boolean;
                level?: number | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    value: number;
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                } | {
                    value: number;
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                } | {
                    value: number;
                    type: "any";
                    count: number;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking: "max" | "stack";
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[];
            ancestryId: string;
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major: number;
                minor: number;
                patch: number;
            } | undefined;
            prerequisites?: any;
        }, {
            id: string;
            type: "heritage";
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            ancestryId: string;
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major?: number | undefined;
                minor?: number | undefined;
                patch?: number | undefined;
            } | undefined;
            rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
            traits?: string[] | undefined;
            tags?: string[] | undefined;
            prerequisites?: any;
            effects?: ({
                kind: "grantFeat";
                featId: string;
                level?: number | undefined;
                required?: boolean | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    value?: number | undefined;
                } | {
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                    value?: number | undefined;
                } | {
                    type: "any";
                    count: number;
                    value?: number | undefined;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking?: "max" | "stack" | undefined;
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[] | undefined;
        }>, z.ZodObject<{
            id: z.ZodString;
            slug: z.ZodOptional<z.ZodString>;
            name: z.ZodString;
            summary: z.ZodOptional<z.ZodString>;
            description: z.ZodOptional<z.ZodString>;
            source: z.ZodObject<{
                id: z.ZodString;
                page: z.ZodOptional<z.ZodNumber>;
                license: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            }, {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            }>;
            version: z.ZodOptional<z.ZodObject<{
                major: z.ZodDefault<z.ZodNumber>;
                minor: z.ZodDefault<z.ZodNumber>;
                patch: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                major: number;
                minor: number;
                patch: number;
            }, {
                major?: number | undefined;
                minor?: number | undefined;
                patch?: number | undefined;
            }>>;
            rarity: z.ZodDefault<z.ZodEnum<["common", "uncommon", "rare", "unique"]>>;
            traits: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
            tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
            prerequisites: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
            effects: z.ZodDefault<z.ZodArray<z.ZodDiscriminatedUnion<"kind", [z.ZodObject<{
                kind: z.ZodLiteral<"grantFeat">;
                featId: z.ZodString;
                level: z.ZodOptional<z.ZodNumber>;
                required: z.ZodDefault<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                kind: "grantFeat";
                featId: string;
                required: boolean;
                level?: number | undefined;
            }, {
                kind: "grantFeat";
                featId: string;
                level?: number | undefined;
                required?: boolean | undefined;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantProficiency">;
                target: z.ZodString;
                rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
            }, "strip", z.ZodTypeAny, {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            }, {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"setProficiency">;
                target: z.ZodString;
                rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
            }, "strip", z.ZodTypeAny, {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            }, {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"abilityBoost">;
                mode: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                    type: z.ZodLiteral<"fixed">;
                    abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
                    value: z.ZodDefault<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    value: number;
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                }, {
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    value?: number | undefined;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"choice">;
                    count: z.ZodNumber;
                    options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
                    value: z.ZodDefault<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    value: number;
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                }, {
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                    value?: number | undefined;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"any">;
                    count: z.ZodNumber;
                    value: z.ZodDefault<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    value: number;
                    type: "any";
                    count: number;
                }, {
                    type: "any";
                    count: number;
                    value?: number | undefined;
                }>]>;
            }, "strip", z.ZodTypeAny, {
                kind: "abilityBoost";
                mode: {
                    value: number;
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                } | {
                    value: number;
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                } | {
                    value: number;
                    type: "any";
                    count: number;
                };
            }, {
                kind: "abilityBoost";
                mode: {
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    value?: number | undefined;
                } | {
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                    value?: number | undefined;
                } | {
                    type: "any";
                    count: number;
                    value?: number | undefined;
                };
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"abilityFlaw">;
                abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            }, "strip", z.ZodTypeAny, {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            }, {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"addModifier">;
                target: z.ZodString;
                modifierType: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
                value: z.ZodNumber;
                label: z.ZodString;
                stacking: z.ZodDefault<z.ZodEnum<["max", "stack"]>>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking: "max" | "stack";
            }, {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking?: "max" | "stack" | undefined;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantTrait">;
                traitId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                kind: "grantTrait";
                traitId: string;
            }, {
                kind: "grantTrait";
                traitId: string;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantLanguage">;
                languageId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                kind: "grantLanguage";
                languageId: string;
            }, {
                kind: "grantLanguage";
                languageId: string;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantSense">;
                senseId: z.ZodString;
                range: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            }, {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantChoice">;
                choice: z.ZodObject<{
                    id: z.ZodString;
                    label: z.ZodString;
                    count: z.ZodDefault<z.ZodNumber>;
                    scope: z.ZodEnum<["skill", "skillFeat", "classFeat", "generalFeat", "ancestryFeat", "classFeature", "spell", "abilityBoost", "proficiency", "language"]>;
                    filter: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
                    allowDuplicates: z.ZodDefault<z.ZodBoolean>;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                }, {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                kind: "grantChoice";
                choice: {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                };
            }, {
                kind: "grantChoice";
                choice: {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                };
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"addSpeed">;
                speedType: z.ZodEnum<["land", "burrow", "climb", "fly", "swim"]>;
                value: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            }, {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantSpell">;
                spellId: z.ZodString;
                tradition: z.ZodOptional<z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>>;
                rank: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            }, {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantSpellSlot">;
                rank: z.ZodNumber;
                count: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            }, {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"modifyResource">;
                resource: z.ZodEnum<["focusPoints", "hitPoints", "resolve", "classDc", "heroPoints"]>;
                value: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            }, {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantFlag">;
                flag: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                kind: "grantFlag";
                flag: string;
            }, {
                kind: "grantFlag";
                flag: string;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"removeFlag">;
                flag: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                kind: "removeFlag";
                flag: string;
            }, {
                kind: "removeFlag";
                flag: string;
            }>]>, "many">>;
        } & {
            type: z.ZodLiteral<"background">;
            boosts: z.ZodDefault<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                type: z.ZodLiteral<"fixed">;
                abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
                value: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            }, {
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"choice">;
                count: z.ZodNumber;
                options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
                value: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            }, {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            }>, z.ZodObject<{
                type: z.ZodLiteral<"any">;
                count: z.ZodNumber;
                value: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                type: "any";
                count: number;
            }, {
                type: "any";
                count: number;
                value?: number | undefined;
            }>]>, "many">>;
            skillTraining: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
            feat: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            type: "background";
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            rarity: "common" | "uncommon" | "rare" | "unique";
            traits: string[];
            tags: string[];
            effects: ({
                kind: "grantFeat";
                featId: string;
                required: boolean;
                level?: number | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    value: number;
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                } | {
                    value: number;
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                } | {
                    value: number;
                    type: "any";
                    count: number;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking: "max" | "stack";
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[];
            boosts: ({
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            } | {
                value: number;
                type: "any";
                count: number;
            })[];
            skillTraining: string[];
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major: number;
                minor: number;
                patch: number;
            } | undefined;
            prerequisites?: any;
            feat?: string | undefined;
        }, {
            id: string;
            type: "background";
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major?: number | undefined;
                minor?: number | undefined;
                patch?: number | undefined;
            } | undefined;
            rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
            traits?: string[] | undefined;
            tags?: string[] | undefined;
            prerequisites?: any;
            effects?: ({
                kind: "grantFeat";
                featId: string;
                level?: number | undefined;
                required?: boolean | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    value?: number | undefined;
                } | {
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                    value?: number | undefined;
                } | {
                    type: "any";
                    count: number;
                    value?: number | undefined;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking?: "max" | "stack" | undefined;
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[] | undefined;
            boosts?: ({
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            } | {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            } | {
                type: "any";
                count: number;
                value?: number | undefined;
            })[] | undefined;
            skillTraining?: string[] | undefined;
            feat?: string | undefined;
        }>, z.ZodObject<{
            id: z.ZodString;
            slug: z.ZodOptional<z.ZodString>;
            name: z.ZodString;
            summary: z.ZodOptional<z.ZodString>;
            description: z.ZodOptional<z.ZodString>;
            source: z.ZodObject<{
                id: z.ZodString;
                page: z.ZodOptional<z.ZodNumber>;
                license: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            }, {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            }>;
            version: z.ZodOptional<z.ZodObject<{
                major: z.ZodDefault<z.ZodNumber>;
                minor: z.ZodDefault<z.ZodNumber>;
                patch: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                major: number;
                minor: number;
                patch: number;
            }, {
                major?: number | undefined;
                minor?: number | undefined;
                patch?: number | undefined;
            }>>;
            rarity: z.ZodDefault<z.ZodEnum<["common", "uncommon", "rare", "unique"]>>;
            traits: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
            tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
            prerequisites: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
            effects: z.ZodDefault<z.ZodArray<z.ZodDiscriminatedUnion<"kind", [z.ZodObject<{
                kind: z.ZodLiteral<"grantFeat">;
                featId: z.ZodString;
                level: z.ZodOptional<z.ZodNumber>;
                required: z.ZodDefault<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                kind: "grantFeat";
                featId: string;
                required: boolean;
                level?: number | undefined;
            }, {
                kind: "grantFeat";
                featId: string;
                level?: number | undefined;
                required?: boolean | undefined;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantProficiency">;
                target: z.ZodString;
                rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
            }, "strip", z.ZodTypeAny, {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            }, {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"setProficiency">;
                target: z.ZodString;
                rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
            }, "strip", z.ZodTypeAny, {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            }, {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"abilityBoost">;
                mode: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                    type: z.ZodLiteral<"fixed">;
                    abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
                    value: z.ZodDefault<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    value: number;
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                }, {
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    value?: number | undefined;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"choice">;
                    count: z.ZodNumber;
                    options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
                    value: z.ZodDefault<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    value: number;
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                }, {
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                    value?: number | undefined;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"any">;
                    count: z.ZodNumber;
                    value: z.ZodDefault<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    value: number;
                    type: "any";
                    count: number;
                }, {
                    type: "any";
                    count: number;
                    value?: number | undefined;
                }>]>;
            }, "strip", z.ZodTypeAny, {
                kind: "abilityBoost";
                mode: {
                    value: number;
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                } | {
                    value: number;
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                } | {
                    value: number;
                    type: "any";
                    count: number;
                };
            }, {
                kind: "abilityBoost";
                mode: {
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    value?: number | undefined;
                } | {
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                    value?: number | undefined;
                } | {
                    type: "any";
                    count: number;
                    value?: number | undefined;
                };
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"abilityFlaw">;
                abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            }, "strip", z.ZodTypeAny, {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            }, {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"addModifier">;
                target: z.ZodString;
                modifierType: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
                value: z.ZodNumber;
                label: z.ZodString;
                stacking: z.ZodDefault<z.ZodEnum<["max", "stack"]>>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking: "max" | "stack";
            }, {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking?: "max" | "stack" | undefined;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantTrait">;
                traitId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                kind: "grantTrait";
                traitId: string;
            }, {
                kind: "grantTrait";
                traitId: string;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantLanguage">;
                languageId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                kind: "grantLanguage";
                languageId: string;
            }, {
                kind: "grantLanguage";
                languageId: string;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantSense">;
                senseId: z.ZodString;
                range: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            }, {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantChoice">;
                choice: z.ZodObject<{
                    id: z.ZodString;
                    label: z.ZodString;
                    count: z.ZodDefault<z.ZodNumber>;
                    scope: z.ZodEnum<["skill", "skillFeat", "classFeat", "generalFeat", "ancestryFeat", "classFeature", "spell", "abilityBoost", "proficiency", "language"]>;
                    filter: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
                    allowDuplicates: z.ZodDefault<z.ZodBoolean>;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                }, {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                kind: "grantChoice";
                choice: {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                };
            }, {
                kind: "grantChoice";
                choice: {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                };
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"addSpeed">;
                speedType: z.ZodEnum<["land", "burrow", "climb", "fly", "swim"]>;
                value: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            }, {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantSpell">;
                spellId: z.ZodString;
                tradition: z.ZodOptional<z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>>;
                rank: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            }, {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantSpellSlot">;
                rank: z.ZodNumber;
                count: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            }, {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"modifyResource">;
                resource: z.ZodEnum<["focusPoints", "hitPoints", "resolve", "classDc", "heroPoints"]>;
                value: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            }, {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantFlag">;
                flag: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                kind: "grantFlag";
                flag: string;
            }, {
                kind: "grantFlag";
                flag: string;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"removeFlag">;
                flag: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                kind: "removeFlag";
                flag: string;
            }, {
                kind: "removeFlag";
                flag: string;
            }>]>, "many">>;
        } & {
            type: z.ZodLiteral<"class">;
            keyAbility: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            hitPointsPerLevel: z.ZodNumber;
            proficiencies: z.ZodObject<{
                perception: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
                savingThrows: z.ZodObject<{
                    fortitude: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
                    reflex: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
                    will: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
                }, "strip", z.ZodTypeAny, {
                    fortitude: "untrained" | "trained" | "expert" | "master" | "legendary";
                    reflex: "untrained" | "trained" | "expert" | "master" | "legendary";
                    will: "untrained" | "trained" | "expert" | "master" | "legendary";
                }, {
                    fortitude: "untrained" | "trained" | "expert" | "master" | "legendary";
                    reflex: "untrained" | "trained" | "expert" | "master" | "legendary";
                    will: "untrained" | "trained" | "expert" | "master" | "legendary";
                }>;
                skills: z.ZodObject<{
                    trained: z.ZodDefault<z.ZodNumber>;
                    additionalChoices: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
                }, "strip", z.ZodTypeAny, {
                    trained: number;
                    additionalChoices: string[];
                }, {
                    trained?: number | undefined;
                    additionalChoices?: string[] | undefined;
                }>;
                attacks: z.ZodDefault<z.ZodObject<{
                    simple: z.ZodOptional<z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
                    martial: z.ZodOptional<z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
                    advanced: z.ZodOptional<z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
                    unarmed: z.ZodOptional<z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
                }, "strip", z.ZodTypeAny, {
                    simple?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    martial?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    advanced?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    unarmed?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                }, {
                    simple?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    martial?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    advanced?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    unarmed?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                }>>;
                defense: z.ZodDefault<z.ZodObject<{
                    unarmored: z.ZodOptional<z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
                    light: z.ZodOptional<z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
                    medium: z.ZodOptional<z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
                    heavy: z.ZodOptional<z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
                    shields: z.ZodOptional<z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
                }, "strip", z.ZodTypeAny, {
                    medium?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    unarmored?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    light?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    heavy?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    shields?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                }, {
                    medium?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    unarmored?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    light?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    heavy?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    shields?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                }>>;
                classDC: z.ZodOptional<z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>>;
            }, "strip", z.ZodTypeAny, {
                perception: "untrained" | "trained" | "expert" | "master" | "legendary";
                savingThrows: {
                    fortitude: "untrained" | "trained" | "expert" | "master" | "legendary";
                    reflex: "untrained" | "trained" | "expert" | "master" | "legendary";
                    will: "untrained" | "trained" | "expert" | "master" | "legendary";
                };
                skills: {
                    trained: number;
                    additionalChoices: string[];
                };
                attacks: {
                    simple?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    martial?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    advanced?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    unarmed?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                };
                defense: {
                    medium?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    unarmored?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    light?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    heavy?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    shields?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                };
                classDC?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            }, {
                perception: "untrained" | "trained" | "expert" | "master" | "legendary";
                savingThrows: {
                    fortitude: "untrained" | "trained" | "expert" | "master" | "legendary";
                    reflex: "untrained" | "trained" | "expert" | "master" | "legendary";
                    will: "untrained" | "trained" | "expert" | "master" | "legendary";
                };
                skills: {
                    trained?: number | undefined;
                    additionalChoices?: string[] | undefined;
                };
                attacks?: {
                    simple?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    martial?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    advanced?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    unarmed?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                } | undefined;
                defense?: {
                    medium?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    unarmored?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    light?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    heavy?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    shields?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                } | undefined;
                classDC?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            }>;
            progression: z.ZodRecord<z.ZodString, z.ZodObject<{
                grants: z.ZodDefault<z.ZodArray<z.ZodDiscriminatedUnion<"kind", [z.ZodObject<{
                    kind: z.ZodLiteral<"grantFeat">;
                    featId: z.ZodString;
                    level: z.ZodOptional<z.ZodNumber>;
                    required: z.ZodDefault<z.ZodBoolean>;
                }, "strip", z.ZodTypeAny, {
                    kind: "grantFeat";
                    featId: string;
                    required: boolean;
                    level?: number | undefined;
                }, {
                    kind: "grantFeat";
                    featId: string;
                    level?: number | undefined;
                    required?: boolean | undefined;
                }>, z.ZodObject<{
                    kind: z.ZodLiteral<"grantProficiency">;
                    target: z.ZodString;
                    rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
                }, "strip", z.ZodTypeAny, {
                    kind: "grantProficiency";
                    target: string;
                    rank: "untrained" | "trained" | "expert" | "master" | "legendary";
                }, {
                    kind: "grantProficiency";
                    target: string;
                    rank: "untrained" | "trained" | "expert" | "master" | "legendary";
                }>, z.ZodObject<{
                    kind: z.ZodLiteral<"setProficiency">;
                    target: z.ZodString;
                    rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
                }, "strip", z.ZodTypeAny, {
                    kind: "setProficiency";
                    target: string;
                    rank: "untrained" | "trained" | "expert" | "master" | "legendary";
                }, {
                    kind: "setProficiency";
                    target: string;
                    rank: "untrained" | "trained" | "expert" | "master" | "legendary";
                }>, z.ZodObject<{
                    kind: z.ZodLiteral<"abilityBoost">;
                    mode: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                        type: z.ZodLiteral<"fixed">;
                        abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
                        value: z.ZodDefault<z.ZodNumber>;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "fixed";
                        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    }, {
                        type: "fixed";
                        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                        value?: number | undefined;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"choice">;
                        count: z.ZodNumber;
                        options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
                        value: z.ZodDefault<z.ZodNumber>;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                        type: "choice";
                        count: number;
                    }, {
                        options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                        type: "choice";
                        count: number;
                        value?: number | undefined;
                    }>, z.ZodObject<{
                        type: z.ZodLiteral<"any">;
                        count: z.ZodNumber;
                        value: z.ZodDefault<z.ZodNumber>;
                    }, "strip", z.ZodTypeAny, {
                        value: number;
                        type: "any";
                        count: number;
                    }, {
                        type: "any";
                        count: number;
                        value?: number | undefined;
                    }>]>;
                }, "strip", z.ZodTypeAny, {
                    kind: "abilityBoost";
                    mode: {
                        value: number;
                        type: "fixed";
                        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    } | {
                        value: number;
                        options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                        type: "choice";
                        count: number;
                    } | {
                        value: number;
                        type: "any";
                        count: number;
                    };
                }, {
                    kind: "abilityBoost";
                    mode: {
                        type: "fixed";
                        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                        value?: number | undefined;
                    } | {
                        options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                        type: "choice";
                        count: number;
                        value?: number | undefined;
                    } | {
                        type: "any";
                        count: number;
                        value?: number | undefined;
                    };
                }>, z.ZodObject<{
                    kind: z.ZodLiteral<"abilityFlaw">;
                    abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
                }, "strip", z.ZodTypeAny, {
                    kind: "abilityFlaw";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                }, {
                    kind: "abilityFlaw";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                }>, z.ZodObject<{
                    kind: z.ZodLiteral<"addModifier">;
                    target: z.ZodString;
                    modifierType: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
                    value: z.ZodNumber;
                    label: z.ZodString;
                    stacking: z.ZodDefault<z.ZodEnum<["max", "stack"]>>;
                }, "strip", z.ZodTypeAny, {
                    value: number;
                    kind: "addModifier";
                    target: string;
                    modifierType: "status" | "item" | "circumstance" | "untyped";
                    label: string;
                    stacking: "max" | "stack";
                }, {
                    value: number;
                    kind: "addModifier";
                    target: string;
                    modifierType: "status" | "item" | "circumstance" | "untyped";
                    label: string;
                    stacking?: "max" | "stack" | undefined;
                }>, z.ZodObject<{
                    kind: z.ZodLiteral<"grantTrait">;
                    traitId: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    kind: "grantTrait";
                    traitId: string;
                }, {
                    kind: "grantTrait";
                    traitId: string;
                }>, z.ZodObject<{
                    kind: z.ZodLiteral<"grantLanguage">;
                    languageId: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    kind: "grantLanguage";
                    languageId: string;
                }, {
                    kind: "grantLanguage";
                    languageId: string;
                }>, z.ZodObject<{
                    kind: z.ZodLiteral<"grantSense">;
                    senseId: z.ZodString;
                    range: z.ZodOptional<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    kind: "grantSense";
                    senseId: string;
                    range?: number | undefined;
                }, {
                    kind: "grantSense";
                    senseId: string;
                    range?: number | undefined;
                }>, z.ZodObject<{
                    kind: z.ZodLiteral<"grantChoice">;
                    choice: z.ZodObject<{
                        id: z.ZodString;
                        label: z.ZodString;
                        count: z.ZodDefault<z.ZodNumber>;
                        scope: z.ZodEnum<["skill", "skillFeat", "classFeat", "generalFeat", "ancestryFeat", "classFeature", "spell", "abilityBoost", "proficiency", "language"]>;
                        filter: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
                        allowDuplicates: z.ZodDefault<z.ZodBoolean>;
                    }, "strip", z.ZodTypeAny, {
                        id: string;
                        count: number;
                        label: string;
                        scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                        allowDuplicates: boolean;
                        filter?: any;
                    }, {
                        id: string;
                        label: string;
                        scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                        filter?: any;
                        count?: number | undefined;
                        allowDuplicates?: boolean | undefined;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    kind: "grantChoice";
                    choice: {
                        id: string;
                        count: number;
                        label: string;
                        scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                        allowDuplicates: boolean;
                        filter?: any;
                    };
                }, {
                    kind: "grantChoice";
                    choice: {
                        id: string;
                        label: string;
                        scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                        filter?: any;
                        count?: number | undefined;
                        allowDuplicates?: boolean | undefined;
                    };
                }>, z.ZodObject<{
                    kind: z.ZodLiteral<"addSpeed">;
                    speedType: z.ZodEnum<["land", "burrow", "climb", "fly", "swim"]>;
                    value: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    value: number;
                    kind: "addSpeed";
                    speedType: "land" | "burrow" | "climb" | "fly" | "swim";
                }, {
                    value: number;
                    kind: "addSpeed";
                    speedType: "land" | "burrow" | "climb" | "fly" | "swim";
                }>, z.ZodObject<{
                    kind: z.ZodLiteral<"grantSpell">;
                    spellId: z.ZodString;
                    tradition: z.ZodOptional<z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>>;
                    rank: z.ZodOptional<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    kind: "grantSpell";
                    spellId: string;
                    rank?: number | undefined;
                    tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
                }, {
                    kind: "grantSpell";
                    spellId: string;
                    rank?: number | undefined;
                    tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
                }>, z.ZodObject<{
                    kind: z.ZodLiteral<"grantSpellSlot">;
                    rank: z.ZodNumber;
                    count: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    kind: "grantSpellSlot";
                    rank: number;
                    count: number;
                }, {
                    kind: "grantSpellSlot";
                    rank: number;
                    count: number;
                }>, z.ZodObject<{
                    kind: z.ZodLiteral<"modifyResource">;
                    resource: z.ZodEnum<["focusPoints", "hitPoints", "resolve", "classDc", "heroPoints"]>;
                    value: z.ZodNumber;
                }, "strip", z.ZodTypeAny, {
                    value: number;
                    kind: "modifyResource";
                    resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
                }, {
                    value: number;
                    kind: "modifyResource";
                    resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
                }>, z.ZodObject<{
                    kind: z.ZodLiteral<"grantFlag">;
                    flag: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    kind: "grantFlag";
                    flag: string;
                }, {
                    kind: "grantFlag";
                    flag: string;
                }>, z.ZodObject<{
                    kind: z.ZodLiteral<"removeFlag">;
                    flag: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    kind: "removeFlag";
                    flag: string;
                }, {
                    kind: "removeFlag";
                    flag: string;
                }>]>, "many">>;
                choices: z.ZodDefault<z.ZodArray<z.ZodObject<{
                    id: z.ZodString;
                    label: z.ZodString;
                    count: z.ZodDefault<z.ZodNumber>;
                    scope: z.ZodEnum<["skill", "skillFeat", "classFeat", "generalFeat", "ancestryFeat", "classFeature", "spell", "abilityBoost", "proficiency", "language"]>;
                    filter: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
                    allowDuplicates: z.ZodDefault<z.ZodBoolean>;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                }, {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                }>, "many">>;
                proficiencyBumps: z.ZodDefault<z.ZodArray<z.ZodObject<{
                    target: z.ZodString;
                    rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
                }, "strip", z.ZodTypeAny, {
                    target: string;
                    rank: "untrained" | "trained" | "expert" | "master" | "legendary";
                }, {
                    target: string;
                    rank: "untrained" | "trained" | "expert" | "master" | "legendary";
                }>, "many">>;
                featureRefs: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
            }, "strip", z.ZodTypeAny, {
                choices: {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                }[];
                grants: ({
                    kind: "grantFeat";
                    featId: string;
                    required: boolean;
                    level?: number | undefined;
                } | {
                    kind: "grantProficiency";
                    target: string;
                    rank: "untrained" | "trained" | "expert" | "master" | "legendary";
                } | {
                    kind: "setProficiency";
                    target: string;
                    rank: "untrained" | "trained" | "expert" | "master" | "legendary";
                } | {
                    kind: "abilityBoost";
                    mode: {
                        value: number;
                        type: "fixed";
                        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    } | {
                        value: number;
                        options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                        type: "choice";
                        count: number;
                    } | {
                        value: number;
                        type: "any";
                        count: number;
                    };
                } | {
                    kind: "abilityFlaw";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                } | {
                    value: number;
                    kind: "addModifier";
                    target: string;
                    modifierType: "status" | "item" | "circumstance" | "untyped";
                    label: string;
                    stacking: "max" | "stack";
                } | {
                    kind: "grantTrait";
                    traitId: string;
                } | {
                    kind: "grantLanguage";
                    languageId: string;
                } | {
                    kind: "grantSense";
                    senseId: string;
                    range?: number | undefined;
                } | {
                    kind: "grantChoice";
                    choice: {
                        id: string;
                        count: number;
                        label: string;
                        scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                        allowDuplicates: boolean;
                        filter?: any;
                    };
                } | {
                    value: number;
                    kind: "addSpeed";
                    speedType: "land" | "burrow" | "climb" | "fly" | "swim";
                } | {
                    kind: "grantSpell";
                    spellId: string;
                    rank?: number | undefined;
                    tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
                } | {
                    kind: "grantSpellSlot";
                    rank: number;
                    count: number;
                } | {
                    value: number;
                    kind: "modifyResource";
                    resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
                } | {
                    kind: "grantFlag";
                    flag: string;
                } | {
                    kind: "removeFlag";
                    flag: string;
                })[];
                proficiencyBumps: {
                    target: string;
                    rank: "untrained" | "trained" | "expert" | "master" | "legendary";
                }[];
                featureRefs: string[];
            }, {
                choices?: {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                }[] | undefined;
                grants?: ({
                    kind: "grantFeat";
                    featId: string;
                    level?: number | undefined;
                    required?: boolean | undefined;
                } | {
                    kind: "grantProficiency";
                    target: string;
                    rank: "untrained" | "trained" | "expert" | "master" | "legendary";
                } | {
                    kind: "setProficiency";
                    target: string;
                    rank: "untrained" | "trained" | "expert" | "master" | "legendary";
                } | {
                    kind: "abilityBoost";
                    mode: {
                        type: "fixed";
                        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                        value?: number | undefined;
                    } | {
                        options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                        type: "choice";
                        count: number;
                        value?: number | undefined;
                    } | {
                        type: "any";
                        count: number;
                        value?: number | undefined;
                    };
                } | {
                    kind: "abilityFlaw";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                } | {
                    value: number;
                    kind: "addModifier";
                    target: string;
                    modifierType: "status" | "item" | "circumstance" | "untyped";
                    label: string;
                    stacking?: "max" | "stack" | undefined;
                } | {
                    kind: "grantTrait";
                    traitId: string;
                } | {
                    kind: "grantLanguage";
                    languageId: string;
                } | {
                    kind: "grantSense";
                    senseId: string;
                    range?: number | undefined;
                } | {
                    kind: "grantChoice";
                    choice: {
                        id: string;
                        label: string;
                        scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                        filter?: any;
                        count?: number | undefined;
                        allowDuplicates?: boolean | undefined;
                    };
                } | {
                    value: number;
                    kind: "addSpeed";
                    speedType: "land" | "burrow" | "climb" | "fly" | "swim";
                } | {
                    kind: "grantSpell";
                    spellId: string;
                    rank?: number | undefined;
                    tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
                } | {
                    kind: "grantSpellSlot";
                    rank: number;
                    count: number;
                } | {
                    value: number;
                    kind: "modifyResource";
                    resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
                } | {
                    kind: "grantFlag";
                    flag: string;
                } | {
                    kind: "removeFlag";
                    flag: string;
                })[] | undefined;
                proficiencyBumps?: {
                    target: string;
                    rank: "untrained" | "trained" | "expert" | "master" | "legendary";
                }[] | undefined;
                featureRefs?: string[] | undefined;
            }>>;
            spellcasting: z.ZodOptional<z.ZodObject<{
                tradition: z.ZodOptional<z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>>;
                type: z.ZodOptional<z.ZodEnum<["prepared", "spontaneous", "focus", "innate"]>>;
            }, "strip", z.ZodTypeAny, {
                type?: "focus" | "prepared" | "spontaneous" | "innate" | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            }, {
                type?: "focus" | "prepared" | "spontaneous" | "innate" | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            type: "class";
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            rarity: "common" | "uncommon" | "rare" | "unique";
            traits: string[];
            tags: string[];
            effects: ({
                kind: "grantFeat";
                featId: string;
                required: boolean;
                level?: number | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    value: number;
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                } | {
                    value: number;
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                } | {
                    value: number;
                    type: "any";
                    count: number;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking: "max" | "stack";
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[];
            keyAbility: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            hitPointsPerLevel: number;
            proficiencies: {
                perception: "untrained" | "trained" | "expert" | "master" | "legendary";
                savingThrows: {
                    fortitude: "untrained" | "trained" | "expert" | "master" | "legendary";
                    reflex: "untrained" | "trained" | "expert" | "master" | "legendary";
                    will: "untrained" | "trained" | "expert" | "master" | "legendary";
                };
                skills: {
                    trained: number;
                    additionalChoices: string[];
                };
                attacks: {
                    simple?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    martial?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    advanced?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    unarmed?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                };
                defense: {
                    medium?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    unarmored?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    light?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    heavy?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    shields?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                };
                classDC?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            };
            progression: Record<string, {
                choices: {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                }[];
                grants: ({
                    kind: "grantFeat";
                    featId: string;
                    required: boolean;
                    level?: number | undefined;
                } | {
                    kind: "grantProficiency";
                    target: string;
                    rank: "untrained" | "trained" | "expert" | "master" | "legendary";
                } | {
                    kind: "setProficiency";
                    target: string;
                    rank: "untrained" | "trained" | "expert" | "master" | "legendary";
                } | {
                    kind: "abilityBoost";
                    mode: {
                        value: number;
                        type: "fixed";
                        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    } | {
                        value: number;
                        options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                        type: "choice";
                        count: number;
                    } | {
                        value: number;
                        type: "any";
                        count: number;
                    };
                } | {
                    kind: "abilityFlaw";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                } | {
                    value: number;
                    kind: "addModifier";
                    target: string;
                    modifierType: "status" | "item" | "circumstance" | "untyped";
                    label: string;
                    stacking: "max" | "stack";
                } | {
                    kind: "grantTrait";
                    traitId: string;
                } | {
                    kind: "grantLanguage";
                    languageId: string;
                } | {
                    kind: "grantSense";
                    senseId: string;
                    range?: number | undefined;
                } | {
                    kind: "grantChoice";
                    choice: {
                        id: string;
                        count: number;
                        label: string;
                        scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                        allowDuplicates: boolean;
                        filter?: any;
                    };
                } | {
                    value: number;
                    kind: "addSpeed";
                    speedType: "land" | "burrow" | "climb" | "fly" | "swim";
                } | {
                    kind: "grantSpell";
                    spellId: string;
                    rank?: number | undefined;
                    tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
                } | {
                    kind: "grantSpellSlot";
                    rank: number;
                    count: number;
                } | {
                    value: number;
                    kind: "modifyResource";
                    resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
                } | {
                    kind: "grantFlag";
                    flag: string;
                } | {
                    kind: "removeFlag";
                    flag: string;
                })[];
                proficiencyBumps: {
                    target: string;
                    rank: "untrained" | "trained" | "expert" | "master" | "legendary";
                }[];
                featureRefs: string[];
            }>;
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major: number;
                minor: number;
                patch: number;
            } | undefined;
            prerequisites?: any;
            spellcasting?: {
                type?: "focus" | "prepared" | "spontaneous" | "innate" | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | undefined;
        }, {
            id: string;
            type: "class";
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            keyAbility: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            hitPointsPerLevel: number;
            proficiencies: {
                perception: "untrained" | "trained" | "expert" | "master" | "legendary";
                savingThrows: {
                    fortitude: "untrained" | "trained" | "expert" | "master" | "legendary";
                    reflex: "untrained" | "trained" | "expert" | "master" | "legendary";
                    will: "untrained" | "trained" | "expert" | "master" | "legendary";
                };
                skills: {
                    trained?: number | undefined;
                    additionalChoices?: string[] | undefined;
                };
                attacks?: {
                    simple?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    martial?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    advanced?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    unarmed?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                } | undefined;
                defense?: {
                    medium?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    unarmored?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    light?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    heavy?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    shields?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                } | undefined;
                classDC?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            };
            progression: Record<string, {
                choices?: {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                }[] | undefined;
                grants?: ({
                    kind: "grantFeat";
                    featId: string;
                    level?: number | undefined;
                    required?: boolean | undefined;
                } | {
                    kind: "grantProficiency";
                    target: string;
                    rank: "untrained" | "trained" | "expert" | "master" | "legendary";
                } | {
                    kind: "setProficiency";
                    target: string;
                    rank: "untrained" | "trained" | "expert" | "master" | "legendary";
                } | {
                    kind: "abilityBoost";
                    mode: {
                        type: "fixed";
                        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                        value?: number | undefined;
                    } | {
                        options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                        type: "choice";
                        count: number;
                        value?: number | undefined;
                    } | {
                        type: "any";
                        count: number;
                        value?: number | undefined;
                    };
                } | {
                    kind: "abilityFlaw";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                } | {
                    value: number;
                    kind: "addModifier";
                    target: string;
                    modifierType: "status" | "item" | "circumstance" | "untyped";
                    label: string;
                    stacking?: "max" | "stack" | undefined;
                } | {
                    kind: "grantTrait";
                    traitId: string;
                } | {
                    kind: "grantLanguage";
                    languageId: string;
                } | {
                    kind: "grantSense";
                    senseId: string;
                    range?: number | undefined;
                } | {
                    kind: "grantChoice";
                    choice: {
                        id: string;
                        label: string;
                        scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                        filter?: any;
                        count?: number | undefined;
                        allowDuplicates?: boolean | undefined;
                    };
                } | {
                    value: number;
                    kind: "addSpeed";
                    speedType: "land" | "burrow" | "climb" | "fly" | "swim";
                } | {
                    kind: "grantSpell";
                    spellId: string;
                    rank?: number | undefined;
                    tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
                } | {
                    kind: "grantSpellSlot";
                    rank: number;
                    count: number;
                } | {
                    value: number;
                    kind: "modifyResource";
                    resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
                } | {
                    kind: "grantFlag";
                    flag: string;
                } | {
                    kind: "removeFlag";
                    flag: string;
                })[] | undefined;
                proficiencyBumps?: {
                    target: string;
                    rank: "untrained" | "trained" | "expert" | "master" | "legendary";
                }[] | undefined;
                featureRefs?: string[] | undefined;
            }>;
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major?: number | undefined;
                minor?: number | undefined;
                patch?: number | undefined;
            } | undefined;
            rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
            traits?: string[] | undefined;
            tags?: string[] | undefined;
            prerequisites?: any;
            effects?: ({
                kind: "grantFeat";
                featId: string;
                level?: number | undefined;
                required?: boolean | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    value?: number | undefined;
                } | {
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                    value?: number | undefined;
                } | {
                    type: "any";
                    count: number;
                    value?: number | undefined;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking?: "max" | "stack" | undefined;
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[] | undefined;
            spellcasting?: {
                type?: "focus" | "prepared" | "spontaneous" | "innate" | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | undefined;
        }>, z.ZodObject<{
            id: z.ZodString;
            slug: z.ZodOptional<z.ZodString>;
            name: z.ZodString;
            summary: z.ZodOptional<z.ZodString>;
            description: z.ZodOptional<z.ZodString>;
            source: z.ZodObject<{
                id: z.ZodString;
                page: z.ZodOptional<z.ZodNumber>;
                license: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            }, {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            }>;
            version: z.ZodOptional<z.ZodObject<{
                major: z.ZodDefault<z.ZodNumber>;
                minor: z.ZodDefault<z.ZodNumber>;
                patch: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                major: number;
                minor: number;
                patch: number;
            }, {
                major?: number | undefined;
                minor?: number | undefined;
                patch?: number | undefined;
            }>>;
            rarity: z.ZodDefault<z.ZodEnum<["common", "uncommon", "rare", "unique"]>>;
            traits: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
            tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
            prerequisites: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
            effects: z.ZodDefault<z.ZodArray<z.ZodDiscriminatedUnion<"kind", [z.ZodObject<{
                kind: z.ZodLiteral<"grantFeat">;
                featId: z.ZodString;
                level: z.ZodOptional<z.ZodNumber>;
                required: z.ZodDefault<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                kind: "grantFeat";
                featId: string;
                required: boolean;
                level?: number | undefined;
            }, {
                kind: "grantFeat";
                featId: string;
                level?: number | undefined;
                required?: boolean | undefined;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantProficiency">;
                target: z.ZodString;
                rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
            }, "strip", z.ZodTypeAny, {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            }, {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"setProficiency">;
                target: z.ZodString;
                rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
            }, "strip", z.ZodTypeAny, {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            }, {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"abilityBoost">;
                mode: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                    type: z.ZodLiteral<"fixed">;
                    abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
                    value: z.ZodDefault<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    value: number;
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                }, {
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    value?: number | undefined;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"choice">;
                    count: z.ZodNumber;
                    options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
                    value: z.ZodDefault<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    value: number;
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                }, {
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                    value?: number | undefined;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"any">;
                    count: z.ZodNumber;
                    value: z.ZodDefault<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    value: number;
                    type: "any";
                    count: number;
                }, {
                    type: "any";
                    count: number;
                    value?: number | undefined;
                }>]>;
            }, "strip", z.ZodTypeAny, {
                kind: "abilityBoost";
                mode: {
                    value: number;
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                } | {
                    value: number;
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                } | {
                    value: number;
                    type: "any";
                    count: number;
                };
            }, {
                kind: "abilityBoost";
                mode: {
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    value?: number | undefined;
                } | {
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                    value?: number | undefined;
                } | {
                    type: "any";
                    count: number;
                    value?: number | undefined;
                };
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"abilityFlaw">;
                abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            }, "strip", z.ZodTypeAny, {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            }, {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"addModifier">;
                target: z.ZodString;
                modifierType: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
                value: z.ZodNumber;
                label: z.ZodString;
                stacking: z.ZodDefault<z.ZodEnum<["max", "stack"]>>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking: "max" | "stack";
            }, {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking?: "max" | "stack" | undefined;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantTrait">;
                traitId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                kind: "grantTrait";
                traitId: string;
            }, {
                kind: "grantTrait";
                traitId: string;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantLanguage">;
                languageId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                kind: "grantLanguage";
                languageId: string;
            }, {
                kind: "grantLanguage";
                languageId: string;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantSense">;
                senseId: z.ZodString;
                range: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            }, {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantChoice">;
                choice: z.ZodObject<{
                    id: z.ZodString;
                    label: z.ZodString;
                    count: z.ZodDefault<z.ZodNumber>;
                    scope: z.ZodEnum<["skill", "skillFeat", "classFeat", "generalFeat", "ancestryFeat", "classFeature", "spell", "abilityBoost", "proficiency", "language"]>;
                    filter: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
                    allowDuplicates: z.ZodDefault<z.ZodBoolean>;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                }, {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                kind: "grantChoice";
                choice: {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                };
            }, {
                kind: "grantChoice";
                choice: {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                };
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"addSpeed">;
                speedType: z.ZodEnum<["land", "burrow", "climb", "fly", "swim"]>;
                value: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            }, {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantSpell">;
                spellId: z.ZodString;
                tradition: z.ZodOptional<z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>>;
                rank: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            }, {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantSpellSlot">;
                rank: z.ZodNumber;
                count: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            }, {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"modifyResource">;
                resource: z.ZodEnum<["focusPoints", "hitPoints", "resolve", "classDc", "heroPoints"]>;
                value: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            }, {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantFlag">;
                flag: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                kind: "grantFlag";
                flag: string;
            }, {
                kind: "grantFlag";
                flag: string;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"removeFlag">;
                flag: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                kind: "removeFlag";
                flag: string;
            }, {
                kind: "removeFlag";
                flag: string;
            }>]>, "many">>;
        } & {
            type: z.ZodLiteral<"archetype">;
            dedicationFeatId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            type: "archetype";
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            rarity: "common" | "uncommon" | "rare" | "unique";
            traits: string[];
            tags: string[];
            effects: ({
                kind: "grantFeat";
                featId: string;
                required: boolean;
                level?: number | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    value: number;
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                } | {
                    value: number;
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                } | {
                    value: number;
                    type: "any";
                    count: number;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking: "max" | "stack";
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[];
            dedicationFeatId: string;
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major: number;
                minor: number;
                patch: number;
            } | undefined;
            prerequisites?: any;
        }, {
            id: string;
            type: "archetype";
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            dedicationFeatId: string;
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major?: number | undefined;
                minor?: number | undefined;
                patch?: number | undefined;
            } | undefined;
            rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
            traits?: string[] | undefined;
            tags?: string[] | undefined;
            prerequisites?: any;
            effects?: ({
                kind: "grantFeat";
                featId: string;
                level?: number | undefined;
                required?: boolean | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    value?: number | undefined;
                } | {
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                    value?: number | undefined;
                } | {
                    type: "any";
                    count: number;
                    value?: number | undefined;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking?: "max" | "stack" | undefined;
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[] | undefined;
        }>, z.ZodObject<{
            id: z.ZodString;
            slug: z.ZodOptional<z.ZodString>;
            name: z.ZodString;
            summary: z.ZodOptional<z.ZodString>;
            description: z.ZodOptional<z.ZodString>;
            source: z.ZodObject<{
                id: z.ZodString;
                page: z.ZodOptional<z.ZodNumber>;
                license: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            }, {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            }>;
            version: z.ZodOptional<z.ZodObject<{
                major: z.ZodDefault<z.ZodNumber>;
                minor: z.ZodDefault<z.ZodNumber>;
                patch: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                major: number;
                minor: number;
                patch: number;
            }, {
                major?: number | undefined;
                minor?: number | undefined;
                patch?: number | undefined;
            }>>;
            rarity: z.ZodDefault<z.ZodEnum<["common", "uncommon", "rare", "unique"]>>;
            traits: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
            tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
            prerequisites: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
            effects: z.ZodDefault<z.ZodArray<z.ZodDiscriminatedUnion<"kind", [z.ZodObject<{
                kind: z.ZodLiteral<"grantFeat">;
                featId: z.ZodString;
                level: z.ZodOptional<z.ZodNumber>;
                required: z.ZodDefault<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                kind: "grantFeat";
                featId: string;
                required: boolean;
                level?: number | undefined;
            }, {
                kind: "grantFeat";
                featId: string;
                level?: number | undefined;
                required?: boolean | undefined;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantProficiency">;
                target: z.ZodString;
                rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
            }, "strip", z.ZodTypeAny, {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            }, {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"setProficiency">;
                target: z.ZodString;
                rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
            }, "strip", z.ZodTypeAny, {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            }, {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"abilityBoost">;
                mode: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                    type: z.ZodLiteral<"fixed">;
                    abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
                    value: z.ZodDefault<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    value: number;
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                }, {
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    value?: number | undefined;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"choice">;
                    count: z.ZodNumber;
                    options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
                    value: z.ZodDefault<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    value: number;
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                }, {
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                    value?: number | undefined;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"any">;
                    count: z.ZodNumber;
                    value: z.ZodDefault<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    value: number;
                    type: "any";
                    count: number;
                }, {
                    type: "any";
                    count: number;
                    value?: number | undefined;
                }>]>;
            }, "strip", z.ZodTypeAny, {
                kind: "abilityBoost";
                mode: {
                    value: number;
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                } | {
                    value: number;
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                } | {
                    value: number;
                    type: "any";
                    count: number;
                };
            }, {
                kind: "abilityBoost";
                mode: {
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    value?: number | undefined;
                } | {
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                    value?: number | undefined;
                } | {
                    type: "any";
                    count: number;
                    value?: number | undefined;
                };
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"abilityFlaw">;
                abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            }, "strip", z.ZodTypeAny, {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            }, {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"addModifier">;
                target: z.ZodString;
                modifierType: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
                value: z.ZodNumber;
                label: z.ZodString;
                stacking: z.ZodDefault<z.ZodEnum<["max", "stack"]>>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking: "max" | "stack";
            }, {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking?: "max" | "stack" | undefined;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantTrait">;
                traitId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                kind: "grantTrait";
                traitId: string;
            }, {
                kind: "grantTrait";
                traitId: string;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantLanguage">;
                languageId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                kind: "grantLanguage";
                languageId: string;
            }, {
                kind: "grantLanguage";
                languageId: string;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantSense">;
                senseId: z.ZodString;
                range: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            }, {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantChoice">;
                choice: z.ZodObject<{
                    id: z.ZodString;
                    label: z.ZodString;
                    count: z.ZodDefault<z.ZodNumber>;
                    scope: z.ZodEnum<["skill", "skillFeat", "classFeat", "generalFeat", "ancestryFeat", "classFeature", "spell", "abilityBoost", "proficiency", "language"]>;
                    filter: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
                    allowDuplicates: z.ZodDefault<z.ZodBoolean>;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                }, {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                kind: "grantChoice";
                choice: {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                };
            }, {
                kind: "grantChoice";
                choice: {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                };
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"addSpeed">;
                speedType: z.ZodEnum<["land", "burrow", "climb", "fly", "swim"]>;
                value: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            }, {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantSpell">;
                spellId: z.ZodString;
                tradition: z.ZodOptional<z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>>;
                rank: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            }, {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantSpellSlot">;
                rank: z.ZodNumber;
                count: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            }, {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"modifyResource">;
                resource: z.ZodEnum<["focusPoints", "hitPoints", "resolve", "classDc", "heroPoints"]>;
                value: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            }, {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantFlag">;
                flag: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                kind: "grantFlag";
                flag: string;
            }, {
                kind: "grantFlag";
                flag: string;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"removeFlag">;
                flag: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                kind: "removeFlag";
                flag: string;
            }, {
                kind: "removeFlag";
                flag: string;
            }>]>, "many">>;
        } & {
            type: z.ZodLiteral<"feat">;
            level: z.ZodNumber;
            category: z.ZodEnum<["ancestry", "class", "skill", "general", "archetype"]>;
            actionCost: z.ZodOptional<z.ZodObject<{
                type: z.ZodOptional<z.ZodEnum<["one", "two", "three", "free", "reaction", "varies"]>>;
                trait: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                type?: "one" | "two" | "three" | "free" | "reaction" | "varies" | undefined;
                trait?: string | undefined;
            }, {
                type?: "one" | "two" | "three" | "free" | "reaction" | "varies" | undefined;
                trait?: string | undefined;
            }>>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            type: "feat";
            level: number;
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            rarity: "common" | "uncommon" | "rare" | "unique";
            traits: string[];
            tags: string[];
            effects: ({
                kind: "grantFeat";
                featId: string;
                required: boolean;
                level?: number | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    value: number;
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                } | {
                    value: number;
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                } | {
                    value: number;
                    type: "any";
                    count: number;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking: "max" | "stack";
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[];
            category: "skill" | "ancestry" | "class" | "archetype" | "general";
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major: number;
                minor: number;
                patch: number;
            } | undefined;
            prerequisites?: any;
            actionCost?: {
                type?: "one" | "two" | "three" | "free" | "reaction" | "varies" | undefined;
                trait?: string | undefined;
            } | undefined;
        }, {
            id: string;
            type: "feat";
            level: number;
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            category: "skill" | "ancestry" | "class" | "archetype" | "general";
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major?: number | undefined;
                minor?: number | undefined;
                patch?: number | undefined;
            } | undefined;
            rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
            traits?: string[] | undefined;
            tags?: string[] | undefined;
            prerequisites?: any;
            effects?: ({
                kind: "grantFeat";
                featId: string;
                level?: number | undefined;
                required?: boolean | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    value?: number | undefined;
                } | {
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                    value?: number | undefined;
                } | {
                    type: "any";
                    count: number;
                    value?: number | undefined;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking?: "max" | "stack" | undefined;
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[] | undefined;
            actionCost?: {
                type?: "one" | "two" | "three" | "free" | "reaction" | "varies" | undefined;
                trait?: string | undefined;
            } | undefined;
        }>, z.ZodObject<{
            id: z.ZodString;
            slug: z.ZodOptional<z.ZodString>;
            name: z.ZodString;
            summary: z.ZodOptional<z.ZodString>;
            description: z.ZodOptional<z.ZodString>;
            source: z.ZodObject<{
                id: z.ZodString;
                page: z.ZodOptional<z.ZodNumber>;
                license: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            }, {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            }>;
            version: z.ZodOptional<z.ZodObject<{
                major: z.ZodDefault<z.ZodNumber>;
                minor: z.ZodDefault<z.ZodNumber>;
                patch: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                major: number;
                minor: number;
                patch: number;
            }, {
                major?: number | undefined;
                minor?: number | undefined;
                patch?: number | undefined;
            }>>;
            rarity: z.ZodDefault<z.ZodEnum<["common", "uncommon", "rare", "unique"]>>;
            tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
            prerequisites: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
            effects: z.ZodDefault<z.ZodArray<z.ZodDiscriminatedUnion<"kind", [z.ZodObject<{
                kind: z.ZodLiteral<"grantFeat">;
                featId: z.ZodString;
                level: z.ZodOptional<z.ZodNumber>;
                required: z.ZodDefault<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                kind: "grantFeat";
                featId: string;
                required: boolean;
                level?: number | undefined;
            }, {
                kind: "grantFeat";
                featId: string;
                level?: number | undefined;
                required?: boolean | undefined;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantProficiency">;
                target: z.ZodString;
                rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
            }, "strip", z.ZodTypeAny, {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            }, {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"setProficiency">;
                target: z.ZodString;
                rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
            }, "strip", z.ZodTypeAny, {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            }, {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"abilityBoost">;
                mode: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                    type: z.ZodLiteral<"fixed">;
                    abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
                    value: z.ZodDefault<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    value: number;
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                }, {
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    value?: number | undefined;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"choice">;
                    count: z.ZodNumber;
                    options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
                    value: z.ZodDefault<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    value: number;
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                }, {
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                    value?: number | undefined;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"any">;
                    count: z.ZodNumber;
                    value: z.ZodDefault<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    value: number;
                    type: "any";
                    count: number;
                }, {
                    type: "any";
                    count: number;
                    value?: number | undefined;
                }>]>;
            }, "strip", z.ZodTypeAny, {
                kind: "abilityBoost";
                mode: {
                    value: number;
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                } | {
                    value: number;
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                } | {
                    value: number;
                    type: "any";
                    count: number;
                };
            }, {
                kind: "abilityBoost";
                mode: {
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    value?: number | undefined;
                } | {
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                    value?: number | undefined;
                } | {
                    type: "any";
                    count: number;
                    value?: number | undefined;
                };
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"abilityFlaw">;
                abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            }, "strip", z.ZodTypeAny, {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            }, {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"addModifier">;
                target: z.ZodString;
                modifierType: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
                value: z.ZodNumber;
                label: z.ZodString;
                stacking: z.ZodDefault<z.ZodEnum<["max", "stack"]>>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking: "max" | "stack";
            }, {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking?: "max" | "stack" | undefined;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantTrait">;
                traitId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                kind: "grantTrait";
                traitId: string;
            }, {
                kind: "grantTrait";
                traitId: string;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantLanguage">;
                languageId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                kind: "grantLanguage";
                languageId: string;
            }, {
                kind: "grantLanguage";
                languageId: string;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantSense">;
                senseId: z.ZodString;
                range: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            }, {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantChoice">;
                choice: z.ZodObject<{
                    id: z.ZodString;
                    label: z.ZodString;
                    count: z.ZodDefault<z.ZodNumber>;
                    scope: z.ZodEnum<["skill", "skillFeat", "classFeat", "generalFeat", "ancestryFeat", "classFeature", "spell", "abilityBoost", "proficiency", "language"]>;
                    filter: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
                    allowDuplicates: z.ZodDefault<z.ZodBoolean>;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                }, {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                kind: "grantChoice";
                choice: {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                };
            }, {
                kind: "grantChoice";
                choice: {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                };
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"addSpeed">;
                speedType: z.ZodEnum<["land", "burrow", "climb", "fly", "swim"]>;
                value: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            }, {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantSpell">;
                spellId: z.ZodString;
                tradition: z.ZodOptional<z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>>;
                rank: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            }, {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantSpellSlot">;
                rank: z.ZodNumber;
                count: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            }, {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"modifyResource">;
                resource: z.ZodEnum<["focusPoints", "hitPoints", "resolve", "classDc", "heroPoints"]>;
                value: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            }, {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantFlag">;
                flag: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                kind: "grantFlag";
                flag: string;
            }, {
                kind: "grantFlag";
                flag: string;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"removeFlag">;
                flag: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                kind: "removeFlag";
                flag: string;
            }, {
                kind: "removeFlag";
                flag: string;
            }>]>, "many">>;
        } & {
            type: z.ZodLiteral<"spell">;
            rank: z.ZodNumber;
            traditions: z.ZodDefault<z.ZodArray<z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>, "many">>;
            traits: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
            duration: z.ZodOptional<z.ZodString>;
            range: z.ZodOptional<z.ZodString>;
            targets: z.ZodOptional<z.ZodString>;
            savingThrow: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            type: "spell";
            rank: number;
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            rarity: "common" | "uncommon" | "rare" | "unique";
            traits: string[];
            tags: string[];
            effects: ({
                kind: "grantFeat";
                featId: string;
                required: boolean;
                level?: number | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    value: number;
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                } | {
                    value: number;
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                } | {
                    value: number;
                    type: "any";
                    count: number;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking: "max" | "stack";
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[];
            traditions: ("arcane" | "divine" | "occult" | "primal" | "focus")[];
            range?: string | undefined;
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major: number;
                minor: number;
                patch: number;
            } | undefined;
            prerequisites?: any;
            duration?: string | undefined;
            targets?: string | undefined;
            savingThrow?: string | undefined;
        }, {
            id: string;
            type: "spell";
            rank: number;
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            range?: string | undefined;
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major?: number | undefined;
                minor?: number | undefined;
                patch?: number | undefined;
            } | undefined;
            rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
            traits?: string[] | undefined;
            tags?: string[] | undefined;
            prerequisites?: any;
            effects?: ({
                kind: "grantFeat";
                featId: string;
                level?: number | undefined;
                required?: boolean | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    value?: number | undefined;
                } | {
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                    value?: number | undefined;
                } | {
                    type: "any";
                    count: number;
                    value?: number | undefined;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking?: "max" | "stack" | undefined;
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[] | undefined;
            traditions?: ("arcane" | "divine" | "occult" | "primal" | "focus")[] | undefined;
            duration?: string | undefined;
            targets?: string | undefined;
            savingThrow?: string | undefined;
        }>, z.ZodObject<{
            id: z.ZodString;
            slug: z.ZodOptional<z.ZodString>;
            name: z.ZodString;
            summary: z.ZodOptional<z.ZodString>;
            description: z.ZodOptional<z.ZodString>;
            source: z.ZodObject<{
                id: z.ZodString;
                page: z.ZodOptional<z.ZodNumber>;
                license: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            }, {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            }>;
            version: z.ZodOptional<z.ZodObject<{
                major: z.ZodDefault<z.ZodNumber>;
                minor: z.ZodDefault<z.ZodNumber>;
                patch: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                major: number;
                minor: number;
                patch: number;
            }, {
                major?: number | undefined;
                minor?: number | undefined;
                patch?: number | undefined;
            }>>;
            rarity: z.ZodDefault<z.ZodEnum<["common", "uncommon", "rare", "unique"]>>;
            tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
            prerequisites: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
            effects: z.ZodDefault<z.ZodArray<z.ZodDiscriminatedUnion<"kind", [z.ZodObject<{
                kind: z.ZodLiteral<"grantFeat">;
                featId: z.ZodString;
                level: z.ZodOptional<z.ZodNumber>;
                required: z.ZodDefault<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                kind: "grantFeat";
                featId: string;
                required: boolean;
                level?: number | undefined;
            }, {
                kind: "grantFeat";
                featId: string;
                level?: number | undefined;
                required?: boolean | undefined;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantProficiency">;
                target: z.ZodString;
                rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
            }, "strip", z.ZodTypeAny, {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            }, {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"setProficiency">;
                target: z.ZodString;
                rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
            }, "strip", z.ZodTypeAny, {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            }, {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"abilityBoost">;
                mode: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                    type: z.ZodLiteral<"fixed">;
                    abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
                    value: z.ZodDefault<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    value: number;
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                }, {
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    value?: number | undefined;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"choice">;
                    count: z.ZodNumber;
                    options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
                    value: z.ZodDefault<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    value: number;
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                }, {
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                    value?: number | undefined;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"any">;
                    count: z.ZodNumber;
                    value: z.ZodDefault<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    value: number;
                    type: "any";
                    count: number;
                }, {
                    type: "any";
                    count: number;
                    value?: number | undefined;
                }>]>;
            }, "strip", z.ZodTypeAny, {
                kind: "abilityBoost";
                mode: {
                    value: number;
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                } | {
                    value: number;
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                } | {
                    value: number;
                    type: "any";
                    count: number;
                };
            }, {
                kind: "abilityBoost";
                mode: {
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    value?: number | undefined;
                } | {
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                    value?: number | undefined;
                } | {
                    type: "any";
                    count: number;
                    value?: number | undefined;
                };
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"abilityFlaw">;
                abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            }, "strip", z.ZodTypeAny, {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            }, {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"addModifier">;
                target: z.ZodString;
                modifierType: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
                value: z.ZodNumber;
                label: z.ZodString;
                stacking: z.ZodDefault<z.ZodEnum<["max", "stack"]>>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking: "max" | "stack";
            }, {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking?: "max" | "stack" | undefined;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantTrait">;
                traitId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                kind: "grantTrait";
                traitId: string;
            }, {
                kind: "grantTrait";
                traitId: string;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantLanguage">;
                languageId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                kind: "grantLanguage";
                languageId: string;
            }, {
                kind: "grantLanguage";
                languageId: string;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantSense">;
                senseId: z.ZodString;
                range: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            }, {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantChoice">;
                choice: z.ZodObject<{
                    id: z.ZodString;
                    label: z.ZodString;
                    count: z.ZodDefault<z.ZodNumber>;
                    scope: z.ZodEnum<["skill", "skillFeat", "classFeat", "generalFeat", "ancestryFeat", "classFeature", "spell", "abilityBoost", "proficiency", "language"]>;
                    filter: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
                    allowDuplicates: z.ZodDefault<z.ZodBoolean>;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                }, {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                kind: "grantChoice";
                choice: {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                };
            }, {
                kind: "grantChoice";
                choice: {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                };
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"addSpeed">;
                speedType: z.ZodEnum<["land", "burrow", "climb", "fly", "swim"]>;
                value: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            }, {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantSpell">;
                spellId: z.ZodString;
                tradition: z.ZodOptional<z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>>;
                rank: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            }, {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantSpellSlot">;
                rank: z.ZodNumber;
                count: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            }, {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"modifyResource">;
                resource: z.ZodEnum<["focusPoints", "hitPoints", "resolve", "classDc", "heroPoints"]>;
                value: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            }, {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantFlag">;
                flag: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                kind: "grantFlag";
                flag: string;
            }, {
                kind: "grantFlag";
                flag: string;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"removeFlag">;
                flag: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                kind: "removeFlag";
                flag: string;
            }, {
                kind: "removeFlag";
                flag: string;
            }>]>, "many">>;
        } & {
            type: z.ZodLiteral<"item">;
            level: z.ZodNumber;
            price: z.ZodOptional<z.ZodString>;
            bulk: z.ZodOptional<z.ZodString>;
            traits: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            type: "item";
            level: number;
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            rarity: "common" | "uncommon" | "rare" | "unique";
            traits: string[];
            tags: string[];
            effects: ({
                kind: "grantFeat";
                featId: string;
                required: boolean;
                level?: number | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    value: number;
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                } | {
                    value: number;
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                } | {
                    value: number;
                    type: "any";
                    count: number;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking: "max" | "stack";
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[];
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major: number;
                minor: number;
                patch: number;
            } | undefined;
            prerequisites?: any;
            price?: string | undefined;
            bulk?: string | undefined;
        }, {
            id: string;
            type: "item";
            level: number;
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major?: number | undefined;
                minor?: number | undefined;
                patch?: number | undefined;
            } | undefined;
            rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
            traits?: string[] | undefined;
            tags?: string[] | undefined;
            prerequisites?: any;
            effects?: ({
                kind: "grantFeat";
                featId: string;
                level?: number | undefined;
                required?: boolean | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    value?: number | undefined;
                } | {
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                    value?: number | undefined;
                } | {
                    type: "any";
                    count: number;
                    value?: number | undefined;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking?: "max" | "stack" | undefined;
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[] | undefined;
            price?: string | undefined;
            bulk?: string | undefined;
        }>, z.ZodObject<{
            id: z.ZodString;
            slug: z.ZodOptional<z.ZodString>;
            name: z.ZodString;
            summary: z.ZodOptional<z.ZodString>;
            description: z.ZodOptional<z.ZodString>;
            source: z.ZodObject<{
                id: z.ZodString;
                page: z.ZodOptional<z.ZodNumber>;
                license: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            }, {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            }>;
            version: z.ZodOptional<z.ZodObject<{
                major: z.ZodDefault<z.ZodNumber>;
                minor: z.ZodDefault<z.ZodNumber>;
                patch: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                major: number;
                minor: number;
                patch: number;
            }, {
                major?: number | undefined;
                minor?: number | undefined;
                patch?: number | undefined;
            }>>;
            rarity: z.ZodDefault<z.ZodEnum<["common", "uncommon", "rare", "unique"]>>;
            traits: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
            tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
            prerequisites: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
            effects: z.ZodDefault<z.ZodArray<z.ZodDiscriminatedUnion<"kind", [z.ZodObject<{
                kind: z.ZodLiteral<"grantFeat">;
                featId: z.ZodString;
                level: z.ZodOptional<z.ZodNumber>;
                required: z.ZodDefault<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                kind: "grantFeat";
                featId: string;
                required: boolean;
                level?: number | undefined;
            }, {
                kind: "grantFeat";
                featId: string;
                level?: number | undefined;
                required?: boolean | undefined;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantProficiency">;
                target: z.ZodString;
                rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
            }, "strip", z.ZodTypeAny, {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            }, {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"setProficiency">;
                target: z.ZodString;
                rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
            }, "strip", z.ZodTypeAny, {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            }, {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"abilityBoost">;
                mode: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                    type: z.ZodLiteral<"fixed">;
                    abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
                    value: z.ZodDefault<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    value: number;
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                }, {
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    value?: number | undefined;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"choice">;
                    count: z.ZodNumber;
                    options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
                    value: z.ZodDefault<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    value: number;
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                }, {
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                    value?: number | undefined;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"any">;
                    count: z.ZodNumber;
                    value: z.ZodDefault<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    value: number;
                    type: "any";
                    count: number;
                }, {
                    type: "any";
                    count: number;
                    value?: number | undefined;
                }>]>;
            }, "strip", z.ZodTypeAny, {
                kind: "abilityBoost";
                mode: {
                    value: number;
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                } | {
                    value: number;
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                } | {
                    value: number;
                    type: "any";
                    count: number;
                };
            }, {
                kind: "abilityBoost";
                mode: {
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    value?: number | undefined;
                } | {
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                    value?: number | undefined;
                } | {
                    type: "any";
                    count: number;
                    value?: number | undefined;
                };
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"abilityFlaw">;
                abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            }, "strip", z.ZodTypeAny, {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            }, {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"addModifier">;
                target: z.ZodString;
                modifierType: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
                value: z.ZodNumber;
                label: z.ZodString;
                stacking: z.ZodDefault<z.ZodEnum<["max", "stack"]>>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking: "max" | "stack";
            }, {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking?: "max" | "stack" | undefined;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantTrait">;
                traitId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                kind: "grantTrait";
                traitId: string;
            }, {
                kind: "grantTrait";
                traitId: string;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantLanguage">;
                languageId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                kind: "grantLanguage";
                languageId: string;
            }, {
                kind: "grantLanguage";
                languageId: string;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantSense">;
                senseId: z.ZodString;
                range: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            }, {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantChoice">;
                choice: z.ZodObject<{
                    id: z.ZodString;
                    label: z.ZodString;
                    count: z.ZodDefault<z.ZodNumber>;
                    scope: z.ZodEnum<["skill", "skillFeat", "classFeat", "generalFeat", "ancestryFeat", "classFeature", "spell", "abilityBoost", "proficiency", "language"]>;
                    filter: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
                    allowDuplicates: z.ZodDefault<z.ZodBoolean>;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                }, {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                kind: "grantChoice";
                choice: {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                };
            }, {
                kind: "grantChoice";
                choice: {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                };
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"addSpeed">;
                speedType: z.ZodEnum<["land", "burrow", "climb", "fly", "swim"]>;
                value: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            }, {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantSpell">;
                spellId: z.ZodString;
                tradition: z.ZodOptional<z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>>;
                rank: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            }, {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantSpellSlot">;
                rank: z.ZodNumber;
                count: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            }, {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"modifyResource">;
                resource: z.ZodEnum<["focusPoints", "hitPoints", "resolve", "classDc", "heroPoints"]>;
                value: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            }, {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantFlag">;
                flag: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                kind: "grantFlag";
                flag: string;
            }, {
                kind: "grantFlag";
                flag: string;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"removeFlag">;
                flag: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                kind: "removeFlag";
                flag: string;
            }, {
                kind: "removeFlag";
                flag: string;
            }>]>, "many">>;
        } & {
            type: z.ZodLiteral<"condition">;
            levels: z.ZodDefault<z.ZodArray<z.ZodNumber, "many">>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            type: "condition";
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            rarity: "common" | "uncommon" | "rare" | "unique";
            traits: string[];
            tags: string[];
            effects: ({
                kind: "grantFeat";
                featId: string;
                required: boolean;
                level?: number | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    value: number;
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                } | {
                    value: number;
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                } | {
                    value: number;
                    type: "any";
                    count: number;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking: "max" | "stack";
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[];
            levels: number[];
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major: number;
                minor: number;
                patch: number;
            } | undefined;
            prerequisites?: any;
        }, {
            id: string;
            type: "condition";
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major?: number | undefined;
                minor?: number | undefined;
                patch?: number | undefined;
            } | undefined;
            rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
            traits?: string[] | undefined;
            tags?: string[] | undefined;
            prerequisites?: any;
            effects?: ({
                kind: "grantFeat";
                featId: string;
                level?: number | undefined;
                required?: boolean | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    value?: number | undefined;
                } | {
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                    value?: number | undefined;
                } | {
                    type: "any";
                    count: number;
                    value?: number | undefined;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking?: "max" | "stack" | undefined;
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[] | undefined;
            levels?: number[] | undefined;
        }>, z.ZodObject<{
            id: z.ZodString;
            slug: z.ZodOptional<z.ZodString>;
            name: z.ZodString;
            summary: z.ZodOptional<z.ZodString>;
            description: z.ZodOptional<z.ZodString>;
            source: z.ZodObject<{
                id: z.ZodString;
                page: z.ZodOptional<z.ZodNumber>;
                license: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            }, {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            }>;
            version: z.ZodOptional<z.ZodObject<{
                major: z.ZodDefault<z.ZodNumber>;
                minor: z.ZodDefault<z.ZodNumber>;
                patch: z.ZodDefault<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                major: number;
                minor: number;
                patch: number;
            }, {
                major?: number | undefined;
                minor?: number | undefined;
                patch?: number | undefined;
            }>>;
            rarity: z.ZodDefault<z.ZodEnum<["common", "uncommon", "rare", "unique"]>>;
            traits: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
            tags: z.ZodDefault<z.ZodArray<z.ZodString, "many">>;
            prerequisites: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
            effects: z.ZodDefault<z.ZodArray<z.ZodDiscriminatedUnion<"kind", [z.ZodObject<{
                kind: z.ZodLiteral<"grantFeat">;
                featId: z.ZodString;
                level: z.ZodOptional<z.ZodNumber>;
                required: z.ZodDefault<z.ZodBoolean>;
            }, "strip", z.ZodTypeAny, {
                kind: "grantFeat";
                featId: string;
                required: boolean;
                level?: number | undefined;
            }, {
                kind: "grantFeat";
                featId: string;
                level?: number | undefined;
                required?: boolean | undefined;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantProficiency">;
                target: z.ZodString;
                rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
            }, "strip", z.ZodTypeAny, {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            }, {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"setProficiency">;
                target: z.ZodString;
                rank: z.ZodEnum<["untrained", "trained", "expert", "master", "legendary"]>;
            }, "strip", z.ZodTypeAny, {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            }, {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"abilityBoost">;
                mode: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
                    type: z.ZodLiteral<"fixed">;
                    abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
                    value: z.ZodDefault<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    value: number;
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                }, {
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    value?: number | undefined;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"choice">;
                    count: z.ZodNumber;
                    options: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
                    value: z.ZodDefault<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    value: number;
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                }, {
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                    value?: number | undefined;
                }>, z.ZodObject<{
                    type: z.ZodLiteral<"any">;
                    count: z.ZodNumber;
                    value: z.ZodDefault<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    value: number;
                    type: "any";
                    count: number;
                }, {
                    type: "any";
                    count: number;
                    value?: number | undefined;
                }>]>;
            }, "strip", z.ZodTypeAny, {
                kind: "abilityBoost";
                mode: {
                    value: number;
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                } | {
                    value: number;
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                } | {
                    value: number;
                    type: "any";
                    count: number;
                };
            }, {
                kind: "abilityBoost";
                mode: {
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    value?: number | undefined;
                } | {
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                    value?: number | undefined;
                } | {
                    type: "any";
                    count: number;
                    value?: number | undefined;
                };
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"abilityFlaw">;
                abilities: z.ZodArray<z.ZodEnum<["STR", "DEX", "CON", "INT", "WIS", "CHA"]>, "many">;
            }, "strip", z.ZodTypeAny, {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            }, {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"addModifier">;
                target: z.ZodString;
                modifierType: z.ZodEnum<["status", "item", "circumstance", "untyped"]>;
                value: z.ZodNumber;
                label: z.ZodString;
                stacking: z.ZodDefault<z.ZodEnum<["max", "stack"]>>;
            }, "strip", z.ZodTypeAny, {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking: "max" | "stack";
            }, {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking?: "max" | "stack" | undefined;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantTrait">;
                traitId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                kind: "grantTrait";
                traitId: string;
            }, {
                kind: "grantTrait";
                traitId: string;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantLanguage">;
                languageId: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                kind: "grantLanguage";
                languageId: string;
            }, {
                kind: "grantLanguage";
                languageId: string;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantSense">;
                senseId: z.ZodString;
                range: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            }, {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantChoice">;
                choice: z.ZodObject<{
                    id: z.ZodString;
                    label: z.ZodString;
                    count: z.ZodDefault<z.ZodNumber>;
                    scope: z.ZodEnum<["skill", "skillFeat", "classFeat", "generalFeat", "ancestryFeat", "classFeature", "spell", "abilityBoost", "proficiency", "language"]>;
                    filter: z.ZodOptional<z.ZodType<any, z.ZodTypeDef, any>>;
                    allowDuplicates: z.ZodDefault<z.ZodBoolean>;
                }, "strip", z.ZodTypeAny, {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                }, {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                }>;
            }, "strip", z.ZodTypeAny, {
                kind: "grantChoice";
                choice: {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                };
            }, {
                kind: "grantChoice";
                choice: {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                };
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"addSpeed">;
                speedType: z.ZodEnum<["land", "burrow", "climb", "fly", "swim"]>;
                value: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            }, {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantSpell">;
                spellId: z.ZodString;
                tradition: z.ZodOptional<z.ZodEnum<["arcane", "divine", "occult", "primal", "focus"]>>;
                rank: z.ZodOptional<z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            }, {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantSpellSlot">;
                rank: z.ZodNumber;
                count: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            }, {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"modifyResource">;
                resource: z.ZodEnum<["focusPoints", "hitPoints", "resolve", "classDc", "heroPoints"]>;
                value: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            }, {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"grantFlag">;
                flag: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                kind: "grantFlag";
                flag: string;
            }, {
                kind: "grantFlag";
                flag: string;
            }>, z.ZodObject<{
                kind: z.ZodLiteral<"removeFlag">;
                flag: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                kind: "removeFlag";
                flag: string;
            }, {
                kind: "removeFlag";
                flag: string;
            }>]>, "many">>;
        } & {
            type: z.ZodLiteral<"rule">;
            category: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            type: "rule";
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            rarity: "common" | "uncommon" | "rare" | "unique";
            traits: string[];
            tags: string[];
            effects: ({
                kind: "grantFeat";
                featId: string;
                required: boolean;
                level?: number | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    value: number;
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                } | {
                    value: number;
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                } | {
                    value: number;
                    type: "any";
                    count: number;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking: "max" | "stack";
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[];
            category: string;
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major: number;
                minor: number;
                patch: number;
            } | undefined;
            prerequisites?: any;
        }, {
            id: string;
            type: "rule";
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            category: string;
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major?: number | undefined;
                minor?: number | undefined;
                patch?: number | undefined;
            } | undefined;
            rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
            traits?: string[] | undefined;
            tags?: string[] | undefined;
            prerequisites?: any;
            effects?: ({
                kind: "grantFeat";
                featId: string;
                level?: number | undefined;
                required?: boolean | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    value?: number | undefined;
                } | {
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                    value?: number | undefined;
                } | {
                    type: "any";
                    count: number;
                    value?: number | undefined;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking?: "max" | "stack" | undefined;
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[] | undefined;
        }>]>;
        packId: z.ZodString;
        hash: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        hash: string;
        entity: {
            id: string;
            type: "ancestry";
            hitPoints: number;
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            rarity: "common" | "uncommon" | "rare" | "unique";
            traits: string[];
            tags: string[];
            effects: ({
                kind: "grantFeat";
                featId: string;
                required: boolean;
                level?: number | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    value: number;
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                } | {
                    value: number;
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                } | {
                    value: number;
                    type: "any";
                    count: number;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking: "max" | "stack";
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[];
            size: "tiny" | "small" | "medium" | "large" | "huge" | "gargantuan";
            speed: number;
            boosts: ({
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            } | {
                value: number;
                type: "any";
                count: number;
            })[];
            flaws: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            languages: {
                granted: string[];
                choices: {
                    options: string[];
                    count: number;
                };
            };
            features: string[];
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major: number;
                minor: number;
                patch: number;
            } | undefined;
            prerequisites?: any;
        } | {
            id: string;
            type: "heritage";
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            rarity: "common" | "uncommon" | "rare" | "unique";
            traits: string[];
            tags: string[];
            effects: ({
                kind: "grantFeat";
                featId: string;
                required: boolean;
                level?: number | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    value: number;
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                } | {
                    value: number;
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                } | {
                    value: number;
                    type: "any";
                    count: number;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking: "max" | "stack";
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[];
            ancestryId: string;
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major: number;
                minor: number;
                patch: number;
            } | undefined;
            prerequisites?: any;
        } | {
            id: string;
            type: "background";
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            rarity: "common" | "uncommon" | "rare" | "unique";
            traits: string[];
            tags: string[];
            effects: ({
                kind: "grantFeat";
                featId: string;
                required: boolean;
                level?: number | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    value: number;
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                } | {
                    value: number;
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                } | {
                    value: number;
                    type: "any";
                    count: number;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking: "max" | "stack";
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[];
            boosts: ({
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            } | {
                value: number;
                type: "any";
                count: number;
            })[];
            skillTraining: string[];
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major: number;
                minor: number;
                patch: number;
            } | undefined;
            prerequisites?: any;
            feat?: string | undefined;
        } | {
            id: string;
            type: "class";
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            rarity: "common" | "uncommon" | "rare" | "unique";
            traits: string[];
            tags: string[];
            effects: ({
                kind: "grantFeat";
                featId: string;
                required: boolean;
                level?: number | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    value: number;
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                } | {
                    value: number;
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                } | {
                    value: number;
                    type: "any";
                    count: number;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking: "max" | "stack";
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[];
            keyAbility: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            hitPointsPerLevel: number;
            proficiencies: {
                perception: "untrained" | "trained" | "expert" | "master" | "legendary";
                savingThrows: {
                    fortitude: "untrained" | "trained" | "expert" | "master" | "legendary";
                    reflex: "untrained" | "trained" | "expert" | "master" | "legendary";
                    will: "untrained" | "trained" | "expert" | "master" | "legendary";
                };
                skills: {
                    trained: number;
                    additionalChoices: string[];
                };
                attacks: {
                    simple?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    martial?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    advanced?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    unarmed?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                };
                defense: {
                    medium?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    unarmored?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    light?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    heavy?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    shields?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                };
                classDC?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            };
            progression: Record<string, {
                choices: {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                }[];
                grants: ({
                    kind: "grantFeat";
                    featId: string;
                    required: boolean;
                    level?: number | undefined;
                } | {
                    kind: "grantProficiency";
                    target: string;
                    rank: "untrained" | "trained" | "expert" | "master" | "legendary";
                } | {
                    kind: "setProficiency";
                    target: string;
                    rank: "untrained" | "trained" | "expert" | "master" | "legendary";
                } | {
                    kind: "abilityBoost";
                    mode: {
                        value: number;
                        type: "fixed";
                        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    } | {
                        value: number;
                        options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                        type: "choice";
                        count: number;
                    } | {
                        value: number;
                        type: "any";
                        count: number;
                    };
                } | {
                    kind: "abilityFlaw";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                } | {
                    value: number;
                    kind: "addModifier";
                    target: string;
                    modifierType: "status" | "item" | "circumstance" | "untyped";
                    label: string;
                    stacking: "max" | "stack";
                } | {
                    kind: "grantTrait";
                    traitId: string;
                } | {
                    kind: "grantLanguage";
                    languageId: string;
                } | {
                    kind: "grantSense";
                    senseId: string;
                    range?: number | undefined;
                } | {
                    kind: "grantChoice";
                    choice: {
                        id: string;
                        count: number;
                        label: string;
                        scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                        allowDuplicates: boolean;
                        filter?: any;
                    };
                } | {
                    value: number;
                    kind: "addSpeed";
                    speedType: "land" | "burrow" | "climb" | "fly" | "swim";
                } | {
                    kind: "grantSpell";
                    spellId: string;
                    rank?: number | undefined;
                    tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
                } | {
                    kind: "grantSpellSlot";
                    rank: number;
                    count: number;
                } | {
                    value: number;
                    kind: "modifyResource";
                    resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
                } | {
                    kind: "grantFlag";
                    flag: string;
                } | {
                    kind: "removeFlag";
                    flag: string;
                })[];
                proficiencyBumps: {
                    target: string;
                    rank: "untrained" | "trained" | "expert" | "master" | "legendary";
                }[];
                featureRefs: string[];
            }>;
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major: number;
                minor: number;
                patch: number;
            } | undefined;
            prerequisites?: any;
            spellcasting?: {
                type?: "focus" | "prepared" | "spontaneous" | "innate" | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | undefined;
        } | {
            id: string;
            type: "archetype";
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            rarity: "common" | "uncommon" | "rare" | "unique";
            traits: string[];
            tags: string[];
            effects: ({
                kind: "grantFeat";
                featId: string;
                required: boolean;
                level?: number | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    value: number;
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                } | {
                    value: number;
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                } | {
                    value: number;
                    type: "any";
                    count: number;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking: "max" | "stack";
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[];
            dedicationFeatId: string;
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major: number;
                minor: number;
                patch: number;
            } | undefined;
            prerequisites?: any;
        } | {
            id: string;
            type: "feat";
            level: number;
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            rarity: "common" | "uncommon" | "rare" | "unique";
            traits: string[];
            tags: string[];
            effects: ({
                kind: "grantFeat";
                featId: string;
                required: boolean;
                level?: number | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    value: number;
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                } | {
                    value: number;
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                } | {
                    value: number;
                    type: "any";
                    count: number;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking: "max" | "stack";
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[];
            category: "skill" | "ancestry" | "class" | "archetype" | "general";
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major: number;
                minor: number;
                patch: number;
            } | undefined;
            prerequisites?: any;
            actionCost?: {
                type?: "one" | "two" | "three" | "free" | "reaction" | "varies" | undefined;
                trait?: string | undefined;
            } | undefined;
        } | {
            id: string;
            type: "spell";
            rank: number;
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            rarity: "common" | "uncommon" | "rare" | "unique";
            traits: string[];
            tags: string[];
            effects: ({
                kind: "grantFeat";
                featId: string;
                required: boolean;
                level?: number | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    value: number;
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                } | {
                    value: number;
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                } | {
                    value: number;
                    type: "any";
                    count: number;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking: "max" | "stack";
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[];
            traditions: ("arcane" | "divine" | "occult" | "primal" | "focus")[];
            range?: string | undefined;
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major: number;
                minor: number;
                patch: number;
            } | undefined;
            prerequisites?: any;
            duration?: string | undefined;
            targets?: string | undefined;
            savingThrow?: string | undefined;
        } | {
            id: string;
            type: "item";
            level: number;
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            rarity: "common" | "uncommon" | "rare" | "unique";
            traits: string[];
            tags: string[];
            effects: ({
                kind: "grantFeat";
                featId: string;
                required: boolean;
                level?: number | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    value: number;
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                } | {
                    value: number;
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                } | {
                    value: number;
                    type: "any";
                    count: number;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking: "max" | "stack";
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[];
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major: number;
                minor: number;
                patch: number;
            } | undefined;
            prerequisites?: any;
            price?: string | undefined;
            bulk?: string | undefined;
        } | {
            id: string;
            type: "condition";
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            rarity: "common" | "uncommon" | "rare" | "unique";
            traits: string[];
            tags: string[];
            effects: ({
                kind: "grantFeat";
                featId: string;
                required: boolean;
                level?: number | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    value: number;
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                } | {
                    value: number;
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                } | {
                    value: number;
                    type: "any";
                    count: number;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking: "max" | "stack";
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[];
            levels: number[];
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major: number;
                minor: number;
                patch: number;
            } | undefined;
            prerequisites?: any;
        } | {
            id: string;
            type: "rule";
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            rarity: "common" | "uncommon" | "rare" | "unique";
            traits: string[];
            tags: string[];
            effects: ({
                kind: "grantFeat";
                featId: string;
                required: boolean;
                level?: number | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    value: number;
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                } | {
                    value: number;
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                } | {
                    value: number;
                    type: "any";
                    count: number;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking: "max" | "stack";
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[];
            category: string;
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major: number;
                minor: number;
                patch: number;
            } | undefined;
            prerequisites?: any;
        };
        packId: string;
    }, {
        hash: string;
        entity: {
            id: string;
            type: "ancestry";
            hitPoints: number;
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            size: "tiny" | "small" | "medium" | "large" | "huge" | "gargantuan";
            speed: number;
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major?: number | undefined;
                minor?: number | undefined;
                patch?: number | undefined;
            } | undefined;
            rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
            traits?: string[] | undefined;
            tags?: string[] | undefined;
            prerequisites?: any;
            effects?: ({
                kind: "grantFeat";
                featId: string;
                level?: number | undefined;
                required?: boolean | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    value?: number | undefined;
                } | {
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                    value?: number | undefined;
                } | {
                    type: "any";
                    count: number;
                    value?: number | undefined;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking?: "max" | "stack" | undefined;
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[] | undefined;
            boosts?: ({
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            } | {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            } | {
                type: "any";
                count: number;
                value?: number | undefined;
            })[] | undefined;
            flaws?: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[] | undefined;
            languages?: {
                granted?: string[] | undefined;
                choices?: {
                    options?: string[] | undefined;
                    count?: number | undefined;
                } | undefined;
            } | undefined;
            features?: string[] | undefined;
        } | {
            id: string;
            type: "heritage";
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            ancestryId: string;
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major?: number | undefined;
                minor?: number | undefined;
                patch?: number | undefined;
            } | undefined;
            rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
            traits?: string[] | undefined;
            tags?: string[] | undefined;
            prerequisites?: any;
            effects?: ({
                kind: "grantFeat";
                featId: string;
                level?: number | undefined;
                required?: boolean | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    value?: number | undefined;
                } | {
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                    value?: number | undefined;
                } | {
                    type: "any";
                    count: number;
                    value?: number | undefined;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking?: "max" | "stack" | undefined;
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[] | undefined;
        } | {
            id: string;
            type: "background";
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major?: number | undefined;
                minor?: number | undefined;
                patch?: number | undefined;
            } | undefined;
            rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
            traits?: string[] | undefined;
            tags?: string[] | undefined;
            prerequisites?: any;
            effects?: ({
                kind: "grantFeat";
                featId: string;
                level?: number | undefined;
                required?: boolean | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    value?: number | undefined;
                } | {
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                    value?: number | undefined;
                } | {
                    type: "any";
                    count: number;
                    value?: number | undefined;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking?: "max" | "stack" | undefined;
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[] | undefined;
            boosts?: ({
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            } | {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            } | {
                type: "any";
                count: number;
                value?: number | undefined;
            })[] | undefined;
            skillTraining?: string[] | undefined;
            feat?: string | undefined;
        } | {
            id: string;
            type: "class";
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            keyAbility: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            hitPointsPerLevel: number;
            proficiencies: {
                perception: "untrained" | "trained" | "expert" | "master" | "legendary";
                savingThrows: {
                    fortitude: "untrained" | "trained" | "expert" | "master" | "legendary";
                    reflex: "untrained" | "trained" | "expert" | "master" | "legendary";
                    will: "untrained" | "trained" | "expert" | "master" | "legendary";
                };
                skills: {
                    trained?: number | undefined;
                    additionalChoices?: string[] | undefined;
                };
                attacks?: {
                    simple?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    martial?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    advanced?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    unarmed?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                } | undefined;
                defense?: {
                    medium?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    unarmored?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    light?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    heavy?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    shields?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                } | undefined;
                classDC?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            };
            progression: Record<string, {
                choices?: {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                }[] | undefined;
                grants?: ({
                    kind: "grantFeat";
                    featId: string;
                    level?: number | undefined;
                    required?: boolean | undefined;
                } | {
                    kind: "grantProficiency";
                    target: string;
                    rank: "untrained" | "trained" | "expert" | "master" | "legendary";
                } | {
                    kind: "setProficiency";
                    target: string;
                    rank: "untrained" | "trained" | "expert" | "master" | "legendary";
                } | {
                    kind: "abilityBoost";
                    mode: {
                        type: "fixed";
                        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                        value?: number | undefined;
                    } | {
                        options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                        type: "choice";
                        count: number;
                        value?: number | undefined;
                    } | {
                        type: "any";
                        count: number;
                        value?: number | undefined;
                    };
                } | {
                    kind: "abilityFlaw";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                } | {
                    value: number;
                    kind: "addModifier";
                    target: string;
                    modifierType: "status" | "item" | "circumstance" | "untyped";
                    label: string;
                    stacking?: "max" | "stack" | undefined;
                } | {
                    kind: "grantTrait";
                    traitId: string;
                } | {
                    kind: "grantLanguage";
                    languageId: string;
                } | {
                    kind: "grantSense";
                    senseId: string;
                    range?: number | undefined;
                } | {
                    kind: "grantChoice";
                    choice: {
                        id: string;
                        label: string;
                        scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                        filter?: any;
                        count?: number | undefined;
                        allowDuplicates?: boolean | undefined;
                    };
                } | {
                    value: number;
                    kind: "addSpeed";
                    speedType: "land" | "burrow" | "climb" | "fly" | "swim";
                } | {
                    kind: "grantSpell";
                    spellId: string;
                    rank?: number | undefined;
                    tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
                } | {
                    kind: "grantSpellSlot";
                    rank: number;
                    count: number;
                } | {
                    value: number;
                    kind: "modifyResource";
                    resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
                } | {
                    kind: "grantFlag";
                    flag: string;
                } | {
                    kind: "removeFlag";
                    flag: string;
                })[] | undefined;
                proficiencyBumps?: {
                    target: string;
                    rank: "untrained" | "trained" | "expert" | "master" | "legendary";
                }[] | undefined;
                featureRefs?: string[] | undefined;
            }>;
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major?: number | undefined;
                minor?: number | undefined;
                patch?: number | undefined;
            } | undefined;
            rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
            traits?: string[] | undefined;
            tags?: string[] | undefined;
            prerequisites?: any;
            effects?: ({
                kind: "grantFeat";
                featId: string;
                level?: number | undefined;
                required?: boolean | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    value?: number | undefined;
                } | {
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                    value?: number | undefined;
                } | {
                    type: "any";
                    count: number;
                    value?: number | undefined;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking?: "max" | "stack" | undefined;
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[] | undefined;
            spellcasting?: {
                type?: "focus" | "prepared" | "spontaneous" | "innate" | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | undefined;
        } | {
            id: string;
            type: "archetype";
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            dedicationFeatId: string;
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major?: number | undefined;
                minor?: number | undefined;
                patch?: number | undefined;
            } | undefined;
            rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
            traits?: string[] | undefined;
            tags?: string[] | undefined;
            prerequisites?: any;
            effects?: ({
                kind: "grantFeat";
                featId: string;
                level?: number | undefined;
                required?: boolean | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    value?: number | undefined;
                } | {
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                    value?: number | undefined;
                } | {
                    type: "any";
                    count: number;
                    value?: number | undefined;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking?: "max" | "stack" | undefined;
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[] | undefined;
        } | {
            id: string;
            type: "feat";
            level: number;
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            category: "skill" | "ancestry" | "class" | "archetype" | "general";
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major?: number | undefined;
                minor?: number | undefined;
                patch?: number | undefined;
            } | undefined;
            rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
            traits?: string[] | undefined;
            tags?: string[] | undefined;
            prerequisites?: any;
            effects?: ({
                kind: "grantFeat";
                featId: string;
                level?: number | undefined;
                required?: boolean | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    value?: number | undefined;
                } | {
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                    value?: number | undefined;
                } | {
                    type: "any";
                    count: number;
                    value?: number | undefined;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking?: "max" | "stack" | undefined;
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[] | undefined;
            actionCost?: {
                type?: "one" | "two" | "three" | "free" | "reaction" | "varies" | undefined;
                trait?: string | undefined;
            } | undefined;
        } | {
            id: string;
            type: "spell";
            rank: number;
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            range?: string | undefined;
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major?: number | undefined;
                minor?: number | undefined;
                patch?: number | undefined;
            } | undefined;
            rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
            traits?: string[] | undefined;
            tags?: string[] | undefined;
            prerequisites?: any;
            effects?: ({
                kind: "grantFeat";
                featId: string;
                level?: number | undefined;
                required?: boolean | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    value?: number | undefined;
                } | {
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                    value?: number | undefined;
                } | {
                    type: "any";
                    count: number;
                    value?: number | undefined;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking?: "max" | "stack" | undefined;
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[] | undefined;
            traditions?: ("arcane" | "divine" | "occult" | "primal" | "focus")[] | undefined;
            duration?: string | undefined;
            targets?: string | undefined;
            savingThrow?: string | undefined;
        } | {
            id: string;
            type: "item";
            level: number;
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major?: number | undefined;
                minor?: number | undefined;
                patch?: number | undefined;
            } | undefined;
            rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
            traits?: string[] | undefined;
            tags?: string[] | undefined;
            prerequisites?: any;
            effects?: ({
                kind: "grantFeat";
                featId: string;
                level?: number | undefined;
                required?: boolean | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    value?: number | undefined;
                } | {
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                    value?: number | undefined;
                } | {
                    type: "any";
                    count: number;
                    value?: number | undefined;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking?: "max" | "stack" | undefined;
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[] | undefined;
            price?: string | undefined;
            bulk?: string | undefined;
        } | {
            id: string;
            type: "condition";
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major?: number | undefined;
                minor?: number | undefined;
                patch?: number | undefined;
            } | undefined;
            rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
            traits?: string[] | undefined;
            tags?: string[] | undefined;
            prerequisites?: any;
            effects?: ({
                kind: "grantFeat";
                featId: string;
                level?: number | undefined;
                required?: boolean | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    value?: number | undefined;
                } | {
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                    value?: number | undefined;
                } | {
                    type: "any";
                    count: number;
                    value?: number | undefined;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking?: "max" | "stack" | undefined;
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[] | undefined;
            levels?: number[] | undefined;
        } | {
            id: string;
            type: "rule";
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            category: string;
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major?: number | undefined;
                minor?: number | undefined;
                patch?: number | undefined;
            } | undefined;
            rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
            traits?: string[] | undefined;
            tags?: string[] | undefined;
            prerequisites?: any;
            effects?: ({
                kind: "grantFeat";
                featId: string;
                level?: number | undefined;
                required?: boolean | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    value?: number | undefined;
                } | {
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                    value?: number | undefined;
                } | {
                    type: "any";
                    count: number;
                    value?: number | undefined;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking?: "max" | "stack" | undefined;
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[] | undefined;
        };
        packId: string;
    }>, "many">;
    createdAt: z.ZodString;
}, "strip", z.ZodTypeAny, {
    createdAt: string;
    packs: Record<string, {
        id: string;
        includes: string[];
        name: string;
        license?: string | undefined;
        description?: string | undefined;
        version?: {
            major: number;
            minor: number;
            patch: number;
        } | undefined;
    }>;
    entities: {
        hash: string;
        entity: {
            id: string;
            type: "ancestry";
            hitPoints: number;
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            rarity: "common" | "uncommon" | "rare" | "unique";
            traits: string[];
            tags: string[];
            effects: ({
                kind: "grantFeat";
                featId: string;
                required: boolean;
                level?: number | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    value: number;
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                } | {
                    value: number;
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                } | {
                    value: number;
                    type: "any";
                    count: number;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking: "max" | "stack";
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[];
            size: "tiny" | "small" | "medium" | "large" | "huge" | "gargantuan";
            speed: number;
            boosts: ({
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            } | {
                value: number;
                type: "any";
                count: number;
            })[];
            flaws: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            languages: {
                granted: string[];
                choices: {
                    options: string[];
                    count: number;
                };
            };
            features: string[];
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major: number;
                minor: number;
                patch: number;
            } | undefined;
            prerequisites?: any;
        } | {
            id: string;
            type: "heritage";
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            rarity: "common" | "uncommon" | "rare" | "unique";
            traits: string[];
            tags: string[];
            effects: ({
                kind: "grantFeat";
                featId: string;
                required: boolean;
                level?: number | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    value: number;
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                } | {
                    value: number;
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                } | {
                    value: number;
                    type: "any";
                    count: number;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking: "max" | "stack";
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[];
            ancestryId: string;
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major: number;
                minor: number;
                patch: number;
            } | undefined;
            prerequisites?: any;
        } | {
            id: string;
            type: "background";
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            rarity: "common" | "uncommon" | "rare" | "unique";
            traits: string[];
            tags: string[];
            effects: ({
                kind: "grantFeat";
                featId: string;
                required: boolean;
                level?: number | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    value: number;
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                } | {
                    value: number;
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                } | {
                    value: number;
                    type: "any";
                    count: number;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking: "max" | "stack";
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[];
            boosts: ({
                value: number;
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
            } | {
                value: number;
                type: "any";
                count: number;
            })[];
            skillTraining: string[];
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major: number;
                minor: number;
                patch: number;
            } | undefined;
            prerequisites?: any;
            feat?: string | undefined;
        } | {
            id: string;
            type: "class";
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            rarity: "common" | "uncommon" | "rare" | "unique";
            traits: string[];
            tags: string[];
            effects: ({
                kind: "grantFeat";
                featId: string;
                required: boolean;
                level?: number | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    value: number;
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                } | {
                    value: number;
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                } | {
                    value: number;
                    type: "any";
                    count: number;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking: "max" | "stack";
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[];
            keyAbility: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            hitPointsPerLevel: number;
            proficiencies: {
                perception: "untrained" | "trained" | "expert" | "master" | "legendary";
                savingThrows: {
                    fortitude: "untrained" | "trained" | "expert" | "master" | "legendary";
                    reflex: "untrained" | "trained" | "expert" | "master" | "legendary";
                    will: "untrained" | "trained" | "expert" | "master" | "legendary";
                };
                skills: {
                    trained: number;
                    additionalChoices: string[];
                };
                attacks: {
                    simple?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    martial?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    advanced?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    unarmed?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                };
                defense: {
                    medium?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    unarmored?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    light?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    heavy?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    shields?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                };
                classDC?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            };
            progression: Record<string, {
                choices: {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                }[];
                grants: ({
                    kind: "grantFeat";
                    featId: string;
                    required: boolean;
                    level?: number | undefined;
                } | {
                    kind: "grantProficiency";
                    target: string;
                    rank: "untrained" | "trained" | "expert" | "master" | "legendary";
                } | {
                    kind: "setProficiency";
                    target: string;
                    rank: "untrained" | "trained" | "expert" | "master" | "legendary";
                } | {
                    kind: "abilityBoost";
                    mode: {
                        value: number;
                        type: "fixed";
                        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    } | {
                        value: number;
                        options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                        type: "choice";
                        count: number;
                    } | {
                        value: number;
                        type: "any";
                        count: number;
                    };
                } | {
                    kind: "abilityFlaw";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                } | {
                    value: number;
                    kind: "addModifier";
                    target: string;
                    modifierType: "status" | "item" | "circumstance" | "untyped";
                    label: string;
                    stacking: "max" | "stack";
                } | {
                    kind: "grantTrait";
                    traitId: string;
                } | {
                    kind: "grantLanguage";
                    languageId: string;
                } | {
                    kind: "grantSense";
                    senseId: string;
                    range?: number | undefined;
                } | {
                    kind: "grantChoice";
                    choice: {
                        id: string;
                        count: number;
                        label: string;
                        scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                        allowDuplicates: boolean;
                        filter?: any;
                    };
                } | {
                    value: number;
                    kind: "addSpeed";
                    speedType: "land" | "burrow" | "climb" | "fly" | "swim";
                } | {
                    kind: "grantSpell";
                    spellId: string;
                    rank?: number | undefined;
                    tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
                } | {
                    kind: "grantSpellSlot";
                    rank: number;
                    count: number;
                } | {
                    value: number;
                    kind: "modifyResource";
                    resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
                } | {
                    kind: "grantFlag";
                    flag: string;
                } | {
                    kind: "removeFlag";
                    flag: string;
                })[];
                proficiencyBumps: {
                    target: string;
                    rank: "untrained" | "trained" | "expert" | "master" | "legendary";
                }[];
                featureRefs: string[];
            }>;
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major: number;
                minor: number;
                patch: number;
            } | undefined;
            prerequisites?: any;
            spellcasting?: {
                type?: "focus" | "prepared" | "spontaneous" | "innate" | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | undefined;
        } | {
            id: string;
            type: "archetype";
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            rarity: "common" | "uncommon" | "rare" | "unique";
            traits: string[];
            tags: string[];
            effects: ({
                kind: "grantFeat";
                featId: string;
                required: boolean;
                level?: number | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    value: number;
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                } | {
                    value: number;
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                } | {
                    value: number;
                    type: "any";
                    count: number;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking: "max" | "stack";
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[];
            dedicationFeatId: string;
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major: number;
                minor: number;
                patch: number;
            } | undefined;
            prerequisites?: any;
        } | {
            id: string;
            type: "feat";
            level: number;
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            rarity: "common" | "uncommon" | "rare" | "unique";
            traits: string[];
            tags: string[];
            effects: ({
                kind: "grantFeat";
                featId: string;
                required: boolean;
                level?: number | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    value: number;
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                } | {
                    value: number;
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                } | {
                    value: number;
                    type: "any";
                    count: number;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking: "max" | "stack";
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[];
            category: "skill" | "ancestry" | "class" | "archetype" | "general";
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major: number;
                minor: number;
                patch: number;
            } | undefined;
            prerequisites?: any;
            actionCost?: {
                type?: "one" | "two" | "three" | "free" | "reaction" | "varies" | undefined;
                trait?: string | undefined;
            } | undefined;
        } | {
            id: string;
            type: "spell";
            rank: number;
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            rarity: "common" | "uncommon" | "rare" | "unique";
            traits: string[];
            tags: string[];
            effects: ({
                kind: "grantFeat";
                featId: string;
                required: boolean;
                level?: number | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    value: number;
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                } | {
                    value: number;
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                } | {
                    value: number;
                    type: "any";
                    count: number;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking: "max" | "stack";
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[];
            traditions: ("arcane" | "divine" | "occult" | "primal" | "focus")[];
            range?: string | undefined;
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major: number;
                minor: number;
                patch: number;
            } | undefined;
            prerequisites?: any;
            duration?: string | undefined;
            targets?: string | undefined;
            savingThrow?: string | undefined;
        } | {
            id: string;
            type: "item";
            level: number;
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            rarity: "common" | "uncommon" | "rare" | "unique";
            traits: string[];
            tags: string[];
            effects: ({
                kind: "grantFeat";
                featId: string;
                required: boolean;
                level?: number | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    value: number;
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                } | {
                    value: number;
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                } | {
                    value: number;
                    type: "any";
                    count: number;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking: "max" | "stack";
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[];
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major: number;
                minor: number;
                patch: number;
            } | undefined;
            prerequisites?: any;
            price?: string | undefined;
            bulk?: string | undefined;
        } | {
            id: string;
            type: "condition";
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            rarity: "common" | "uncommon" | "rare" | "unique";
            traits: string[];
            tags: string[];
            effects: ({
                kind: "grantFeat";
                featId: string;
                required: boolean;
                level?: number | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    value: number;
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                } | {
                    value: number;
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                } | {
                    value: number;
                    type: "any";
                    count: number;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking: "max" | "stack";
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[];
            levels: number[];
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major: number;
                minor: number;
                patch: number;
            } | undefined;
            prerequisites?: any;
        } | {
            id: string;
            type: "rule";
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            rarity: "common" | "uncommon" | "rare" | "unique";
            traits: string[];
            tags: string[];
            effects: ({
                kind: "grantFeat";
                featId: string;
                required: boolean;
                level?: number | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    value: number;
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                } | {
                    value: number;
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                } | {
                    value: number;
                    type: "any";
                    count: number;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking: "max" | "stack";
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    count: number;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    allowDuplicates: boolean;
                    filter?: any;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[];
            category: string;
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major: number;
                minor: number;
                patch: number;
            } | undefined;
            prerequisites?: any;
        };
        packId: string;
    }[];
}, {
    createdAt: string;
    entities: {
        hash: string;
        entity: {
            id: string;
            type: "ancestry";
            hitPoints: number;
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            size: "tiny" | "small" | "medium" | "large" | "huge" | "gargantuan";
            speed: number;
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major?: number | undefined;
                minor?: number | undefined;
                patch?: number | undefined;
            } | undefined;
            rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
            traits?: string[] | undefined;
            tags?: string[] | undefined;
            prerequisites?: any;
            effects?: ({
                kind: "grantFeat";
                featId: string;
                level?: number | undefined;
                required?: boolean | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    value?: number | undefined;
                } | {
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                    value?: number | undefined;
                } | {
                    type: "any";
                    count: number;
                    value?: number | undefined;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking?: "max" | "stack" | undefined;
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[] | undefined;
            boosts?: ({
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            } | {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            } | {
                type: "any";
                count: number;
                value?: number | undefined;
            })[] | undefined;
            flaws?: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[] | undefined;
            languages?: {
                granted?: string[] | undefined;
                choices?: {
                    options?: string[] | undefined;
                    count?: number | undefined;
                } | undefined;
            } | undefined;
            features?: string[] | undefined;
        } | {
            id: string;
            type: "heritage";
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            ancestryId: string;
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major?: number | undefined;
                minor?: number | undefined;
                patch?: number | undefined;
            } | undefined;
            rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
            traits?: string[] | undefined;
            tags?: string[] | undefined;
            prerequisites?: any;
            effects?: ({
                kind: "grantFeat";
                featId: string;
                level?: number | undefined;
                required?: boolean | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    value?: number | undefined;
                } | {
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                    value?: number | undefined;
                } | {
                    type: "any";
                    count: number;
                    value?: number | undefined;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking?: "max" | "stack" | undefined;
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[] | undefined;
        } | {
            id: string;
            type: "background";
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major?: number | undefined;
                minor?: number | undefined;
                patch?: number | undefined;
            } | undefined;
            rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
            traits?: string[] | undefined;
            tags?: string[] | undefined;
            prerequisites?: any;
            effects?: ({
                kind: "grantFeat";
                featId: string;
                level?: number | undefined;
                required?: boolean | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    value?: number | undefined;
                } | {
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                    value?: number | undefined;
                } | {
                    type: "any";
                    count: number;
                    value?: number | undefined;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking?: "max" | "stack" | undefined;
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[] | undefined;
            boosts?: ({
                type: "fixed";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                value?: number | undefined;
            } | {
                options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                type: "choice";
                count: number;
                value?: number | undefined;
            } | {
                type: "any";
                count: number;
                value?: number | undefined;
            })[] | undefined;
            skillTraining?: string[] | undefined;
            feat?: string | undefined;
        } | {
            id: string;
            type: "class";
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            keyAbility: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            hitPointsPerLevel: number;
            proficiencies: {
                perception: "untrained" | "trained" | "expert" | "master" | "legendary";
                savingThrows: {
                    fortitude: "untrained" | "trained" | "expert" | "master" | "legendary";
                    reflex: "untrained" | "trained" | "expert" | "master" | "legendary";
                    will: "untrained" | "trained" | "expert" | "master" | "legendary";
                };
                skills: {
                    trained?: number | undefined;
                    additionalChoices?: string[] | undefined;
                };
                attacks?: {
                    simple?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    martial?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    advanced?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    unarmed?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                } | undefined;
                defense?: {
                    medium?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    unarmored?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    light?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    heavy?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                    shields?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
                } | undefined;
                classDC?: "untrained" | "trained" | "expert" | "master" | "legendary" | undefined;
            };
            progression: Record<string, {
                choices?: {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                }[] | undefined;
                grants?: ({
                    kind: "grantFeat";
                    featId: string;
                    level?: number | undefined;
                    required?: boolean | undefined;
                } | {
                    kind: "grantProficiency";
                    target: string;
                    rank: "untrained" | "trained" | "expert" | "master" | "legendary";
                } | {
                    kind: "setProficiency";
                    target: string;
                    rank: "untrained" | "trained" | "expert" | "master" | "legendary";
                } | {
                    kind: "abilityBoost";
                    mode: {
                        type: "fixed";
                        abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                        value?: number | undefined;
                    } | {
                        options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                        type: "choice";
                        count: number;
                        value?: number | undefined;
                    } | {
                        type: "any";
                        count: number;
                        value?: number | undefined;
                    };
                } | {
                    kind: "abilityFlaw";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                } | {
                    value: number;
                    kind: "addModifier";
                    target: string;
                    modifierType: "status" | "item" | "circumstance" | "untyped";
                    label: string;
                    stacking?: "max" | "stack" | undefined;
                } | {
                    kind: "grantTrait";
                    traitId: string;
                } | {
                    kind: "grantLanguage";
                    languageId: string;
                } | {
                    kind: "grantSense";
                    senseId: string;
                    range?: number | undefined;
                } | {
                    kind: "grantChoice";
                    choice: {
                        id: string;
                        label: string;
                        scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                        filter?: any;
                        count?: number | undefined;
                        allowDuplicates?: boolean | undefined;
                    };
                } | {
                    value: number;
                    kind: "addSpeed";
                    speedType: "land" | "burrow" | "climb" | "fly" | "swim";
                } | {
                    kind: "grantSpell";
                    spellId: string;
                    rank?: number | undefined;
                    tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
                } | {
                    kind: "grantSpellSlot";
                    rank: number;
                    count: number;
                } | {
                    value: number;
                    kind: "modifyResource";
                    resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
                } | {
                    kind: "grantFlag";
                    flag: string;
                } | {
                    kind: "removeFlag";
                    flag: string;
                })[] | undefined;
                proficiencyBumps?: {
                    target: string;
                    rank: "untrained" | "trained" | "expert" | "master" | "legendary";
                }[] | undefined;
                featureRefs?: string[] | undefined;
            }>;
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major?: number | undefined;
                minor?: number | undefined;
                patch?: number | undefined;
            } | undefined;
            rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
            traits?: string[] | undefined;
            tags?: string[] | undefined;
            prerequisites?: any;
            effects?: ({
                kind: "grantFeat";
                featId: string;
                level?: number | undefined;
                required?: boolean | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    value?: number | undefined;
                } | {
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                    value?: number | undefined;
                } | {
                    type: "any";
                    count: number;
                    value?: number | undefined;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking?: "max" | "stack" | undefined;
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[] | undefined;
            spellcasting?: {
                type?: "focus" | "prepared" | "spontaneous" | "innate" | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | undefined;
        } | {
            id: string;
            type: "archetype";
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            dedicationFeatId: string;
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major?: number | undefined;
                minor?: number | undefined;
                patch?: number | undefined;
            } | undefined;
            rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
            traits?: string[] | undefined;
            tags?: string[] | undefined;
            prerequisites?: any;
            effects?: ({
                kind: "grantFeat";
                featId: string;
                level?: number | undefined;
                required?: boolean | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    value?: number | undefined;
                } | {
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                    value?: number | undefined;
                } | {
                    type: "any";
                    count: number;
                    value?: number | undefined;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking?: "max" | "stack" | undefined;
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[] | undefined;
        } | {
            id: string;
            type: "feat";
            level: number;
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            category: "skill" | "ancestry" | "class" | "archetype" | "general";
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major?: number | undefined;
                minor?: number | undefined;
                patch?: number | undefined;
            } | undefined;
            rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
            traits?: string[] | undefined;
            tags?: string[] | undefined;
            prerequisites?: any;
            effects?: ({
                kind: "grantFeat";
                featId: string;
                level?: number | undefined;
                required?: boolean | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    value?: number | undefined;
                } | {
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                    value?: number | undefined;
                } | {
                    type: "any";
                    count: number;
                    value?: number | undefined;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking?: "max" | "stack" | undefined;
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[] | undefined;
            actionCost?: {
                type?: "one" | "two" | "three" | "free" | "reaction" | "varies" | undefined;
                trait?: string | undefined;
            } | undefined;
        } | {
            id: string;
            type: "spell";
            rank: number;
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            range?: string | undefined;
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major?: number | undefined;
                minor?: number | undefined;
                patch?: number | undefined;
            } | undefined;
            rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
            traits?: string[] | undefined;
            tags?: string[] | undefined;
            prerequisites?: any;
            effects?: ({
                kind: "grantFeat";
                featId: string;
                level?: number | undefined;
                required?: boolean | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    value?: number | undefined;
                } | {
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                    value?: number | undefined;
                } | {
                    type: "any";
                    count: number;
                    value?: number | undefined;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking?: "max" | "stack" | undefined;
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[] | undefined;
            traditions?: ("arcane" | "divine" | "occult" | "primal" | "focus")[] | undefined;
            duration?: string | undefined;
            targets?: string | undefined;
            savingThrow?: string | undefined;
        } | {
            id: string;
            type: "item";
            level: number;
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major?: number | undefined;
                minor?: number | undefined;
                patch?: number | undefined;
            } | undefined;
            rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
            traits?: string[] | undefined;
            tags?: string[] | undefined;
            prerequisites?: any;
            effects?: ({
                kind: "grantFeat";
                featId: string;
                level?: number | undefined;
                required?: boolean | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    value?: number | undefined;
                } | {
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                    value?: number | undefined;
                } | {
                    type: "any";
                    count: number;
                    value?: number | undefined;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking?: "max" | "stack" | undefined;
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[] | undefined;
            price?: string | undefined;
            bulk?: string | undefined;
        } | {
            id: string;
            type: "condition";
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major?: number | undefined;
                minor?: number | undefined;
                patch?: number | undefined;
            } | undefined;
            rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
            traits?: string[] | undefined;
            tags?: string[] | undefined;
            prerequisites?: any;
            effects?: ({
                kind: "grantFeat";
                featId: string;
                level?: number | undefined;
                required?: boolean | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    value?: number | undefined;
                } | {
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                    value?: number | undefined;
                } | {
                    type: "any";
                    count: number;
                    value?: number | undefined;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking?: "max" | "stack" | undefined;
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[] | undefined;
            levels?: number[] | undefined;
        } | {
            id: string;
            type: "rule";
            name: string;
            source: {
                id: string;
                page?: number | undefined;
                license?: string | undefined;
            };
            category: string;
            slug?: string | undefined;
            summary?: string | undefined;
            description?: string | undefined;
            version?: {
                major?: number | undefined;
                minor?: number | undefined;
                patch?: number | undefined;
            } | undefined;
            rarity?: "common" | "uncommon" | "rare" | "unique" | undefined;
            traits?: string[] | undefined;
            tags?: string[] | undefined;
            prerequisites?: any;
            effects?: ({
                kind: "grantFeat";
                featId: string;
                level?: number | undefined;
                required?: boolean | undefined;
            } | {
                kind: "grantProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "setProficiency";
                target: string;
                rank: "untrained" | "trained" | "expert" | "master" | "legendary";
            } | {
                kind: "abilityBoost";
                mode: {
                    type: "fixed";
                    abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    value?: number | undefined;
                } | {
                    options: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
                    type: "choice";
                    count: number;
                    value?: number | undefined;
                } | {
                    type: "any";
                    count: number;
                    value?: number | undefined;
                };
            } | {
                kind: "abilityFlaw";
                abilities: ("STR" | "DEX" | "CON" | "INT" | "WIS" | "CHA")[];
            } | {
                value: number;
                kind: "addModifier";
                target: string;
                modifierType: "status" | "item" | "circumstance" | "untyped";
                label: string;
                stacking?: "max" | "stack" | undefined;
            } | {
                kind: "grantTrait";
                traitId: string;
            } | {
                kind: "grantLanguage";
                languageId: string;
            } | {
                kind: "grantSense";
                senseId: string;
                range?: number | undefined;
            } | {
                kind: "grantChoice";
                choice: {
                    id: string;
                    label: string;
                    scope: "abilityBoost" | "skill" | "skillFeat" | "classFeat" | "generalFeat" | "ancestryFeat" | "classFeature" | "spell" | "proficiency" | "language";
                    filter?: any;
                    count?: number | undefined;
                    allowDuplicates?: boolean | undefined;
                };
            } | {
                value: number;
                kind: "addSpeed";
                speedType: "land" | "burrow" | "climb" | "fly" | "swim";
            } | {
                kind: "grantSpell";
                spellId: string;
                rank?: number | undefined;
                tradition?: "arcane" | "divine" | "occult" | "primal" | "focus" | undefined;
            } | {
                kind: "grantSpellSlot";
                rank: number;
                count: number;
            } | {
                value: number;
                kind: "modifyResource";
                resource: "focusPoints" | "hitPoints" | "resolve" | "classDc" | "heroPoints";
            } | {
                kind: "grantFlag";
                flag: string;
            } | {
                kind: "removeFlag";
                flag: string;
            })[] | undefined;
        };
        packId: string;
    }[];
    packs?: Record<string, {
        id: string;
        name: string;
        license?: string | undefined;
        includes?: string[] | undefined;
        description?: string | undefined;
        version?: {
            major?: number | undefined;
            minor?: number | undefined;
            patch?: number | undefined;
        } | undefined;
    }> | undefined;
}>;
export type CatalogIndex = z.infer<typeof catalogIndexSchema>;
export {};
//# sourceMappingURL=index.d.ts.map